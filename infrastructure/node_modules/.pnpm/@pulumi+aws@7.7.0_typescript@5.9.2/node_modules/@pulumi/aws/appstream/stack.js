"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stack = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an AppStream stack.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.appstream.Stack("example", {
 *     name: "stack name",
 *     description: "stack description",
 *     displayName: "stack display name",
 *     feedbackUrl: "http://your-domain/feedback",
 *     redirectUrl: "http://your-domain/redirect",
 *     storageConnectors: [{
 *         connectorType: "HOMEFOLDERS",
 *     }],
 *     userSettings: [
 *         {
 *             action: "AUTO_TIME_ZONE_REDIRECTION",
 *             permission: "DISABLED",
 *         },
 *         {
 *             action: "CLIPBOARD_COPY_FROM_LOCAL_DEVICE",
 *             permission: "ENABLED",
 *         },
 *         {
 *             action: "CLIPBOARD_COPY_TO_LOCAL_DEVICE",
 *             permission: "ENABLED",
 *         },
 *         {
 *             action: "DOMAIN_PASSWORD_SIGNIN",
 *             permission: "ENABLED",
 *         },
 *         {
 *             action: "DOMAIN_SMART_CARD_SIGNIN",
 *             permission: "DISABLED",
 *         },
 *         {
 *             action: "FILE_DOWNLOAD",
 *             permission: "ENABLED",
 *         },
 *         {
 *             action: "FILE_UPLOAD",
 *             permission: "ENABLED",
 *         },
 *         {
 *             action: "PRINTING_TO_LOCAL_DEVICE",
 *             permission: "ENABLED",
 *         },
 *     ],
 *     applicationSettings: {
 *         enabled: true,
 *         settingsGroup: "SettingsGroup",
 *     },
 *     tags: {
 *         TagName: "TagValue",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_appstream_stack` using the id. For example:
 *
 * ```sh
 * $ pulumi import aws:appstream/stack:Stack example stackID
 * ```
 */
class Stack extends pulumi.CustomResource {
    /**
     * Get an existing Stack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Stack(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Stack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Stack.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accessEndpoints"] = state?.accessEndpoints;
            resourceInputs["applicationSettings"] = state?.applicationSettings;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["createdTime"] = state?.createdTime;
            resourceInputs["description"] = state?.description;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["embedHostDomains"] = state?.embedHostDomains;
            resourceInputs["feedbackUrl"] = state?.feedbackUrl;
            resourceInputs["name"] = state?.name;
            resourceInputs["redirectUrl"] = state?.redirectUrl;
            resourceInputs["region"] = state?.region;
            resourceInputs["storageConnectors"] = state?.storageConnectors;
            resourceInputs["streamingExperienceSettings"] = state?.streamingExperienceSettings;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["userSettings"] = state?.userSettings;
        }
        else {
            const args = argsOrState;
            resourceInputs["accessEndpoints"] = args?.accessEndpoints;
            resourceInputs["applicationSettings"] = args?.applicationSettings;
            resourceInputs["description"] = args?.description;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["embedHostDomains"] = args?.embedHostDomains;
            resourceInputs["feedbackUrl"] = args?.feedbackUrl;
            resourceInputs["name"] = args?.name;
            resourceInputs["redirectUrl"] = args?.redirectUrl;
            resourceInputs["region"] = args?.region;
            resourceInputs["storageConnectors"] = args?.storageConnectors;
            resourceInputs["streamingExperienceSettings"] = args?.streamingExperienceSettings;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["userSettings"] = args?.userSettings;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Stack.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Stack = Stack;
/** @internal */
Stack.__pulumiType = 'aws:appstream/stack:Stack';
//# sourceMappingURL=stack.js.map