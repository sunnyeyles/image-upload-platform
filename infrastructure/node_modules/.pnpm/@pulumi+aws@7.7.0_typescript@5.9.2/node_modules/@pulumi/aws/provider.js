"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Provider = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * The provider type for the aws package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
class Provider extends pulumi.ProviderResource {
    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }
    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        {
            resourceInputs["accessKey"] = args?.accessKey ? pulumi.secret(args.accessKey) : undefined;
            resourceInputs["allowedAccountIds"] = pulumi.output(args?.allowedAccountIds).apply(JSON.stringify);
            resourceInputs["assumeRoleWithWebIdentity"] = pulumi.output(args?.assumeRoleWithWebIdentity).apply(JSON.stringify);
            resourceInputs["assumeRoles"] = pulumi.output(args?.assumeRoles).apply(JSON.stringify);
            resourceInputs["customCaBundle"] = args?.customCaBundle;
            resourceInputs["defaultTags"] = pulumi.output(args?.defaultTags).apply(JSON.stringify);
            resourceInputs["ec2MetadataServiceEndpoint"] = args?.ec2MetadataServiceEndpoint;
            resourceInputs["ec2MetadataServiceEndpointMode"] = args?.ec2MetadataServiceEndpointMode;
            resourceInputs["endpoints"] = pulumi.output(args?.endpoints).apply(JSON.stringify);
            resourceInputs["forbiddenAccountIds"] = pulumi.output(args?.forbiddenAccountIds).apply(JSON.stringify);
            resourceInputs["httpProxy"] = args?.httpProxy;
            resourceInputs["httpsProxy"] = args?.httpsProxy;
            resourceInputs["ignoreTags"] = pulumi.output(args?.ignoreTags).apply(JSON.stringify);
            resourceInputs["insecure"] = pulumi.output(args?.insecure).apply(JSON.stringify);
            resourceInputs["maxRetries"] = pulumi.output(args?.maxRetries).apply(JSON.stringify);
            resourceInputs["noProxy"] = args?.noProxy;
            resourceInputs["profile"] = args?.profile;
            resourceInputs["region"] = (args?.region) ?? utilities.getEnv("AWS_REGION", "AWS_DEFAULT_REGION");
            resourceInputs["retryMode"] = args?.retryMode;
            resourceInputs["s3UsEast1RegionalEndpoint"] = args?.s3UsEast1RegionalEndpoint;
            resourceInputs["s3UsePathStyle"] = pulumi.output(args?.s3UsePathStyle).apply(JSON.stringify);
            resourceInputs["secretKey"] = args?.secretKey ? pulumi.secret(args.secretKey) : undefined;
            resourceInputs["sharedConfigFiles"] = pulumi.output(args?.sharedConfigFiles).apply(JSON.stringify);
            resourceInputs["sharedCredentialsFiles"] = pulumi.output(args?.sharedCredentialsFiles).apply(JSON.stringify);
            resourceInputs["skipCredentialsValidation"] = pulumi.output((args?.skipCredentialsValidation) ?? false).apply(JSON.stringify);
            resourceInputs["skipMetadataApiCheck"] = pulumi.output(args?.skipMetadataApiCheck).apply(JSON.stringify);
            resourceInputs["skipRegionValidation"] = pulumi.output((args?.skipRegionValidation) ?? true).apply(JSON.stringify);
            resourceInputs["skipRequestingAccountId"] = pulumi.output(args?.skipRequestingAccountId).apply(JSON.stringify);
            resourceInputs["stsRegion"] = args?.stsRegion;
            resourceInputs["token"] = args?.token ? pulumi.secret(args.token) : undefined;
            resourceInputs["tokenBucketRateLimiterCapacity"] = pulumi.output(args?.tokenBucketRateLimiterCapacity).apply(JSON.stringify);
            resourceInputs["useDualstackEndpoint"] = pulumi.output(args?.useDualstackEndpoint).apply(JSON.stringify);
            resourceInputs["useFipsEndpoint"] = pulumi.output(args?.useFipsEndpoint).apply(JSON.stringify);
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessKey", "secretKey", "token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
     */
    terraformConfig() {
        return pulumi.runtime.call("pulumi:providers:aws/terraformConfig", {
            "__self__": this,
        }, this);
    }
}
exports.Provider = Provider;
/** @internal */
Provider.__pulumiType = 'aws';
//# sourceMappingURL=provider.js.map