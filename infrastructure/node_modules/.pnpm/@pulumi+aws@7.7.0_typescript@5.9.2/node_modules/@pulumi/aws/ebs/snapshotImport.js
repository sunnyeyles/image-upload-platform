"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnapshotImport = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Imports a disk image from S3 as a Snapshot.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ebs.SnapshotImport("example", {
 *     diskContainer: {
 *         format: "VHD",
 *         userBucket: {
 *             s3Bucket: "disk-images",
 *             s3Key: "source.vhd",
 *         },
 *     },
 *     roleName: "disk-image-import",
 *     tags: {
 *         Name: "HelloWorld",
 *     },
 * });
 * ```
 */
class SnapshotImport extends pulumi.CustomResource {
    /**
     * Get an existing SnapshotImport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SnapshotImport(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of SnapshotImport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnapshotImport.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["clientData"] = state?.clientData;
            resourceInputs["dataEncryptionKeyId"] = state?.dataEncryptionKeyId;
            resourceInputs["description"] = state?.description;
            resourceInputs["diskContainer"] = state?.diskContainer;
            resourceInputs["encrypted"] = state?.encrypted;
            resourceInputs["kmsKeyId"] = state?.kmsKeyId;
            resourceInputs["outpostArn"] = state?.outpostArn;
            resourceInputs["ownerAlias"] = state?.ownerAlias;
            resourceInputs["ownerId"] = state?.ownerId;
            resourceInputs["permanentRestore"] = state?.permanentRestore;
            resourceInputs["region"] = state?.region;
            resourceInputs["roleName"] = state?.roleName;
            resourceInputs["storageTier"] = state?.storageTier;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["temporaryRestoreDays"] = state?.temporaryRestoreDays;
            resourceInputs["volumeId"] = state?.volumeId;
            resourceInputs["volumeSize"] = state?.volumeSize;
        }
        else {
            const args = argsOrState;
            if (args?.diskContainer === undefined && !opts.urn) {
                throw new Error("Missing required property 'diskContainer'");
            }
            resourceInputs["clientData"] = args?.clientData;
            resourceInputs["description"] = args?.description;
            resourceInputs["diskContainer"] = args?.diskContainer;
            resourceInputs["encrypted"] = args?.encrypted;
            resourceInputs["kmsKeyId"] = args?.kmsKeyId;
            resourceInputs["permanentRestore"] = args?.permanentRestore;
            resourceInputs["region"] = args?.region;
            resourceInputs["roleName"] = args?.roleName;
            resourceInputs["storageTier"] = args?.storageTier;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["temporaryRestoreDays"] = args?.temporaryRestoreDays;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["dataEncryptionKeyId"] = undefined /*out*/;
            resourceInputs["outpostArn"] = undefined /*out*/;
            resourceInputs["ownerAlias"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["volumeId"] = undefined /*out*/;
            resourceInputs["volumeSize"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnapshotImport.__pulumiType, name, resourceInputs, opts);
    }
}
exports.SnapshotImport = SnapshotImport;
/** @internal */
SnapshotImport.__pulumiType = 'aws:ebs/snapshotImport:SnapshotImport';
//# sourceMappingURL=snapshotImport.js.map