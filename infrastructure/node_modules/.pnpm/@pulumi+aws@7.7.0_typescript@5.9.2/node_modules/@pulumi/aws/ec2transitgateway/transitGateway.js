"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransitGateway = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an EC2 Transit Gateway.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ec2transitgateway.TransitGateway("example", {description: "example"});
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_ec2_transit_gateway` using the EC2 Transit Gateway identifier. For example:
 *
 * ```sh
 * $ pulumi import aws:ec2transitgateway/transitGateway:TransitGateway example tgw-12345678
 * ```
 */
class TransitGateway extends pulumi.CustomResource {
    /**
     * Get an existing TransitGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TransitGateway(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of TransitGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TransitGateway.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["amazonSideAsn"] = state?.amazonSideAsn;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["associationDefaultRouteTableId"] = state?.associationDefaultRouteTableId;
            resourceInputs["autoAcceptSharedAttachments"] = state?.autoAcceptSharedAttachments;
            resourceInputs["defaultRouteTableAssociation"] = state?.defaultRouteTableAssociation;
            resourceInputs["defaultRouteTablePropagation"] = state?.defaultRouteTablePropagation;
            resourceInputs["description"] = state?.description;
            resourceInputs["dnsSupport"] = state?.dnsSupport;
            resourceInputs["multicastSupport"] = state?.multicastSupport;
            resourceInputs["ownerId"] = state?.ownerId;
            resourceInputs["propagationDefaultRouteTableId"] = state?.propagationDefaultRouteTableId;
            resourceInputs["region"] = state?.region;
            resourceInputs["securityGroupReferencingSupport"] = state?.securityGroupReferencingSupport;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["transitGatewayCidrBlocks"] = state?.transitGatewayCidrBlocks;
            resourceInputs["vpnEcmpSupport"] = state?.vpnEcmpSupport;
        }
        else {
            const args = argsOrState;
            resourceInputs["amazonSideAsn"] = args?.amazonSideAsn;
            resourceInputs["autoAcceptSharedAttachments"] = args?.autoAcceptSharedAttachments;
            resourceInputs["defaultRouteTableAssociation"] = args?.defaultRouteTableAssociation;
            resourceInputs["defaultRouteTablePropagation"] = args?.defaultRouteTablePropagation;
            resourceInputs["description"] = args?.description;
            resourceInputs["dnsSupport"] = args?.dnsSupport;
            resourceInputs["multicastSupport"] = args?.multicastSupport;
            resourceInputs["region"] = args?.region;
            resourceInputs["securityGroupReferencingSupport"] = args?.securityGroupReferencingSupport;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["transitGatewayCidrBlocks"] = args?.transitGatewayCidrBlocks;
            resourceInputs["vpnEcmpSupport"] = args?.vpnEcmpSupport;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["associationDefaultRouteTableId"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["propagationDefaultRouteTableId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TransitGateway.__pulumiType, name, resourceInputs, opts);
    }
}
exports.TransitGateway = TransitGateway;
/** @internal */
TransitGateway.__pulumiType = 'aws:ec2transitgateway/transitGateway:TransitGateway';
//# sourceMappingURL=transitGateway.js.map