"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RepositoryAssociation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS CodeGuru Reviewer Repository Association.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.kms.Key("example", {});
 * const exampleRepository = new aws.codecommit.Repository("example", {repositoryName: "example-repo"});
 * const exampleRepositoryAssociation = new aws.codegurureviewer.RepositoryAssociation("example", {
 *     repository: {
 *         codecommit: {
 *             name: exampleRepository.repositoryName,
 *         },
 *     },
 *     kmsKeyDetails: {
 *         encryptionOption: "CUSTOMER_MANAGED_CMK",
 *         kmsKeyId: example.keyId,
 *     },
 * });
 * ```
 */
class RepositoryAssociation extends pulumi.CustomResource {
    /**
     * Get an existing RepositoryAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RepositoryAssociation(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of RepositoryAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryAssociation.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["associationId"] = state?.associationId;
            resourceInputs["connectionArn"] = state?.connectionArn;
            resourceInputs["kmsKeyDetails"] = state?.kmsKeyDetails;
            resourceInputs["name"] = state?.name;
            resourceInputs["owner"] = state?.owner;
            resourceInputs["providerType"] = state?.providerType;
            resourceInputs["region"] = state?.region;
            resourceInputs["repository"] = state?.repository;
            resourceInputs["s3RepositoryDetails"] = state?.s3RepositoryDetails;
            resourceInputs["state"] = state?.state;
            resourceInputs["stateReason"] = state?.stateReason;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
        }
        else {
            const args = argsOrState;
            if (args?.repository === undefined && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            resourceInputs["kmsKeyDetails"] = args?.kmsKeyDetails;
            resourceInputs["region"] = args?.region;
            resourceInputs["repository"] = args?.repository;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["associationId"] = undefined /*out*/;
            resourceInputs["connectionArn"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["providerType"] = undefined /*out*/;
            resourceInputs["s3RepositoryDetails"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateReason"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RepositoryAssociation.__pulumiType, name, resourceInputs, opts);
    }
}
exports.RepositoryAssociation = RepositoryAssociation;
/** @internal */
RepositoryAssociation.__pulumiType = 'aws:codegurureviewer/repositoryAssociation:RepositoryAssociation';
//# sourceMappingURL=repositoryAssociation.js.map