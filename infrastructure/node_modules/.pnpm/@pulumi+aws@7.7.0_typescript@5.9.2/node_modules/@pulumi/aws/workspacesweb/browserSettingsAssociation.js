"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserSettingsAssociation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS WorkSpaces Web Browser Settings Association.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.workspacesweb.Portal("example", {displayName: "example"});
 * const exampleBrowserSettings = new aws.workspacesweb.BrowserSettings("example", {browserPolicy: JSON.stringify({
 *     chromePolicies: {
 *         DefaultDownloadDirectory: {
 *             value: "/home/as2-streaming-user/MyFiles/TemporaryFiles1",
 *         },
 *     },
 * })});
 * const exampleBrowserSettingsAssociation = new aws.workspacesweb.BrowserSettingsAssociation("example", {
 *     browserSettingsArn: exampleBrowserSettings.browserSettingsArn,
 *     portalArn: example.portalArn,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import WorkSpaces Web Browser Settings Association using the `browser_settings_arn,portal_arn`. For example:
 *
 * ```sh
 * $ pulumi import aws:workspacesweb/browserSettingsAssociation:BrowserSettingsAssociation example arn:aws:workspaces-web:us-west-2:123456789012:browserSettings/browser_settings-id-12345678,arn:aws:workspaces-web:us-west-2:123456789012:portal/portal-id-12345678
 * ```
 */
class BrowserSettingsAssociation extends pulumi.CustomResource {
    /**
     * Get an existing BrowserSettingsAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new BrowserSettingsAssociation(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of BrowserSettingsAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BrowserSettingsAssociation.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["browserSettingsArn"] = state?.browserSettingsArn;
            resourceInputs["portalArn"] = state?.portalArn;
            resourceInputs["region"] = state?.region;
        }
        else {
            const args = argsOrState;
            if (args?.browserSettingsArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'browserSettingsArn'");
            }
            if (args?.portalArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'portalArn'");
            }
            resourceInputs["browserSettingsArn"] = args?.browserSettingsArn;
            resourceInputs["portalArn"] = args?.portalArn;
            resourceInputs["region"] = args?.region;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BrowserSettingsAssociation.__pulumiType, name, resourceInputs, opts);
    }
}
exports.BrowserSettingsAssociation = BrowserSettingsAssociation;
/** @internal */
BrowserSettingsAssociation.__pulumiType = 'aws:workspacesweb/browserSettingsAssociation:BrowserSettingsAssociation';
//# sourceMappingURL=browserSettingsAssociation.js.map