"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.IpAccessSettingsAssociation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS WorkSpaces Web IP Access Settings Association.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.workspacesweb.Portal("example", {displayName: "example"});
 * const exampleIpAccessSettings = new aws.workspacesweb.IpAccessSettings("example", {
 *     displayName: "example",
 *     ipRules: [{
 *         ipRange: "10.0.0.0/16",
 *     }],
 * });
 * const exampleIpAccessSettingsAssociation = new aws.workspacesweb.IpAccessSettingsAssociation("example", {
 *     ipAccessSettingsArn: exampleIpAccessSettings.ipAccessSettingsArn,
 *     portalArn: example.portalArn,
 * });
 * ```
 */
class IpAccessSettingsAssociation extends pulumi.CustomResource {
    /**
     * Get an existing IpAccessSettingsAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new IpAccessSettingsAssociation(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of IpAccessSettingsAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpAccessSettingsAssociation.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["ipAccessSettingsArn"] = state?.ipAccessSettingsArn;
            resourceInputs["portalArn"] = state?.portalArn;
            resourceInputs["region"] = state?.region;
        }
        else {
            const args = argsOrState;
            if (args?.ipAccessSettingsArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'ipAccessSettingsArn'");
            }
            if (args?.portalArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'portalArn'");
            }
            resourceInputs["ipAccessSettingsArn"] = args?.ipAccessSettingsArn;
            resourceInputs["portalArn"] = args?.portalArn;
            resourceInputs["region"] = args?.region;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpAccessSettingsAssociation.__pulumiType, name, resourceInputs, opts);
    }
}
exports.IpAccessSettingsAssociation = IpAccessSettingsAssociation;
/** @internal */
IpAccessSettingsAssociation.__pulumiType = 'aws:workspacesweb/ipAccessSettingsAssociation:IpAccessSettingsAssociation';
//# sourceMappingURL=ipAccessSettingsAssociation.js.map