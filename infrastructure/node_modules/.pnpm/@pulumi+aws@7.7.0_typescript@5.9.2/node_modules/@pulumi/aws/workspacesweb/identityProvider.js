"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityProvider = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS WorkSpaces Web Identity Provider.
 *
 * ## Example Usage
 *
 * ### Basic Usage with SAML
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.workspacesweb.Portal("example", {displayName: "example"});
 * const exampleIdentityProvider = new aws.workspacesweb.IdentityProvider("example", {
 *     identityProviderName: "example-saml",
 *     identityProviderType: "SAML",
 *     portalArn: example.portalArn,
 *     identityProviderDetails: {
 *         MetadataURL: "https://example.com/metadata",
 *     },
 * });
 * ```
 *
 * ### OIDC Identity Provider
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.workspacesweb.Portal("test", {displayName: "test"});
 * const testIdentityProvider = new aws.workspacesweb.IdentityProvider("test", {
 *     identityProviderName: "test-updated",
 *     identityProviderType: "OIDC",
 *     portalArn: test.portalArn,
 *     identityProviderDetails: {
 *         client_id: "test-client-id",
 *         client_secret: "test-client-secret",
 *         oidc_issuer: "https://accounts.google.com",
 *         attributes_request_method: "POST",
 *         authorize_scopes: "openid, email",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import WorkSpaces Web Identity Provider using the `identity_provider_arn`. For example:
 *
 * ```sh
 * $ pulumi import aws:workspacesweb/identityProvider:IdentityProvider example arn:aws:workspaces-web:us-west-2:123456789012:identityprovider/abcdef12345678/12345678-1234-1234-1234-123456789012
 * ```
 */
class IdentityProvider extends pulumi.CustomResource {
    /**
     * Get an existing IdentityProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new IdentityProvider(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of IdentityProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityProvider.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["identityProviderArn"] = state?.identityProviderArn;
            resourceInputs["identityProviderDetails"] = state?.identityProviderDetails;
            resourceInputs["identityProviderName"] = state?.identityProviderName;
            resourceInputs["identityProviderType"] = state?.identityProviderType;
            resourceInputs["portalArn"] = state?.portalArn;
            resourceInputs["region"] = state?.region;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
        }
        else {
            const args = argsOrState;
            if (args?.identityProviderDetails === undefined && !opts.urn) {
                throw new Error("Missing required property 'identityProviderDetails'");
            }
            if (args?.identityProviderName === undefined && !opts.urn) {
                throw new Error("Missing required property 'identityProviderName'");
            }
            if (args?.identityProviderType === undefined && !opts.urn) {
                throw new Error("Missing required property 'identityProviderType'");
            }
            if (args?.portalArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'portalArn'");
            }
            resourceInputs["identityProviderDetails"] = args?.identityProviderDetails;
            resourceInputs["identityProviderName"] = args?.identityProviderName;
            resourceInputs["identityProviderType"] = args?.identityProviderType;
            resourceInputs["portalArn"] = args?.portalArn;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["identityProviderArn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdentityProvider.__pulumiType, name, resourceInputs, opts);
    }
}
exports.IdentityProvider = IdentityProvider;
/** @internal */
IdentityProvider.__pulumiType = 'aws:workspacesweb/identityProvider:IdentityProvider';
//# sourceMappingURL=identityProvider.js.map