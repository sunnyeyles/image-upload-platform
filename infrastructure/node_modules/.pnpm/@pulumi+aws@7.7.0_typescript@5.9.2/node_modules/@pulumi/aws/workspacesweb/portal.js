"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Portal = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS WorkSpaces Web Portal.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.workspacesweb.Portal("example", {
 *     displayName: "example-portal",
 *     instanceType: "standard.regular",
 * });
 * ```
 *
 * ### Complete Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.kms.Key("example", {
 *     description: "KMS key for WorkSpaces Web Portal",
 *     deletionWindowInDays: 7,
 * });
 * const examplePortal = new aws.workspacesweb.Portal("example", {
 *     displayName: "example-portal",
 *     instanceType: "standard.large",
 *     authenticationType: "IAM_Identity_Center",
 *     customerManagedKey: example.arn,
 *     maxConcurrentSessions: 10,
 *     additionalEncryptionContext: {
 *         Environment: "Production",
 *     },
 *     tags: {
 *         Name: "example-portal",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import WorkSpaces Web Portal using the `portal_arn`. For example:
 *
 * ```sh
 * $ pulumi import aws:workspacesweb/portal:Portal example arn:aws:workspaces-web:us-west-2:123456789012:portal/abcdef12345678
 * ```
 */
class Portal extends pulumi.CustomResource {
    /**
     * Get an existing Portal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Portal(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Portal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Portal.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["additionalEncryptionContext"] = state?.additionalEncryptionContext;
            resourceInputs["authenticationType"] = state?.authenticationType;
            resourceInputs["browserSettingsArn"] = state?.browserSettingsArn;
            resourceInputs["browserType"] = state?.browserType;
            resourceInputs["creationDate"] = state?.creationDate;
            resourceInputs["customerManagedKey"] = state?.customerManagedKey;
            resourceInputs["dataProtectionSettingsArn"] = state?.dataProtectionSettingsArn;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["instanceType"] = state?.instanceType;
            resourceInputs["ipAccessSettingsArn"] = state?.ipAccessSettingsArn;
            resourceInputs["maxConcurrentSessions"] = state?.maxConcurrentSessions;
            resourceInputs["networkSettingsArn"] = state?.networkSettingsArn;
            resourceInputs["portalArn"] = state?.portalArn;
            resourceInputs["portalEndpoint"] = state?.portalEndpoint;
            resourceInputs["portalStatus"] = state?.portalStatus;
            resourceInputs["region"] = state?.region;
            resourceInputs["rendererType"] = state?.rendererType;
            resourceInputs["sessionLoggerArn"] = state?.sessionLoggerArn;
            resourceInputs["statusReason"] = state?.statusReason;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["trustStoreArn"] = state?.trustStoreArn;
            resourceInputs["userAccessLoggingSettingsArn"] = state?.userAccessLoggingSettingsArn;
            resourceInputs["userSettingsArn"] = state?.userSettingsArn;
        }
        else {
            const args = argsOrState;
            resourceInputs["additionalEncryptionContext"] = args?.additionalEncryptionContext;
            resourceInputs["authenticationType"] = args?.authenticationType;
            resourceInputs["browserSettingsArn"] = args?.browserSettingsArn;
            resourceInputs["customerManagedKey"] = args?.customerManagedKey;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["instanceType"] = args?.instanceType;
            resourceInputs["maxConcurrentSessions"] = args?.maxConcurrentSessions;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["browserType"] = undefined /*out*/;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["dataProtectionSettingsArn"] = undefined /*out*/;
            resourceInputs["ipAccessSettingsArn"] = undefined /*out*/;
            resourceInputs["networkSettingsArn"] = undefined /*out*/;
            resourceInputs["portalArn"] = undefined /*out*/;
            resourceInputs["portalEndpoint"] = undefined /*out*/;
            resourceInputs["portalStatus"] = undefined /*out*/;
            resourceInputs["rendererType"] = undefined /*out*/;
            resourceInputs["sessionLoggerArn"] = undefined /*out*/;
            resourceInputs["statusReason"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["trustStoreArn"] = undefined /*out*/;
            resourceInputs["userAccessLoggingSettingsArn"] = undefined /*out*/;
            resourceInputs["userSettingsArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Portal.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Portal = Portal;
/** @internal */
Portal.__pulumiType = 'aws:workspacesweb/portal:Portal';
//# sourceMappingURL=portal.js.map