"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserSettingsAssociation = exports.UserSettings = exports.UserAccessLoggingSettingsAssociation = exports.UserAccessLoggingSettings = exports.TrustStoreAssociation = exports.TrustStore = exports.SessionLoggerAssociation = exports.SessionLogger = exports.Portal = exports.NetworkSettingsAssociation = exports.NetworkSettings = exports.IpAccessSettingsAssociation = exports.IpAccessSettings = exports.IdentityProvider = exports.DataProtectionSettingsAssociation = exports.DataProtectionSettings = exports.BrowserSettingsAssociation = exports.BrowserSettings = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.BrowserSettings = null;
utilities.lazyLoad(exports, ["BrowserSettings"], () => require("./browserSettings"));
exports.BrowserSettingsAssociation = null;
utilities.lazyLoad(exports, ["BrowserSettingsAssociation"], () => require("./browserSettingsAssociation"));
exports.DataProtectionSettings = null;
utilities.lazyLoad(exports, ["DataProtectionSettings"], () => require("./dataProtectionSettings"));
exports.DataProtectionSettingsAssociation = null;
utilities.lazyLoad(exports, ["DataProtectionSettingsAssociation"], () => require("./dataProtectionSettingsAssociation"));
exports.IdentityProvider = null;
utilities.lazyLoad(exports, ["IdentityProvider"], () => require("./identityProvider"));
exports.IpAccessSettings = null;
utilities.lazyLoad(exports, ["IpAccessSettings"], () => require("./ipAccessSettings"));
exports.IpAccessSettingsAssociation = null;
utilities.lazyLoad(exports, ["IpAccessSettingsAssociation"], () => require("./ipAccessSettingsAssociation"));
exports.NetworkSettings = null;
utilities.lazyLoad(exports, ["NetworkSettings"], () => require("./networkSettings"));
exports.NetworkSettingsAssociation = null;
utilities.lazyLoad(exports, ["NetworkSettingsAssociation"], () => require("./networkSettingsAssociation"));
exports.Portal = null;
utilities.lazyLoad(exports, ["Portal"], () => require("./portal"));
exports.SessionLogger = null;
utilities.lazyLoad(exports, ["SessionLogger"], () => require("./sessionLogger"));
exports.SessionLoggerAssociation = null;
utilities.lazyLoad(exports, ["SessionLoggerAssociation"], () => require("./sessionLoggerAssociation"));
exports.TrustStore = null;
utilities.lazyLoad(exports, ["TrustStore"], () => require("./trustStore"));
exports.TrustStoreAssociation = null;
utilities.lazyLoad(exports, ["TrustStoreAssociation"], () => require("./trustStoreAssociation"));
exports.UserAccessLoggingSettings = null;
utilities.lazyLoad(exports, ["UserAccessLoggingSettings"], () => require("./userAccessLoggingSettings"));
exports.UserAccessLoggingSettingsAssociation = null;
utilities.lazyLoad(exports, ["UserAccessLoggingSettingsAssociation"], () => require("./userAccessLoggingSettingsAssociation"));
exports.UserSettings = null;
utilities.lazyLoad(exports, ["UserSettings"], () => require("./userSettings"));
exports.UserSettingsAssociation = null;
utilities.lazyLoad(exports, ["UserSettingsAssociation"], () => require("./userSettingsAssociation"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:workspacesweb/browserSettings:BrowserSettings":
                return new exports.BrowserSettings(name, undefined, { urn });
            case "aws:workspacesweb/browserSettingsAssociation:BrowserSettingsAssociation":
                return new exports.BrowserSettingsAssociation(name, undefined, { urn });
            case "aws:workspacesweb/dataProtectionSettings:DataProtectionSettings":
                return new exports.DataProtectionSettings(name, undefined, { urn });
            case "aws:workspacesweb/dataProtectionSettingsAssociation:DataProtectionSettingsAssociation":
                return new exports.DataProtectionSettingsAssociation(name, undefined, { urn });
            case "aws:workspacesweb/identityProvider:IdentityProvider":
                return new exports.IdentityProvider(name, undefined, { urn });
            case "aws:workspacesweb/ipAccessSettings:IpAccessSettings":
                return new exports.IpAccessSettings(name, undefined, { urn });
            case "aws:workspacesweb/ipAccessSettingsAssociation:IpAccessSettingsAssociation":
                return new exports.IpAccessSettingsAssociation(name, undefined, { urn });
            case "aws:workspacesweb/networkSettings:NetworkSettings":
                return new exports.NetworkSettings(name, undefined, { urn });
            case "aws:workspacesweb/networkSettingsAssociation:NetworkSettingsAssociation":
                return new exports.NetworkSettingsAssociation(name, undefined, { urn });
            case "aws:workspacesweb/portal:Portal":
                return new exports.Portal(name, undefined, { urn });
            case "aws:workspacesweb/sessionLogger:SessionLogger":
                return new exports.SessionLogger(name, undefined, { urn });
            case "aws:workspacesweb/sessionLoggerAssociation:SessionLoggerAssociation":
                return new exports.SessionLoggerAssociation(name, undefined, { urn });
            case "aws:workspacesweb/trustStore:TrustStore":
                return new exports.TrustStore(name, undefined, { urn });
            case "aws:workspacesweb/trustStoreAssociation:TrustStoreAssociation":
                return new exports.TrustStoreAssociation(name, undefined, { urn });
            case "aws:workspacesweb/userAccessLoggingSettings:UserAccessLoggingSettings":
                return new exports.UserAccessLoggingSettings(name, undefined, { urn });
            case "aws:workspacesweb/userAccessLoggingSettingsAssociation:UserAccessLoggingSettingsAssociation":
                return new exports.UserAccessLoggingSettingsAssociation(name, undefined, { urn });
            case "aws:workspacesweb/userSettings:UserSettings":
                return new exports.UserSettings(name, undefined, { urn });
            case "aws:workspacesweb/userSettingsAssociation:UserSettingsAssociation":
                return new exports.UserSettingsAssociation(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "workspacesweb/browserSettings", _module);
pulumi.runtime.registerResourceModule("aws", "workspacesweb/browserSettingsAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "workspacesweb/dataProtectionSettings", _module);
pulumi.runtime.registerResourceModule("aws", "workspacesweb/dataProtectionSettingsAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "workspacesweb/identityProvider", _module);
pulumi.runtime.registerResourceModule("aws", "workspacesweb/ipAccessSettings", _module);
pulumi.runtime.registerResourceModule("aws", "workspacesweb/ipAccessSettingsAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "workspacesweb/networkSettings", _module);
pulumi.runtime.registerResourceModule("aws", "workspacesweb/networkSettingsAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "workspacesweb/portal", _module);
pulumi.runtime.registerResourceModule("aws", "workspacesweb/sessionLogger", _module);
pulumi.runtime.registerResourceModule("aws", "workspacesweb/sessionLoggerAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "workspacesweb/trustStore", _module);
pulumi.runtime.registerResourceModule("aws", "workspacesweb/trustStoreAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "workspacesweb/userAccessLoggingSettings", _module);
pulumi.runtime.registerResourceModule("aws", "workspacesweb/userAccessLoggingSettingsAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "workspacesweb/userSettings", _module);
pulumi.runtime.registerResourceModule("aws", "workspacesweb/userSettingsAssociation", _module);
//# sourceMappingURL=index.js.map