"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpcIpamScope = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates a scope for AWS IPAM.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getRegion({});
 * const example = new aws.ec2.VpcIpam("example", {operatingRegions: [{
 *     regionName: current.then(current => current.region),
 * }]});
 * const exampleVpcIpamScope = new aws.ec2.VpcIpamScope("example", {
 *     ipamId: example.id,
 *     description: "Another Scope",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import IPAMs using the `scope_id`. For example:
 *
 * ```sh
 * $ pulumi import aws:ec2/vpcIpamScope:VpcIpamScope example ipam-scope-0513c69f283d11dfb
 * ```
 */
class VpcIpamScope extends pulumi.CustomResource {
    /**
     * Get an existing VpcIpamScope resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new VpcIpamScope(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of VpcIpamScope.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcIpamScope.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["description"] = state?.description;
            resourceInputs["ipamArn"] = state?.ipamArn;
            resourceInputs["ipamId"] = state?.ipamId;
            resourceInputs["ipamScopeType"] = state?.ipamScopeType;
            resourceInputs["isDefault"] = state?.isDefault;
            resourceInputs["poolCount"] = state?.poolCount;
            resourceInputs["region"] = state?.region;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
        }
        else {
            const args = argsOrState;
            if (args?.ipamId === undefined && !opts.urn) {
                throw new Error("Missing required property 'ipamId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["ipamId"] = args?.ipamId;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["ipamArn"] = undefined /*out*/;
            resourceInputs["ipamScopeType"] = undefined /*out*/;
            resourceInputs["isDefault"] = undefined /*out*/;
            resourceInputs["poolCount"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcIpamScope.__pulumiType, name, resourceInputs, opts);
    }
}
exports.VpcIpamScope = VpcIpamScope;
/** @internal */
VpcIpamScope.__pulumiType = 'aws:ec2/vpcIpamScope:VpcIpamScope';
//# sourceMappingURL=vpcIpamScope.js.map