"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LaunchTemplate = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an EC2 launch template resource. Can be used to create instances or auto scaling groups.
 *
 * ## Import
 *
 * Using `pulumi import`, import Launch Templates using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:ec2/launchTemplate:LaunchTemplate web lt-12345678
 * ```
 */
class LaunchTemplate extends pulumi.CustomResource {
    /**
     * Get an existing LaunchTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LaunchTemplate(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of LaunchTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LaunchTemplate.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["blockDeviceMappings"] = state?.blockDeviceMappings;
            resourceInputs["capacityReservationSpecification"] = state?.capacityReservationSpecification;
            resourceInputs["cpuOptions"] = state?.cpuOptions;
            resourceInputs["creditSpecification"] = state?.creditSpecification;
            resourceInputs["defaultVersion"] = state?.defaultVersion;
            resourceInputs["description"] = state?.description;
            resourceInputs["disableApiStop"] = state?.disableApiStop;
            resourceInputs["disableApiTermination"] = state?.disableApiTermination;
            resourceInputs["ebsOptimized"] = state?.ebsOptimized;
            resourceInputs["enclaveOptions"] = state?.enclaveOptions;
            resourceInputs["hibernationOptions"] = state?.hibernationOptions;
            resourceInputs["iamInstanceProfile"] = state?.iamInstanceProfile;
            resourceInputs["imageId"] = state?.imageId;
            resourceInputs["instanceInitiatedShutdownBehavior"] = state?.instanceInitiatedShutdownBehavior;
            resourceInputs["instanceMarketOptions"] = state?.instanceMarketOptions;
            resourceInputs["instanceRequirements"] = state?.instanceRequirements;
            resourceInputs["instanceType"] = state?.instanceType;
            resourceInputs["kernelId"] = state?.kernelId;
            resourceInputs["keyName"] = state?.keyName;
            resourceInputs["latestVersion"] = state?.latestVersion;
            resourceInputs["licenseSpecifications"] = state?.licenseSpecifications;
            resourceInputs["maintenanceOptions"] = state?.maintenanceOptions;
            resourceInputs["metadataOptions"] = state?.metadataOptions;
            resourceInputs["monitoring"] = state?.monitoring;
            resourceInputs["name"] = state?.name;
            resourceInputs["namePrefix"] = state?.namePrefix;
            resourceInputs["networkInterfaces"] = state?.networkInterfaces;
            resourceInputs["placement"] = state?.placement;
            resourceInputs["privateDnsNameOptions"] = state?.privateDnsNameOptions;
            resourceInputs["ramDiskId"] = state?.ramDiskId;
            resourceInputs["region"] = state?.region;
            resourceInputs["securityGroupNames"] = state?.securityGroupNames;
            resourceInputs["tagSpecifications"] = state?.tagSpecifications;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["updateDefaultVersion"] = state?.updateDefaultVersion;
            resourceInputs["userData"] = state?.userData;
            resourceInputs["vpcSecurityGroupIds"] = state?.vpcSecurityGroupIds;
        }
        else {
            const args = argsOrState;
            resourceInputs["blockDeviceMappings"] = args?.blockDeviceMappings;
            resourceInputs["capacityReservationSpecification"] = args?.capacityReservationSpecification;
            resourceInputs["cpuOptions"] = args?.cpuOptions;
            resourceInputs["creditSpecification"] = args?.creditSpecification;
            resourceInputs["defaultVersion"] = args?.defaultVersion;
            resourceInputs["description"] = args?.description;
            resourceInputs["disableApiStop"] = args?.disableApiStop;
            resourceInputs["disableApiTermination"] = args?.disableApiTermination;
            resourceInputs["ebsOptimized"] = args?.ebsOptimized;
            resourceInputs["enclaveOptions"] = args?.enclaveOptions;
            resourceInputs["hibernationOptions"] = args?.hibernationOptions;
            resourceInputs["iamInstanceProfile"] = args?.iamInstanceProfile;
            resourceInputs["imageId"] = args?.imageId;
            resourceInputs["instanceInitiatedShutdownBehavior"] = args?.instanceInitiatedShutdownBehavior;
            resourceInputs["instanceMarketOptions"] = args?.instanceMarketOptions;
            resourceInputs["instanceRequirements"] = args?.instanceRequirements;
            resourceInputs["instanceType"] = args?.instanceType;
            resourceInputs["kernelId"] = args?.kernelId;
            resourceInputs["keyName"] = args?.keyName;
            resourceInputs["licenseSpecifications"] = args?.licenseSpecifications;
            resourceInputs["maintenanceOptions"] = args?.maintenanceOptions;
            resourceInputs["metadataOptions"] = args?.metadataOptions;
            resourceInputs["monitoring"] = args?.monitoring;
            resourceInputs["name"] = args?.name;
            resourceInputs["namePrefix"] = args?.namePrefix;
            resourceInputs["networkInterfaces"] = args?.networkInterfaces;
            resourceInputs["placement"] = args?.placement;
            resourceInputs["privateDnsNameOptions"] = args?.privateDnsNameOptions;
            resourceInputs["ramDiskId"] = args?.ramDiskId;
            resourceInputs["region"] = args?.region;
            resourceInputs["securityGroupNames"] = args?.securityGroupNames;
            resourceInputs["tagSpecifications"] = args?.tagSpecifications;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["updateDefaultVersion"] = args?.updateDefaultVersion;
            resourceInputs["userData"] = args?.userData;
            resourceInputs["vpcSecurityGroupIds"] = args?.vpcSecurityGroupIds;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["latestVersion"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LaunchTemplate.__pulumiType, name, resourceInputs, opts);
    }
}
exports.LaunchTemplate = LaunchTemplate;
/** @internal */
LaunchTemplate.__pulumiType = 'aws:ec2/launchTemplate:LaunchTemplate';
//# sourceMappingURL=launchTemplate.js.map