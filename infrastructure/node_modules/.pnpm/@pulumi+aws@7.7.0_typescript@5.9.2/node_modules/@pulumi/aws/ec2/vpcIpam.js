"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpcIpam = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an IPAM resource.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getRegion({});
 * const main = new aws.ec2.VpcIpam("main", {
 *     description: "My IPAM",
 *     operatingRegions: [{
 *         regionName: current.then(current => current.region),
 *     }],
 *     tags: {
 *         Test: "Main",
 *     },
 * });
 * ```
 *
 * Shared with multiple operating_regions:
 *
 * ## Import
 *
 * Using `pulumi import`, import IPAMs using the IPAM `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:ec2/vpcIpam:VpcIpam example ipam-0178368ad2146a492
 * ```
 */
class VpcIpam extends pulumi.CustomResource {
    /**
     * Get an existing VpcIpam resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new VpcIpam(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of VpcIpam.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcIpam.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["cascade"] = state?.cascade;
            resourceInputs["defaultResourceDiscoveryAssociationId"] = state?.defaultResourceDiscoveryAssociationId;
            resourceInputs["defaultResourceDiscoveryId"] = state?.defaultResourceDiscoveryId;
            resourceInputs["description"] = state?.description;
            resourceInputs["enablePrivateGua"] = state?.enablePrivateGua;
            resourceInputs["meteredAccount"] = state?.meteredAccount;
            resourceInputs["operatingRegions"] = state?.operatingRegions;
            resourceInputs["privateDefaultScopeId"] = state?.privateDefaultScopeId;
            resourceInputs["publicDefaultScopeId"] = state?.publicDefaultScopeId;
            resourceInputs["region"] = state?.region;
            resourceInputs["scopeCount"] = state?.scopeCount;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["tier"] = state?.tier;
        }
        else {
            const args = argsOrState;
            if (args?.operatingRegions === undefined && !opts.urn) {
                throw new Error("Missing required property 'operatingRegions'");
            }
            resourceInputs["cascade"] = args?.cascade;
            resourceInputs["description"] = args?.description;
            resourceInputs["enablePrivateGua"] = args?.enablePrivateGua;
            resourceInputs["meteredAccount"] = args?.meteredAccount;
            resourceInputs["operatingRegions"] = args?.operatingRegions;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["tier"] = args?.tier;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["defaultResourceDiscoveryAssociationId"] = undefined /*out*/;
            resourceInputs["defaultResourceDiscoveryId"] = undefined /*out*/;
            resourceInputs["privateDefaultScopeId"] = undefined /*out*/;
            resourceInputs["publicDefaultScopeId"] = undefined /*out*/;
            resourceInputs["scopeCount"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcIpam.__pulumiType, name, resourceInputs, opts);
    }
}
exports.VpcIpam = VpcIpam;
/** @internal */
VpcIpam.__pulumiType = 'aws:ec2/vpcIpam:VpcIpam';
//# sourceMappingURL=vpcIpam.js.map