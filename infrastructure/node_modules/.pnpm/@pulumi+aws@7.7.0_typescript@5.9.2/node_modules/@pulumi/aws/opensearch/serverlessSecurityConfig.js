"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerlessSecurityConfig = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS OpenSearch Serverless Security Config.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Using `pulumi import`, import OpenSearchServerless Access Policy using the `name` argument prefixed with the string `saml/account_id/`. For example:
 *
 * ```sh
 * $ pulumi import aws:opensearch/serverlessSecurityConfig:ServerlessSecurityConfig example saml/123456789012/example
 * ```
 */
class ServerlessSecurityConfig extends pulumi.CustomResource {
    /**
     * Get an existing ServerlessSecurityConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ServerlessSecurityConfig(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of ServerlessSecurityConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerlessSecurityConfig.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["configVersion"] = state?.configVersion;
            resourceInputs["description"] = state?.description;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["samlOptions"] = state?.samlOptions;
            resourceInputs["type"] = state?.type;
        }
        else {
            const args = argsOrState;
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["samlOptions"] = args?.samlOptions;
            resourceInputs["type"] = args?.type;
            resourceInputs["configVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerlessSecurityConfig.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ServerlessSecurityConfig = ServerlessSecurityConfig;
/** @internal */
ServerlessSecurityConfig.__pulumiType = 'aws:opensearch/serverlessSecurityConfig:ServerlessSecurityConfig';
//# sourceMappingURL=serverlessSecurityConfig.js.map