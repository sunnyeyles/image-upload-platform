"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Input = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS MediaLive Input.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.medialive.InputSecurityGroup("example", {
 *     whitelistRules: [{
 *         cidr: "10.0.0.8/32",
 *     }],
 *     tags: {
 *         ENVIRONMENT: "prod",
 *     },
 * });
 * const exampleInput = new aws.medialive.Input("example", {
 *     name: "example-input",
 *     inputSecurityGroups: [example.id],
 *     type: "UDP_PUSH",
 *     tags: {
 *         ENVIRONMENT: "prod",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import MediaLive Input using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:medialive/input:Input example 12345678
 * ```
 */
class Input extends pulumi.CustomResource {
    /**
     * Get an existing Input resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Input(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Input.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Input.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["attachedChannels"] = state?.attachedChannels;
            resourceInputs["destinations"] = state?.destinations;
            resourceInputs["inputClass"] = state?.inputClass;
            resourceInputs["inputDevices"] = state?.inputDevices;
            resourceInputs["inputPartnerIds"] = state?.inputPartnerIds;
            resourceInputs["inputSecurityGroups"] = state?.inputSecurityGroups;
            resourceInputs["inputSourceType"] = state?.inputSourceType;
            resourceInputs["mediaConnectFlows"] = state?.mediaConnectFlows;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["roleArn"] = state?.roleArn;
            resourceInputs["sources"] = state?.sources;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["type"] = state?.type;
            resourceInputs["vpc"] = state?.vpc;
        }
        else {
            const args = argsOrState;
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["destinations"] = args?.destinations;
            resourceInputs["inputDevices"] = args?.inputDevices;
            resourceInputs["inputSecurityGroups"] = args?.inputSecurityGroups;
            resourceInputs["mediaConnectFlows"] = args?.mediaConnectFlows;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["roleArn"] = args?.roleArn;
            resourceInputs["sources"] = args?.sources;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["type"] = args?.type;
            resourceInputs["vpc"] = args?.vpc;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["attachedChannels"] = undefined /*out*/;
            resourceInputs["inputClass"] = undefined /*out*/;
            resourceInputs["inputPartnerIds"] = undefined /*out*/;
            resourceInputs["inputSourceType"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Input.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Input = Input;
/** @internal */
Input.__pulumiType = 'aws:medialive/input:Input';
//# sourceMappingURL=input.js.map