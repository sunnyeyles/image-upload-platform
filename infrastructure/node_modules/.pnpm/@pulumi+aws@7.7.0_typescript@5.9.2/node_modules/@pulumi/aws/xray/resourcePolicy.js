"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourcePolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS X-Ray Resource Policy.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.xray.ResourcePolicy("test", {
 *     policyName: "test",
 *     policyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"AllowXRayAccess\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"xray:*\",\"xray:PutResourcePolicy\"],\"Resource\":\"*\"}]}",
 *     bypassPolicyLockoutCheck: true,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import X-Ray Resource Policy using the `policy_name`. For example:
 *
 * ```sh
 * $ pulumi import aws:xray/resourcePolicy:ResourcePolicy example resource_policy-name
 * ```
 */
class ResourcePolicy extends pulumi.CustomResource {
    /**
     * Get an existing ResourcePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ResourcePolicy(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of ResourcePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourcePolicy.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["bypassPolicyLockoutCheck"] = state?.bypassPolicyLockoutCheck;
            resourceInputs["lastUpdatedTime"] = state?.lastUpdatedTime;
            resourceInputs["policyDocument"] = state?.policyDocument;
            resourceInputs["policyName"] = state?.policyName;
            resourceInputs["policyRevisionId"] = state?.policyRevisionId;
            resourceInputs["region"] = state?.region;
        }
        else {
            const args = argsOrState;
            if (args?.policyDocument === undefined && !opts.urn) {
                throw new Error("Missing required property 'policyDocument'");
            }
            if (args?.policyName === undefined && !opts.urn) {
                throw new Error("Missing required property 'policyName'");
            }
            resourceInputs["bypassPolicyLockoutCheck"] = args?.bypassPolicyLockoutCheck;
            resourceInputs["policyDocument"] = args?.policyDocument;
            resourceInputs["policyName"] = args?.policyName;
            resourceInputs["policyRevisionId"] = args?.policyRevisionId;
            resourceInputs["region"] = args?.region;
            resourceInputs["lastUpdatedTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourcePolicy.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ResourcePolicy = ResourcePolicy;
/** @internal */
ResourcePolicy.__pulumiType = 'aws:xray/resourcePolicy:ResourcePolicy';
//# sourceMappingURL=resourcePolicy.js.map