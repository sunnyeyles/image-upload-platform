"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentationPart = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a settings of an API Gateway Documentation Part.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleRestApi = new aws.apigateway.RestApi("example", {name: "example_api"});
 * const example = new aws.apigateway.DocumentationPart("example", {
 *     location: {
 *         type: "METHOD",
 *         method: "GET",
 *         path: "/example",
 *     },
 *     properties: "{\"description\":\"Example description\"}",
 *     restApiId: exampleRestApi.id,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import API Gateway documentation_parts using `REST-API-ID/DOC-PART-ID`. For example:
 *
 * ```sh
 * $ pulumi import aws:apigateway/documentationPart:DocumentationPart example 5i4e1ko720/3oyy3t
 * ```
 */
class DocumentationPart extends pulumi.CustomResource {
    /**
     * Get an existing DocumentationPart resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DocumentationPart(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of DocumentationPart.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DocumentationPart.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["documentationPartId"] = state?.documentationPartId;
            resourceInputs["location"] = state?.location;
            resourceInputs["properties"] = state?.properties;
            resourceInputs["region"] = state?.region;
            resourceInputs["restApiId"] = state?.restApiId;
        }
        else {
            const args = argsOrState;
            if (args?.location === undefined && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if (args?.properties === undefined && !opts.urn) {
                throw new Error("Missing required property 'properties'");
            }
            if (args?.restApiId === undefined && !opts.urn) {
                throw new Error("Missing required property 'restApiId'");
            }
            resourceInputs["location"] = args?.location;
            resourceInputs["properties"] = args?.properties;
            resourceInputs["region"] = args?.region;
            resourceInputs["restApiId"] = args?.restApiId;
            resourceInputs["documentationPartId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DocumentationPart.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DocumentationPart = DocumentationPart;
/** @internal */
DocumentationPart.__pulumiType = 'aws:apigateway/documentationPart:DocumentationPart';
//# sourceMappingURL=documentationPart.js.map