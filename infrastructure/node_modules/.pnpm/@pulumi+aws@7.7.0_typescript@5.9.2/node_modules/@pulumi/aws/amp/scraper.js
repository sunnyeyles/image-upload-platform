"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scraper = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Import
 *
 * Using `pulumi import`, import the Managed Scraper using its identifier.
 * For example:
 *
 * ```sh
 * $ pulumi import aws:amp/scraper:Scraper example s-0123abc-0000-0123-a000-000000000000
 * ```
 */
class Scraper extends pulumi.CustomResource {
    /**
     * Get an existing Scraper resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Scraper(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Scraper.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Scraper.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["alias"] = state?.alias;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["destination"] = state?.destination;
            resourceInputs["region"] = state?.region;
            resourceInputs["roleArn"] = state?.roleArn;
            resourceInputs["roleConfiguration"] = state?.roleConfiguration;
            resourceInputs["scrapeConfiguration"] = state?.scrapeConfiguration;
            resourceInputs["source"] = state?.source;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["timeouts"] = state?.timeouts;
        }
        else {
            const args = argsOrState;
            if (args?.scrapeConfiguration === undefined && !opts.urn) {
                throw new Error("Missing required property 'scrapeConfiguration'");
            }
            resourceInputs["alias"] = args?.alias;
            resourceInputs["destination"] = args?.destination;
            resourceInputs["region"] = args?.region;
            resourceInputs["roleConfiguration"] = args?.roleConfiguration;
            resourceInputs["scrapeConfiguration"] = args?.scrapeConfiguration;
            resourceInputs["source"] = args?.source;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["roleArn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Scraper.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Scraper = Scraper;
/** @internal */
Scraper.__pulumiType = 'aws:amp/scraper:Scraper';
//# sourceMappingURL=scraper.js.map