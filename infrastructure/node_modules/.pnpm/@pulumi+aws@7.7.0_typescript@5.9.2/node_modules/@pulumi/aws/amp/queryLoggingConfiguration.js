"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryLoggingConfiguration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Amazon Managed Service for Prometheus (AMP) Query Logging Configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.amp.Workspace("example", {alias: "example"});
 * const exampleLogGroup = new aws.cloudwatch.LogGroup("example", {name: "/aws/prometheus/query-logs/example"});
 * const exampleQueryLoggingConfiguration = new aws.amp.QueryLoggingConfiguration("example", {
 *     workspaceId: example.id,
 *     destinations: [{
 *         cloudwatchLogs: {
 *             logGroupArn: pulumi.interpolate`${exampleLogGroup.arn}:*`,
 *         },
 *         filters: {
 *             qspThreshold: 1000,
 *         },
 *     }],
 * });
 * ```
 */
class QueryLoggingConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing QueryLoggingConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new QueryLoggingConfiguration(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of QueryLoggingConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QueryLoggingConfiguration.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["destinations"] = state?.destinations;
            resourceInputs["region"] = state?.region;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["workspaceId"] = state?.workspaceId;
        }
        else {
            const args = argsOrState;
            if (args?.workspaceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["destinations"] = args?.destinations;
            resourceInputs["region"] = args?.region;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["workspaceId"] = args?.workspaceId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(QueryLoggingConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}
exports.QueryLoggingConfiguration = QueryLoggingConfiguration;
/** @internal */
QueryLoggingConfiguration.__pulumiType = 'aws:amp/queryLoggingConfiguration:QueryLoggingConfiguration';
//# sourceMappingURL=queryLoggingConfiguration.js.map