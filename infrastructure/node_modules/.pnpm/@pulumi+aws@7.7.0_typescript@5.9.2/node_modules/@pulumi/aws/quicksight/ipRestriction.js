"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.IpRestriction = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages the content and status of IP rules.
 *
 * > Deletion of this resource clears all IP restrictions from a QuickSight account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.quicksight.IpRestriction("example", {
 *     enabled: true,
 *     ipRestrictionRuleMap: {
 *         "108.56.166.202/32": "Allow self",
 *     },
 *     vpcIdRestrictionRuleMap: {
 *         [exampleAwsVpc.id]: "Main VPC",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import QuickSight IP restriction using the AWS account ID. For example:
 *
 * ```sh
 * $ pulumi import aws:quicksight/ipRestriction:IpRestriction example "012345678901"
 * ```
 */
class IpRestriction extends pulumi.CustomResource {
    /**
     * Get an existing IpRestriction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new IpRestriction(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of IpRestriction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpRestriction.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["awsAccountId"] = state?.awsAccountId;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["ipRestrictionRuleMap"] = state?.ipRestrictionRuleMap;
            resourceInputs["region"] = state?.region;
            resourceInputs["vpcEndpointIdRestrictionRuleMap"] = state?.vpcEndpointIdRestrictionRuleMap;
            resourceInputs["vpcIdRestrictionRuleMap"] = state?.vpcIdRestrictionRuleMap;
        }
        else {
            const args = argsOrState;
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            resourceInputs["awsAccountId"] = args?.awsAccountId;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["ipRestrictionRuleMap"] = args?.ipRestrictionRuleMap;
            resourceInputs["region"] = args?.region;
            resourceInputs["vpcEndpointIdRestrictionRuleMap"] = args?.vpcEndpointIdRestrictionRuleMap;
            resourceInputs["vpcIdRestrictionRuleMap"] = args?.vpcIdRestrictionRuleMap;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpRestriction.__pulumiType, name, resourceInputs, opts);
    }
}
exports.IpRestriction = IpRestriction;
/** @internal */
IpRestriction.__pulumiType = 'aws:quicksight/ipRestriction:IpRestriction';
//# sourceMappingURL=ipRestriction.js.map