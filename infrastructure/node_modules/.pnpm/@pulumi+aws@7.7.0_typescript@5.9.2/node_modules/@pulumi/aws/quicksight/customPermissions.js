"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomPermissions = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a QuickSight custom permissions profile.
 *
 * ## Example Usage
 *
 * resource "aws.quicksight.CustomPermissions" "example" {
 *   customPermissionsName = "example-permissions"
 *
 *   capabilities {
 *     printReports    = "DENY"
 *     shareDashboards = "DENY"
 *   }
 * }
 *
 * ## Import
 *
 * Using `pulumi import`, import a QuickSight custom permissions profile using the AWS account ID and custom permissions profile name separated by a comma (`,`). For example:
 *
 * ```sh
 * $ pulumi import aws:quicksight/customPermissions:CustomPermissions example 123456789012,example-permissions
 * ```
 */
class CustomPermissions extends pulumi.CustomResource {
    /**
     * Get an existing CustomPermissions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CustomPermissions(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of CustomPermissions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomPermissions.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["awsAccountId"] = state?.awsAccountId;
            resourceInputs["capabilities"] = state?.capabilities;
            resourceInputs["customPermissionsName"] = state?.customPermissionsName;
            resourceInputs["region"] = state?.region;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
        }
        else {
            const args = argsOrState;
            if (args?.customPermissionsName === undefined && !opts.urn) {
                throw new Error("Missing required property 'customPermissionsName'");
            }
            resourceInputs["awsAccountId"] = args?.awsAccountId;
            resourceInputs["capabilities"] = args?.capabilities;
            resourceInputs["customPermissionsName"] = args?.customPermissionsName;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomPermissions.__pulumiType, name, resourceInputs, opts);
    }
}
exports.CustomPermissions = CustomPermissions;
/** @internal */
CustomPermissions.__pulumiType = 'aws:quicksight/customPermissions:CustomPermissions';
//# sourceMappingURL=customPermissions.js.map