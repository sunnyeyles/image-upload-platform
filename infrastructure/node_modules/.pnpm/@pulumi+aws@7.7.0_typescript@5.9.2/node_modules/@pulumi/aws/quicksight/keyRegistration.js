"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyRegistration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Registers customer managed keys in a Amazon QuickSight account.
 *
 * > Deletion of this resource clears all CMK registrations from a QuickSight account. QuickSight then uses AWS owned keys to encrypt your resources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.quicksight.KeyRegistration("example", {keyRegistrations: [
 *     {
 *         keyArn: example1.arn,
 *     },
 *     {
 *         keyArn: example2.arn,
 *         defaultKey: true,
 *     },
 * ]});
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import QuickSight key registration using the AWS account ID. For example:
 *
 * ```sh
 * $ pulumi import aws:quicksight/keyRegistration:KeyRegistration example "012345678901"
 * ```
 */
class KeyRegistration extends pulumi.CustomResource {
    /**
     * Get an existing KeyRegistration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new KeyRegistration(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of KeyRegistration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeyRegistration.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["awsAccountId"] = state?.awsAccountId;
            resourceInputs["keyRegistrations"] = state?.keyRegistrations;
            resourceInputs["region"] = state?.region;
        }
        else {
            const args = argsOrState;
            resourceInputs["awsAccountId"] = args?.awsAccountId;
            resourceInputs["keyRegistrations"] = args?.keyRegistrations;
            resourceInputs["region"] = args?.region;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeyRegistration.__pulumiType, name, resourceInputs, opts);
    }
}
exports.KeyRegistration = KeyRegistration;
/** @internal */
KeyRegistration.__pulumiType = 'aws:quicksight/keyRegistration:KeyRegistration';
//# sourceMappingURL=keyRegistration.js.map