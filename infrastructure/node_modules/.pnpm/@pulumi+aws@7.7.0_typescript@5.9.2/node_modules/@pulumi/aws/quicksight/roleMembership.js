"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleMembership = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS QuickSight Role Membership.
 *
 * > The role membership APIs are disabled for identities managed by QuickSight. This resource can only be used when the QuickSight account subscription uses the Active Directory or IAM Identity Center authentication method.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.quicksight.RoleMembership("example", {
 *     memberName: "example-group",
 *     role: "READER",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import QuickSight Role Membership using a comma-delimited string combining the `aws_account_id`, `namespace`, `role`, and `member_name`. For example:
 *
 * ```sh
 * $ pulumi import aws:quicksight/roleMembership:RoleMembership example 012345678901,default,READER,example-group
 * ```
 */
class RoleMembership extends pulumi.CustomResource {
    /**
     * Get an existing RoleMembership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RoleMembership(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of RoleMembership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoleMembership.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["awsAccountId"] = state?.awsAccountId;
            resourceInputs["memberName"] = state?.memberName;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["region"] = state?.region;
            resourceInputs["role"] = state?.role;
        }
        else {
            const args = argsOrState;
            if (args?.memberName === undefined && !opts.urn) {
                throw new Error("Missing required property 'memberName'");
            }
            if (args?.role === undefined && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            resourceInputs["awsAccountId"] = args?.awsAccountId;
            resourceInputs["memberName"] = args?.memberName;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["region"] = args?.region;
            resourceInputs["role"] = args?.role;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RoleMembership.__pulumiType, name, resourceInputs, opts);
    }
}
exports.RoleMembership = RoleMembership;
/** @internal */
RoleMembership.__pulumiType = 'aws:quicksight/roleMembership:RoleMembership';
//# sourceMappingURL=roleMembership.js.map