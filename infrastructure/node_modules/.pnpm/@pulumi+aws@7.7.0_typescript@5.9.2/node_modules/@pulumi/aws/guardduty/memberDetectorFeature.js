"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberDetectorFeature = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a resource to manage a single Amazon GuardDuty [detector feature](https://docs.aws.amazon.com/guardduty/latest/ug/guardduty-features-activation-model.html#guardduty-features) for a member account.
 *
 * > **NOTE:** Deleting this resource does not disable the detector feature in the member account, the resource in simply removed from state instead.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.guardduty.Detector("example", {enable: true});
 * const runtimeMonitoring = new aws.guardduty.MemberDetectorFeature("runtime_monitoring", {
 *     detectorId: example.id,
 *     accountId: "123456789012",
 *     name: "S3_DATA_EVENTS",
 *     status: "ENABLED",
 * });
 * ```
 */
class MemberDetectorFeature extends pulumi.CustomResource {
    /**
     * Get an existing MemberDetectorFeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new MemberDetectorFeature(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of MemberDetectorFeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MemberDetectorFeature.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["additionalConfigurations"] = state?.additionalConfigurations;
            resourceInputs["detectorId"] = state?.detectorId;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["status"] = state?.status;
        }
        else {
            const args = argsOrState;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.detectorId === undefined && !opts.urn) {
                throw new Error("Missing required property 'detectorId'");
            }
            if (args?.status === undefined && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["additionalConfigurations"] = args?.additionalConfigurations;
            resourceInputs["detectorId"] = args?.detectorId;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["status"] = args?.status;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MemberDetectorFeature.__pulumiType, name, resourceInputs, opts);
    }
}
exports.MemberDetectorFeature = MemberDetectorFeature;
/** @internal */
MemberDetectorFeature.__pulumiType = 'aws:guardduty/memberDetectorFeature:MemberDetectorFeature';
//# sourceMappingURL=memberDetectorFeature.js.map