"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenZfsFileSystem = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Amazon FSx for OpenZFS file system.
 * See the [FSx OpenZFS User Guide](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/what-is-fsx.html) for more information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.fsx.OpenZfsFileSystem("test", {
 *     storageCapacity: 64,
 *     subnetIds: [test1.id],
 *     deploymentType: "SINGLE_AZ_1",
 *     throughputCapacity: 64,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import FSx File Systems using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:fsx/openZfsFileSystem:OpenZfsFileSystem example fs-543ab12b1ca672f33
 * ```
 * Certain resource arguments, like `security_group_ids`, do not have a FSx API method for reading the information after creation. If the argument is set in the Pulumi program on an imported resource, Pulumi will always show a difference. To workaround this behavior, either omit the argument from the Pulumi program or use `ignore_changes` to hide the difference. For example:
 */
class OpenZfsFileSystem extends pulumi.CustomResource {
    /**
     * Get an existing OpenZfsFileSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new OpenZfsFileSystem(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of OpenZfsFileSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OpenZfsFileSystem.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["automaticBackupRetentionDays"] = state?.automaticBackupRetentionDays;
            resourceInputs["backupId"] = state?.backupId;
            resourceInputs["copyTagsToBackups"] = state?.copyTagsToBackups;
            resourceInputs["copyTagsToVolumes"] = state?.copyTagsToVolumes;
            resourceInputs["dailyAutomaticBackupStartTime"] = state?.dailyAutomaticBackupStartTime;
            resourceInputs["deleteOptions"] = state?.deleteOptions;
            resourceInputs["deploymentType"] = state?.deploymentType;
            resourceInputs["diskIopsConfiguration"] = state?.diskIopsConfiguration;
            resourceInputs["dnsName"] = state?.dnsName;
            resourceInputs["endpointIpAddress"] = state?.endpointIpAddress;
            resourceInputs["endpointIpAddressRange"] = state?.endpointIpAddressRange;
            resourceInputs["finalBackupTags"] = state?.finalBackupTags;
            resourceInputs["kmsKeyId"] = state?.kmsKeyId;
            resourceInputs["networkInterfaceIds"] = state?.networkInterfaceIds;
            resourceInputs["ownerId"] = state?.ownerId;
            resourceInputs["preferredSubnetId"] = state?.preferredSubnetId;
            resourceInputs["region"] = state?.region;
            resourceInputs["rootVolumeConfiguration"] = state?.rootVolumeConfiguration;
            resourceInputs["rootVolumeId"] = state?.rootVolumeId;
            resourceInputs["routeTableIds"] = state?.routeTableIds;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["skipFinalBackup"] = state?.skipFinalBackup;
            resourceInputs["storageCapacity"] = state?.storageCapacity;
            resourceInputs["storageType"] = state?.storageType;
            resourceInputs["subnetIds"] = state?.subnetIds;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["throughputCapacity"] = state?.throughputCapacity;
            resourceInputs["vpcId"] = state?.vpcId;
            resourceInputs["weeklyMaintenanceStartTime"] = state?.weeklyMaintenanceStartTime;
        }
        else {
            const args = argsOrState;
            if (args?.deploymentType === undefined && !opts.urn) {
                throw new Error("Missing required property 'deploymentType'");
            }
            if (args?.subnetIds === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            if (args?.throughputCapacity === undefined && !opts.urn) {
                throw new Error("Missing required property 'throughputCapacity'");
            }
            resourceInputs["automaticBackupRetentionDays"] = args?.automaticBackupRetentionDays;
            resourceInputs["backupId"] = args?.backupId;
            resourceInputs["copyTagsToBackups"] = args?.copyTagsToBackups;
            resourceInputs["copyTagsToVolumes"] = args?.copyTagsToVolumes;
            resourceInputs["dailyAutomaticBackupStartTime"] = args?.dailyAutomaticBackupStartTime;
            resourceInputs["deleteOptions"] = args?.deleteOptions;
            resourceInputs["deploymentType"] = args?.deploymentType;
            resourceInputs["diskIopsConfiguration"] = args?.diskIopsConfiguration;
            resourceInputs["endpointIpAddressRange"] = args?.endpointIpAddressRange;
            resourceInputs["finalBackupTags"] = args?.finalBackupTags;
            resourceInputs["kmsKeyId"] = args?.kmsKeyId;
            resourceInputs["preferredSubnetId"] = args?.preferredSubnetId;
            resourceInputs["region"] = args?.region;
            resourceInputs["rootVolumeConfiguration"] = args?.rootVolumeConfiguration;
            resourceInputs["routeTableIds"] = args?.routeTableIds;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["skipFinalBackup"] = args?.skipFinalBackup;
            resourceInputs["storageCapacity"] = args?.storageCapacity;
            resourceInputs["storageType"] = args?.storageType;
            resourceInputs["subnetIds"] = args?.subnetIds;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["throughputCapacity"] = args?.throughputCapacity;
            resourceInputs["weeklyMaintenanceStartTime"] = args?.weeklyMaintenanceStartTime;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["dnsName"] = undefined /*out*/;
            resourceInputs["endpointIpAddress"] = undefined /*out*/;
            resourceInputs["networkInterfaceIds"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["rootVolumeId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OpenZfsFileSystem.__pulumiType, name, resourceInputs, opts);
    }
}
exports.OpenZfsFileSystem = OpenZfsFileSystem;
/** @internal */
OpenZfsFileSystem.__pulumiType = 'aws:fsx/openZfsFileSystem:OpenZfsFileSystem';
//# sourceMappingURL=openZfsFileSystem.js.map