"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenZfsVolume = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Amazon FSx for OpenZFS volume.
 * See the [FSx OpenZFS User Guide](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/what-is-fsx.html) for more information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.fsx.OpenZfsVolume("test", {
 *     name: "testvolume",
 *     parentVolumeId: testAwsFsxOpenzfsFileSystem.rootVolumeId,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import FSx Volumes using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:fsx/openZfsVolume:OpenZfsVolume example fsvol-543ab12b1ca672f33
 * ```
 */
class OpenZfsVolume extends pulumi.CustomResource {
    /**
     * Get an existing OpenZfsVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new OpenZfsVolume(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of OpenZfsVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OpenZfsVolume.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["copyTagsToSnapshots"] = state?.copyTagsToSnapshots;
            resourceInputs["dataCompressionType"] = state?.dataCompressionType;
            resourceInputs["deleteVolumeOptions"] = state?.deleteVolumeOptions;
            resourceInputs["name"] = state?.name;
            resourceInputs["nfsExports"] = state?.nfsExports;
            resourceInputs["originSnapshot"] = state?.originSnapshot;
            resourceInputs["parentVolumeId"] = state?.parentVolumeId;
            resourceInputs["readOnly"] = state?.readOnly;
            resourceInputs["recordSizeKib"] = state?.recordSizeKib;
            resourceInputs["region"] = state?.region;
            resourceInputs["storageCapacityQuotaGib"] = state?.storageCapacityQuotaGib;
            resourceInputs["storageCapacityReservationGib"] = state?.storageCapacityReservationGib;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["userAndGroupQuotas"] = state?.userAndGroupQuotas;
            resourceInputs["volumeType"] = state?.volumeType;
        }
        else {
            const args = argsOrState;
            if (args?.parentVolumeId === undefined && !opts.urn) {
                throw new Error("Missing required property 'parentVolumeId'");
            }
            resourceInputs["copyTagsToSnapshots"] = args?.copyTagsToSnapshots;
            resourceInputs["dataCompressionType"] = args?.dataCompressionType;
            resourceInputs["deleteVolumeOptions"] = args?.deleteVolumeOptions;
            resourceInputs["name"] = args?.name;
            resourceInputs["nfsExports"] = args?.nfsExports;
            resourceInputs["originSnapshot"] = args?.originSnapshot;
            resourceInputs["parentVolumeId"] = args?.parentVolumeId;
            resourceInputs["readOnly"] = args?.readOnly;
            resourceInputs["recordSizeKib"] = args?.recordSizeKib;
            resourceInputs["region"] = args?.region;
            resourceInputs["storageCapacityQuotaGib"] = args?.storageCapacityQuotaGib;
            resourceInputs["storageCapacityReservationGib"] = args?.storageCapacityReservationGib;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["userAndGroupQuotas"] = args?.userAndGroupQuotas;
            resourceInputs["volumeType"] = args?.volumeType;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OpenZfsVolume.__pulumiType, name, resourceInputs, opts);
    }
}
exports.OpenZfsVolume = OpenZfsVolume;
/** @internal */
OpenZfsVolume.__pulumiType = 'aws:fsx/openZfsVolume:OpenZfsVolume';
//# sourceMappingURL=openZfsVolume.js.map