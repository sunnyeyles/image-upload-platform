"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Alias = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an alias for a KMS customer master key. AWS Console enforces 1-to-1 mapping between aliases & keys,
 * but API (hence this provider too) allows you to create as many aliases as
 * the [account limits](http://docs.aws.amazon.com/kms/latest/developerguide/limits.html) allow you.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const a = new aws.kms.Key("a", {});
 * const aAlias = new aws.kms.Alias("a", {
 *     name: "alias/my-key-alias",
 *     targetKeyId: a.keyId,
 * });
 * ```
 *
 * ## Import
 *
 * ### Identity Schema
 *
 * #### Required
 *
 * * `name` - (String) Name of the KMS key alias.
 *
 * #### Optional
 *
 * - `account_id` (String) AWS Account where this resource is managed.
 *
 * - `region` (String) Region where this resource is managed.
 *
 * Using `pulumi import`, import KMS aliases using the `name`. For example:
 *
 * console
 *
 * % pulumi import aws_kms_alias.a alias/my-key-alias
 */
class Alias extends pulumi.CustomResource {
    /**
     * Get an existing Alias resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Alias(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Alias.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Alias.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["name"] = state?.name;
            resourceInputs["namePrefix"] = state?.namePrefix;
            resourceInputs["region"] = state?.region;
            resourceInputs["targetKeyArn"] = state?.targetKeyArn;
            resourceInputs["targetKeyId"] = state?.targetKeyId;
        }
        else {
            const args = argsOrState;
            if (args?.targetKeyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetKeyId'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["namePrefix"] = args?.namePrefix;
            resourceInputs["region"] = args?.region;
            resourceInputs["targetKeyId"] = args?.targetKeyId;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["targetKeyArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Alias.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Alias = Alias;
/** @internal */
Alias.__pulumiType = 'aws:kms/alias:Alias';
//# sourceMappingURL=alias.js.map