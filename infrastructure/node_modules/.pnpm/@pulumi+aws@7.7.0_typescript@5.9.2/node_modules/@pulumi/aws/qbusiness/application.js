"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Application = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Q Business Application resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.qbusiness.Application("example", {
 *     displayName: "example-app",
 *     iamServiceRoleArn: exampleAwsIamRole.arn,
 *     identityCenterInstanceArn: exampleAwsSsoadminInstances.arns[0],
 *     attachmentsConfiguration: {
 *         attachmentsControlMode: "ENABLED",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import a Q Business Application using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:qbusiness/application:Application example id-12345678
 * ```
 */
class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Application(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["attachmentsConfiguration"] = state?.attachmentsConfiguration;
            resourceInputs["description"] = state?.description;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["encryptionConfiguration"] = state?.encryptionConfiguration;
            resourceInputs["iamServiceRoleArn"] = state?.iamServiceRoleArn;
            resourceInputs["identityCenterApplicationArn"] = state?.identityCenterApplicationArn;
            resourceInputs["identityCenterInstanceArn"] = state?.identityCenterInstanceArn;
            resourceInputs["region"] = state?.region;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["timeouts"] = state?.timeouts;
        }
        else {
            const args = argsOrState;
            if (args?.displayName === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if (args?.iamServiceRoleArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'iamServiceRoleArn'");
            }
            if (args?.identityCenterInstanceArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'identityCenterInstanceArn'");
            }
            resourceInputs["attachmentsConfiguration"] = args?.attachmentsConfiguration;
            resourceInputs["description"] = args?.description;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["encryptionConfiguration"] = args?.encryptionConfiguration;
            resourceInputs["iamServiceRoleArn"] = args?.iamServiceRoleArn;
            resourceInputs["identityCenterInstanceArn"] = args?.identityCenterInstanceArn;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["identityCenterApplicationArn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Application.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Application = Application;
/** @internal */
Application.__pulumiType = 'aws:qbusiness/application:Application';
//# sourceMappingURL=application.js.map