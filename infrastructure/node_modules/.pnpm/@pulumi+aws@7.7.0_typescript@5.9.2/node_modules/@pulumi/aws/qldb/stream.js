"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stream = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an AWS Quantum Ledger Database (QLDB) Stream resource
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.qldb.Stream("example", {
 *     ledgerName: "existing-ledger-name",
 *     streamName: "sample-ledger-stream",
 *     roleArn: "sample-role-arn",
 *     inclusiveStartTime: "2021-01-01T00:00:00Z",
 *     kinesisConfiguration: {
 *         aggregationEnabled: false,
 *         streamArn: "arn:aws:kinesis:us-east-1:xxxxxxxxxxxx:stream/example-kinesis-stream",
 *     },
 *     tags: {
 *         example: "tag",
 *     },
 * });
 * ```
 */
class Stream extends pulumi.CustomResource {
    /**
     * Get an existing Stream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Stream(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Stream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Stream.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["exclusiveEndTime"] = state?.exclusiveEndTime;
            resourceInputs["inclusiveStartTime"] = state?.inclusiveStartTime;
            resourceInputs["kinesisConfiguration"] = state?.kinesisConfiguration;
            resourceInputs["ledgerName"] = state?.ledgerName;
            resourceInputs["region"] = state?.region;
            resourceInputs["roleArn"] = state?.roleArn;
            resourceInputs["streamName"] = state?.streamName;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
        }
        else {
            const args = argsOrState;
            if (args?.inclusiveStartTime === undefined && !opts.urn) {
                throw new Error("Missing required property 'inclusiveStartTime'");
            }
            if (args?.kinesisConfiguration === undefined && !opts.urn) {
                throw new Error("Missing required property 'kinesisConfiguration'");
            }
            if (args?.ledgerName === undefined && !opts.urn) {
                throw new Error("Missing required property 'ledgerName'");
            }
            if (args?.roleArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if (args?.streamName === undefined && !opts.urn) {
                throw new Error("Missing required property 'streamName'");
            }
            resourceInputs["exclusiveEndTime"] = args?.exclusiveEndTime;
            resourceInputs["inclusiveStartTime"] = args?.inclusiveStartTime;
            resourceInputs["kinesisConfiguration"] = args?.kinesisConfiguration;
            resourceInputs["ledgerName"] = args?.ledgerName;
            resourceInputs["region"] = args?.region;
            resourceInputs["roleArn"] = args?.roleArn;
            resourceInputs["streamName"] = args?.streamName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Stream.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Stream = Stream;
/** @internal */
Stream.__pulumiType = 'aws:qldb/stream:Stream';
//# sourceMappingURL=stream.js.map