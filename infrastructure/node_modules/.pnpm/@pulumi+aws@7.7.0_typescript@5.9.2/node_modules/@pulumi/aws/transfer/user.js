"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const fooServer = new aws.transfer.Server("foo", {
 *     identityProviderType: "SERVICE_MANAGED",
 *     tags: {
 *         NAME: "tf-acc-test-transfer-server",
 *     },
 * });
 * const assumeRole = aws.iam.getPolicyDocument({
 *     statements: [{
 *         effect: "Allow",
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["transfer.amazonaws.com"],
 *         }],
 *         actions: ["sts:AssumeRole"],
 *     }],
 * });
 * const fooRole = new aws.iam.Role("foo", {
 *     name: "tf-test-transfer-user-iam-role",
 *     assumeRolePolicy: assumeRole.then(assumeRole => assumeRole.json),
 * });
 * const foo = aws.iam.getPolicyDocument({
 *     statements: [{
 *         sid: "AllowFullAccesstoS3",
 *         effect: "Allow",
 *         actions: ["s3:*"],
 *         resources: ["*"],
 *     }],
 * });
 * const fooRolePolicy = new aws.iam.RolePolicy("foo", {
 *     name: "tf-test-transfer-user-iam-policy",
 *     role: fooRole.id,
 *     policy: foo.then(foo => foo.json),
 * });
 * const fooUser = new aws.transfer.User("foo", {
 *     serverId: fooServer.id,
 *     userName: "tftestuser",
 *     role: fooRole.arn,
 *     homeDirectoryType: "LOGICAL",
 *     homeDirectoryMappings: [{
 *         entry: "/test.pdf",
 *         target: "/bucket3/test-path/tftestuser.pdf",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Transfer Users using the `server_id` and `user_name` separated by `/`. For example:
 *
 * ```sh
 * $ pulumi import aws:transfer/user:User bar s-12345678/test-username
 * ```
 */
class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new User(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["homeDirectory"] = state?.homeDirectory;
            resourceInputs["homeDirectoryMappings"] = state?.homeDirectoryMappings;
            resourceInputs["homeDirectoryType"] = state?.homeDirectoryType;
            resourceInputs["policy"] = state?.policy;
            resourceInputs["posixProfile"] = state?.posixProfile;
            resourceInputs["region"] = state?.region;
            resourceInputs["role"] = state?.role;
            resourceInputs["serverId"] = state?.serverId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["userName"] = state?.userName;
        }
        else {
            const args = argsOrState;
            if (args?.role === undefined && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if (args?.serverId === undefined && !opts.urn) {
                throw new Error("Missing required property 'serverId'");
            }
            if (args?.userName === undefined && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            resourceInputs["homeDirectory"] = args?.homeDirectory;
            resourceInputs["homeDirectoryMappings"] = args?.homeDirectoryMappings;
            resourceInputs["homeDirectoryType"] = args?.homeDirectoryType;
            resourceInputs["policy"] = args?.policy;
            resourceInputs["posixProfile"] = args?.posixProfile;
            resourceInputs["region"] = args?.region;
            resourceInputs["role"] = args?.role;
            resourceInputs["serverId"] = args?.serverId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["userName"] = args?.userName;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}
exports.User = User;
/** @internal */
User.__pulumiType = 'aws:transfer/user:User';
//# sourceMappingURL=user.js.map