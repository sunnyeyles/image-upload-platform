"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Function = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a CloudFront Function resource. With CloudFront Functions in Amazon CloudFront, you can write lightweight functions in JavaScript for high-scale, latency-sensitive CDN customizations.
 *
 * See [CloudFront Functions](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-functions.html)
 *
 * > **NOTE:** You cannot delete a function if itâ€™s associated with a cache behavior. First, update your distributions to remove the function association from all cache behaviors, then delete the function.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Using `pulumi import`, import CloudFront Functions using the `name`. For example:
 *
 * ```sh
 * $ pulumi import aws:cloudfront/function:Function test my_test_function
 * ```
 */
class Function extends pulumi.CustomResource {
    /**
     * Get an existing Function resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Function(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Function.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Function.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["code"] = state?.code;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["etag"] = state?.etag;
            resourceInputs["keyValueStoreAssociations"] = state?.keyValueStoreAssociations;
            resourceInputs["liveStageEtag"] = state?.liveStageEtag;
            resourceInputs["name"] = state?.name;
            resourceInputs["publish"] = state?.publish;
            resourceInputs["runtime"] = state?.runtime;
            resourceInputs["status"] = state?.status;
        }
        else {
            const args = argsOrState;
            if (args?.code === undefined && !opts.urn) {
                throw new Error("Missing required property 'code'");
            }
            if (args?.runtime === undefined && !opts.urn) {
                throw new Error("Missing required property 'runtime'");
            }
            resourceInputs["code"] = args?.code;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["keyValueStoreAssociations"] = args?.keyValueStoreAssociations;
            resourceInputs["name"] = args?.name;
            resourceInputs["publish"] = args?.publish;
            resourceInputs["runtime"] = args?.runtime;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["liveStageEtag"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Function.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Function = Function;
/** @internal */
Function.__pulumiType = 'aws:cloudfront/function:Function';
//# sourceMappingURL=function.js.map