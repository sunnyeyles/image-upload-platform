"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.KxCluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS FinSpace Kx Cluster.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Using `pulumi import`, import an AWS FinSpace Kx Cluster using the `id` (environment ID and cluster name, comma-delimited). For example:
 *
 * ```sh
 * $ pulumi import aws:finspace/kxCluster:KxCluster example n3ceo7wqxoxcti5tujqwzs,my-tf-kx-cluster
 * ```
 */
class KxCluster extends pulumi.CustomResource {
    /**
     * Get an existing KxCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new KxCluster(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of KxCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KxCluster.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["autoScalingConfiguration"] = state?.autoScalingConfiguration;
            resourceInputs["availabilityZoneId"] = state?.availabilityZoneId;
            resourceInputs["azMode"] = state?.azMode;
            resourceInputs["cacheStorageConfigurations"] = state?.cacheStorageConfigurations;
            resourceInputs["capacityConfiguration"] = state?.capacityConfiguration;
            resourceInputs["code"] = state?.code;
            resourceInputs["commandLineArguments"] = state?.commandLineArguments;
            resourceInputs["createdTimestamp"] = state?.createdTimestamp;
            resourceInputs["databases"] = state?.databases;
            resourceInputs["description"] = state?.description;
            resourceInputs["environmentId"] = state?.environmentId;
            resourceInputs["executionRole"] = state?.executionRole;
            resourceInputs["initializationScript"] = state?.initializationScript;
            resourceInputs["lastModifiedTimestamp"] = state?.lastModifiedTimestamp;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["releaseLabel"] = state?.releaseLabel;
            resourceInputs["savedownStorageConfiguration"] = state?.savedownStorageConfiguration;
            resourceInputs["scalingGroupConfiguration"] = state?.scalingGroupConfiguration;
            resourceInputs["status"] = state?.status;
            resourceInputs["statusReason"] = state?.statusReason;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["tickerplantLogConfigurations"] = state?.tickerplantLogConfigurations;
            resourceInputs["type"] = state?.type;
            resourceInputs["vpcConfiguration"] = state?.vpcConfiguration;
        }
        else {
            const args = argsOrState;
            if (args?.azMode === undefined && !opts.urn) {
                throw new Error("Missing required property 'azMode'");
            }
            if (args?.environmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if (args?.releaseLabel === undefined && !opts.urn) {
                throw new Error("Missing required property 'releaseLabel'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if (args?.vpcConfiguration === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcConfiguration'");
            }
            resourceInputs["autoScalingConfiguration"] = args?.autoScalingConfiguration;
            resourceInputs["availabilityZoneId"] = args?.availabilityZoneId;
            resourceInputs["azMode"] = args?.azMode;
            resourceInputs["cacheStorageConfigurations"] = args?.cacheStorageConfigurations;
            resourceInputs["capacityConfiguration"] = args?.capacityConfiguration;
            resourceInputs["code"] = args?.code;
            resourceInputs["commandLineArguments"] = args?.commandLineArguments;
            resourceInputs["databases"] = args?.databases;
            resourceInputs["description"] = args?.description;
            resourceInputs["environmentId"] = args?.environmentId;
            resourceInputs["executionRole"] = args?.executionRole;
            resourceInputs["initializationScript"] = args?.initializationScript;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["releaseLabel"] = args?.releaseLabel;
            resourceInputs["savedownStorageConfiguration"] = args?.savedownStorageConfiguration;
            resourceInputs["scalingGroupConfiguration"] = args?.scalingGroupConfiguration;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["tickerplantLogConfigurations"] = args?.tickerplantLogConfigurations;
            resourceInputs["type"] = args?.type;
            resourceInputs["vpcConfiguration"] = args?.vpcConfiguration;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdTimestamp"] = undefined /*out*/;
            resourceInputs["lastModifiedTimestamp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusReason"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KxCluster.__pulumiType, name, resourceInputs, opts);
    }
}
exports.KxCluster = KxCluster;
/** @internal */
KxCluster.__pulumiType = 'aws:finspace/kxCluster:KxCluster';
//# sourceMappingURL=kxCluster.js.map