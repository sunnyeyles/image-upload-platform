"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvironmentMembership = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an environment member to an AWS Cloud9 development environment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.cloud9.EnvironmentEC2("test", {
 *     instanceType: "t2.micro",
 *     name: "some-env",
 * });
 * const testUser = new aws.iam.User("test", {name: "some-user"});
 * const testEnvironmentMembership = new aws.cloud9.EnvironmentMembership("test", {
 *     environmentId: test.id,
 *     permissions: "read-only",
 *     userArn: testUser.arn,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Cloud9 environment membership using the `environment-id#user-arn`. For example:
 *
 * ```sh
 * $ pulumi import aws:cloud9/environmentMembership:EnvironmentMembership test environment-id#user-arn
 * ```
 */
class EnvironmentMembership extends pulumi.CustomResource {
    /**
     * Get an existing EnvironmentMembership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new EnvironmentMembership(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of EnvironmentMembership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EnvironmentMembership.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["environmentId"] = state?.environmentId;
            resourceInputs["permissions"] = state?.permissions;
            resourceInputs["region"] = state?.region;
            resourceInputs["userArn"] = state?.userArn;
            resourceInputs["userId"] = state?.userId;
        }
        else {
            const args = argsOrState;
            if (args?.environmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if (args?.permissions === undefined && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            if (args?.userArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'userArn'");
            }
            resourceInputs["environmentId"] = args?.environmentId;
            resourceInputs["permissions"] = args?.permissions;
            resourceInputs["region"] = args?.region;
            resourceInputs["userArn"] = args?.userArn;
            resourceInputs["userId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EnvironmentMembership.__pulumiType, name, resourceInputs, opts);
    }
}
exports.EnvironmentMembership = EnvironmentMembership;
/** @internal */
EnvironmentMembership.__pulumiType = 'aws:cloud9/environmentMembership:EnvironmentMembership';
//# sourceMappingURL=environmentMembership.js.map