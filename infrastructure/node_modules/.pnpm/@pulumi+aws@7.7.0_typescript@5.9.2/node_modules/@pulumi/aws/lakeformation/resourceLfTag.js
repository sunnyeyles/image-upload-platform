"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceLfTag = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS Lake Formation Resource LF Tag.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lakeformation.ResourceLfTag("example", {
 *     database: {
 *         name: exampleAwsGlueCatalogDatabase.name,
 *     },
 *     lfTag: {
 *         key: exampleAwsLakeformationLfTag.key,
 *         value: "stowe",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * You cannot import this resource.
 */
class ResourceLfTag extends pulumi.CustomResource {
    /**
     * Get an existing ResourceLfTag resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ResourceLfTag(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of ResourceLfTag.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceLfTag.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["catalogId"] = state?.catalogId;
            resourceInputs["database"] = state?.database;
            resourceInputs["lfTag"] = state?.lfTag;
            resourceInputs["region"] = state?.region;
            resourceInputs["table"] = state?.table;
            resourceInputs["tableWithColumns"] = state?.tableWithColumns;
            resourceInputs["timeouts"] = state?.timeouts;
        }
        else {
            const args = argsOrState;
            resourceInputs["catalogId"] = args?.catalogId;
            resourceInputs["database"] = args?.database;
            resourceInputs["lfTag"] = args?.lfTag;
            resourceInputs["region"] = args?.region;
            resourceInputs["table"] = args?.table;
            resourceInputs["tableWithColumns"] = args?.tableWithColumns;
            resourceInputs["timeouts"] = args?.timeouts;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceLfTag.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ResourceLfTag = ResourceLfTag;
/** @internal */
ResourceLfTag.__pulumiType = 'aws:lakeformation/resourceLfTag:ResourceLfTag';
//# sourceMappingURL=resourceLfTag.js.map