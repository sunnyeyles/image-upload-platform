"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProvisionedConcurrencyConfig = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an AWS Lambda Provisioned Concurrency Configuration. Use this resource to configure provisioned concurrency for Lambda functions.
 *
 * > **Note:** Setting `skipDestroy` to `true` means that the AWS Provider will not destroy a provisioned concurrency configuration, even when running `pulumi destroy`. The configuration is thus an intentional dangling resource that is not managed by Pulumi and may incur extra expense in your AWS account.
 *
 * ## Example Usage
 *
 * ### Alias Name
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lambda.ProvisionedConcurrencyConfig("example", {
 *     functionName: exampleAwsLambdaAlias.functionName,
 *     provisionedConcurrentExecutions: 1,
 *     qualifier: exampleAwsLambdaAlias.name,
 * });
 * ```
 *
 * ### Function Version
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lambda.ProvisionedConcurrencyConfig("example", {
 *     functionName: exampleAwsLambdaFunction.functionName,
 *     provisionedConcurrentExecutions: 1,
 *     qualifier: exampleAwsLambdaFunction.version,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import a Lambda Provisioned Concurrency Configuration using the `function_name` and `qualifier` separated by a comma (`,`). For example:
 *
 * ```sh
 * $ pulumi import aws:lambda/provisionedConcurrencyConfig:ProvisionedConcurrencyConfig example example,production
 * ```
 */
class ProvisionedConcurrencyConfig extends pulumi.CustomResource {
    /**
     * Get an existing ProvisionedConcurrencyConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ProvisionedConcurrencyConfig(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of ProvisionedConcurrencyConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProvisionedConcurrencyConfig.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["functionName"] = state?.functionName;
            resourceInputs["provisionedConcurrentExecutions"] = state?.provisionedConcurrentExecutions;
            resourceInputs["qualifier"] = state?.qualifier;
            resourceInputs["region"] = state?.region;
            resourceInputs["skipDestroy"] = state?.skipDestroy;
        }
        else {
            const args = argsOrState;
            if (args?.functionName === undefined && !opts.urn) {
                throw new Error("Missing required property 'functionName'");
            }
            if (args?.provisionedConcurrentExecutions === undefined && !opts.urn) {
                throw new Error("Missing required property 'provisionedConcurrentExecutions'");
            }
            if (args?.qualifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'qualifier'");
            }
            resourceInputs["functionName"] = args?.functionName;
            resourceInputs["provisionedConcurrentExecutions"] = args?.provisionedConcurrentExecutions;
            resourceInputs["qualifier"] = args?.qualifier;
            resourceInputs["region"] = args?.region;
            resourceInputs["skipDestroy"] = args?.skipDestroy;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProvisionedConcurrencyConfig.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ProvisionedConcurrencyConfig = ProvisionedConcurrencyConfig;
/** @internal */
ProvisionedConcurrencyConfig.__pulumiType = 'aws:lambda/provisionedConcurrencyConfig:ProvisionedConcurrencyConfig';
//# sourceMappingURL=provisionedConcurrencyConfig.js.map