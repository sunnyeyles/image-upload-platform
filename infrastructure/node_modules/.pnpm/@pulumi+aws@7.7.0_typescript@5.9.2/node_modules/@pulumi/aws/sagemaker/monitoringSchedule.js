"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitoringSchedule = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a SageMaker AI monitoring schedule resource.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.sagemaker.MonitoringSchedule("test", {
 *     name: "my-monitoring-schedule",
 *     monitoringScheduleConfig: {
 *         monitoringJobDefinitionName: testAwsSagemakerDataQualityJobDefinition.name,
 *         monitoringType: "DataQuality",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import monitoring schedules using the `name`. For example:
 *
 * ```sh
 * $ pulumi import aws:sagemaker/monitoringSchedule:MonitoringSchedule test_monitoring_schedule monitoring-schedule-foo
 * ```
 */
class MonitoringSchedule extends pulumi.CustomResource {
    /**
     * Get an existing MonitoringSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new MonitoringSchedule(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of MonitoringSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitoringSchedule.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["monitoringScheduleConfig"] = state?.monitoringScheduleConfig;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
        }
        else {
            const args = argsOrState;
            if (args?.monitoringScheduleConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'monitoringScheduleConfig'");
            }
            resourceInputs["monitoringScheduleConfig"] = args?.monitoringScheduleConfig;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitoringSchedule.__pulumiType, name, resourceInputs, opts);
    }
}
exports.MonitoringSchedule = MonitoringSchedule;
/** @internal */
MonitoringSchedule.__pulumiType = 'aws:sagemaker/monitoringSchedule:MonitoringSchedule';
//# sourceMappingURL=monitoringSchedule.js.map