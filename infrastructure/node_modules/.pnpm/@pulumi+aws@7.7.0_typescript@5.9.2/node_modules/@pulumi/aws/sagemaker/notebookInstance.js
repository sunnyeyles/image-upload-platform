"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotebookInstance = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a SageMaker AI Notebook Instance resource.
 *
 * ## Example Usage
 *
 * ### Basic usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const ni = new aws.sagemaker.NotebookInstance("ni", {
 *     name: "my-notebook-instance",
 *     roleArn: role.arn,
 *     instanceType: "ml.t2.medium",
 *     tags: {
 *         Name: "foo",
 *     },
 * });
 * ```
 *
 * ### Code repository usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.sagemaker.CodeRepository("example", {
 *     codeRepositoryName: "my-notebook-instance-code-repo",
 *     gitConfig: {
 *         repositoryUrl: "https://github.com/github/docs.git",
 *     },
 * });
 * const ni = new aws.sagemaker.NotebookInstance("ni", {
 *     name: "my-notebook-instance",
 *     roleArn: role.arn,
 *     instanceType: "ml.t2.medium",
 *     defaultCodeRepository: example.codeRepositoryName,
 *     tags: {
 *         Name: "foo",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import SageMaker AI Notebook Instances using the `name`. For example:
 *
 * ```sh
 * $ pulumi import aws:sagemaker/notebookInstance:NotebookInstance test_notebook_instance my-notebook-instance
 * ```
 */
class NotebookInstance extends pulumi.CustomResource {
    /**
     * Get an existing NotebookInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new NotebookInstance(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of NotebookInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotebookInstance.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["additionalCodeRepositories"] = state?.additionalCodeRepositories;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["defaultCodeRepository"] = state?.defaultCodeRepository;
            resourceInputs["directInternetAccess"] = state?.directInternetAccess;
            resourceInputs["instanceMetadataServiceConfiguration"] = state?.instanceMetadataServiceConfiguration;
            resourceInputs["instanceType"] = state?.instanceType;
            resourceInputs["kmsKeyId"] = state?.kmsKeyId;
            resourceInputs["lifecycleConfigName"] = state?.lifecycleConfigName;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkInterfaceId"] = state?.networkInterfaceId;
            resourceInputs["platformIdentifier"] = state?.platformIdentifier;
            resourceInputs["region"] = state?.region;
            resourceInputs["roleArn"] = state?.roleArn;
            resourceInputs["rootAccess"] = state?.rootAccess;
            resourceInputs["securityGroups"] = state?.securityGroups;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["url"] = state?.url;
            resourceInputs["volumeSize"] = state?.volumeSize;
        }
        else {
            const args = argsOrState;
            if (args?.instanceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            if (args?.roleArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["additionalCodeRepositories"] = args?.additionalCodeRepositories;
            resourceInputs["defaultCodeRepository"] = args?.defaultCodeRepository;
            resourceInputs["directInternetAccess"] = args?.directInternetAccess;
            resourceInputs["instanceMetadataServiceConfiguration"] = args?.instanceMetadataServiceConfiguration;
            resourceInputs["instanceType"] = args?.instanceType;
            resourceInputs["kmsKeyId"] = args?.kmsKeyId;
            resourceInputs["lifecycleConfigName"] = args?.lifecycleConfigName;
            resourceInputs["name"] = args?.name;
            resourceInputs["platformIdentifier"] = args?.platformIdentifier;
            resourceInputs["region"] = args?.region;
            resourceInputs["roleArn"] = args?.roleArn;
            resourceInputs["rootAccess"] = args?.rootAccess;
            resourceInputs["securityGroups"] = args?.securityGroups;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["volumeSize"] = args?.volumeSize;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["networkInterfaceId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NotebookInstance.__pulumiType, name, resourceInputs, opts);
    }
}
exports.NotebookInstance = NotebookInstance;
/** @internal */
NotebookInstance.__pulumiType = 'aws:sagemaker/notebookInstance:NotebookInstance';
//# sourceMappingURL=notebookInstance.js.map