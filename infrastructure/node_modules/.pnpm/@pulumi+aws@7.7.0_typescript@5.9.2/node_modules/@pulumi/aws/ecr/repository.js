"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Repository = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an Elastic Container Registry Repository.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const foo = new aws.ecr.Repository("foo", {
 *     name: "bar",
 *     imageTagMutability: "MUTABLE",
 *     imageScanningConfiguration: {
 *         scanOnPush: true,
 *     },
 * });
 * ```
 *
 * ### With Image Tag Mutability Exclusion
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ecr.Repository("example", {
 *     name: "example-repo",
 *     imageTagMutability: "IMMUTABLE_WITH_EXCLUSION",
 *     imageTagMutabilityExclusionFilters: [
 *         {
 *             filter: "latest*",
 *             filterType: "WILDCARD",
 *         },
 *         {
 *             filter: "dev-*",
 *             filterType: "WILDCARD",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ### Identity Schema
 *
 * #### Required
 *
 * * `name` - (String) Name of the ECR repository.
 *
 * #### Optional
 *
 * - `account_id` (String) AWS Account where this resource is managed.
 *
 * - `region` (String) Region where this resource is managed.
 *
 * Using `pulumi import`, import ECR Repositories using the `name`. For example:
 *
 * console
 *
 * % pulumi import aws_ecr_repository.service test-service
 */
class Repository extends pulumi.CustomResource {
    /**
     * Get an existing Repository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Repository(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repository.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["encryptionConfigurations"] = state?.encryptionConfigurations;
            resourceInputs["forceDelete"] = state?.forceDelete;
            resourceInputs["imageScanningConfiguration"] = state?.imageScanningConfiguration;
            resourceInputs["imageTagMutability"] = state?.imageTagMutability;
            resourceInputs["imageTagMutabilityExclusionFilters"] = state?.imageTagMutabilityExclusionFilters;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["registryId"] = state?.registryId;
            resourceInputs["repositoryUrl"] = state?.repositoryUrl;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
        }
        else {
            const args = argsOrState;
            resourceInputs["encryptionConfigurations"] = args?.encryptionConfigurations;
            resourceInputs["forceDelete"] = args?.forceDelete;
            resourceInputs["imageScanningConfiguration"] = args?.imageScanningConfiguration;
            resourceInputs["imageTagMutability"] = args?.imageTagMutability;
            resourceInputs["imageTagMutabilityExclusionFilters"] = args?.imageTagMutabilityExclusionFilters;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["registryId"] = undefined /*out*/;
            resourceInputs["repositoryUrl"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Repository.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Repository = Repository;
/** @internal */
Repository.__pulumiType = 'aws:ecr/repository:Repository';
//# sourceMappingURL=repository.js.map