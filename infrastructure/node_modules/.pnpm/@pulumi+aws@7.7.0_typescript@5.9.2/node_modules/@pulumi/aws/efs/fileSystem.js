"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileSystem = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an Elastic File System (EFS) File System resource.
 *
 * ## Example Usage
 *
 * ### EFS File System w/ tags
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const foo = new aws.efs.FileSystem("foo", {
 *     creationToken: "my-product",
 *     tags: {
 *         Name: "MyProduct",
 *     },
 * });
 * ```
 *
 * ### Using lifecycle policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const fooWithLifecylePolicy = new aws.efs.FileSystem("foo_with_lifecyle_policy", {
 *     creationToken: "my-product",
 *     lifecyclePolicies: [{
 *         transitionToIa: "AFTER_30_DAYS",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import the EFS file systems using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:efs/fileSystem:FileSystem foo fs-6fa144c6
 * ```
 */
class FileSystem extends pulumi.CustomResource {
    /**
     * Get an existing FileSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FileSystem(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of FileSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FileSystem.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["availabilityZoneId"] = state?.availabilityZoneId;
            resourceInputs["availabilityZoneName"] = state?.availabilityZoneName;
            resourceInputs["creationToken"] = state?.creationToken;
            resourceInputs["dnsName"] = state?.dnsName;
            resourceInputs["encrypted"] = state?.encrypted;
            resourceInputs["kmsKeyId"] = state?.kmsKeyId;
            resourceInputs["lifecyclePolicies"] = state?.lifecyclePolicies;
            resourceInputs["name"] = state?.name;
            resourceInputs["numberOfMountTargets"] = state?.numberOfMountTargets;
            resourceInputs["ownerId"] = state?.ownerId;
            resourceInputs["performanceMode"] = state?.performanceMode;
            resourceInputs["protection"] = state?.protection;
            resourceInputs["provisionedThroughputInMibps"] = state?.provisionedThroughputInMibps;
            resourceInputs["region"] = state?.region;
            resourceInputs["sizeInBytes"] = state?.sizeInBytes;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["throughputMode"] = state?.throughputMode;
        }
        else {
            const args = argsOrState;
            resourceInputs["availabilityZoneName"] = args?.availabilityZoneName;
            resourceInputs["creationToken"] = args?.creationToken;
            resourceInputs["encrypted"] = args?.encrypted;
            resourceInputs["kmsKeyId"] = args?.kmsKeyId;
            resourceInputs["lifecyclePolicies"] = args?.lifecyclePolicies;
            resourceInputs["performanceMode"] = args?.performanceMode;
            resourceInputs["protection"] = args?.protection;
            resourceInputs["provisionedThroughputInMibps"] = args?.provisionedThroughputInMibps;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["throughputMode"] = args?.throughputMode;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["availabilityZoneId"] = undefined /*out*/;
            resourceInputs["dnsName"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["numberOfMountTargets"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["sizeInBytes"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FileSystem.__pulumiType, name, resourceInputs, opts);
    }
}
exports.FileSystem = FileSystem;
/** @internal */
FileSystem.__pulumiType = 'aws:efs/fileSystem:FileSystem';
//# sourceMappingURL=fileSystem.js.map