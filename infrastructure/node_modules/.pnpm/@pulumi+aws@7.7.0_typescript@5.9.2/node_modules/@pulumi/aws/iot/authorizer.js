"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Authorizer = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates and manages an AWS IoT Authorizer.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as std from "@pulumi/std";
 *
 * const example = new aws.iot.Authorizer("example", {
 *     name: "example",
 *     authorizerFunctionArn: exampleAwsLambdaFunction.arn,
 *     signingDisabled: false,
 *     status: "ACTIVE",
 *     tokenKeyName: "Token-Header",
 *     tokenSigningPublicKeys: {
 *         Key1: std.file({
 *             input: "test-fixtures/iot-authorizer-signing-key.pem",
 *         }).then(invoke => invoke.result),
 *     },
 *     tags: {
 *         Name: "example",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import IOT Authorizers using the name. For example:
 *
 * ```sh
 * $ pulumi import aws:iot/authorizer:Authorizer example example
 * ```
 */
class Authorizer extends pulumi.CustomResource {
    /**
     * Get an existing Authorizer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Authorizer(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Authorizer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Authorizer.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["authorizerFunctionArn"] = state?.authorizerFunctionArn;
            resourceInputs["enableCachingForHttp"] = state?.enableCachingForHttp;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["signingDisabled"] = state?.signingDisabled;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["tokenKeyName"] = state?.tokenKeyName;
            resourceInputs["tokenSigningPublicKeys"] = state?.tokenSigningPublicKeys;
        }
        else {
            const args = argsOrState;
            if (args?.authorizerFunctionArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'authorizerFunctionArn'");
            }
            resourceInputs["authorizerFunctionArn"] = args?.authorizerFunctionArn;
            resourceInputs["enableCachingForHttp"] = args?.enableCachingForHttp;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["signingDisabled"] = args?.signingDisabled;
            resourceInputs["status"] = args?.status;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["tokenKeyName"] = args?.tokenKeyName;
            resourceInputs["tokenSigningPublicKeys"] = args?.tokenSigningPublicKeys ? pulumi.secret(args.tokenSigningPublicKeys) : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["tokenSigningPublicKeys"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Authorizer.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Authorizer = Authorizer;
/** @internal */
Authorizer.__pulumiType = 'aws:iot/authorizer:Authorizer';
//# sourceMappingURL=authorizer.js.map