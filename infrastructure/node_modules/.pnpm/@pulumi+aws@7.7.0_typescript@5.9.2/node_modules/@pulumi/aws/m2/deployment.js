"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Deployment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an [AWS Mainframe Modernization Deployment.](https://docs.aws.amazon.com/m2/latest/userguide/applications-m2-deploy.html)
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.m2.Deployment("test", {
 *     environmentId: "01234567890abcdef012345678",
 *     applicationId: "34567890abcdef012345678012",
 *     applicationVersion: 1,
 *     start: true,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Mainframe Modernization Deployment using the `APPLICATION-ID,DEPLOYMENT-ID`. For example:
 *
 * ```sh
 * $ pulumi import aws:m2/deployment:Deployment example APPLICATION-ID,DEPLOYMENT-ID
 * ```
 */
class Deployment extends pulumi.CustomResource {
    /**
     * Get an existing Deployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Deployment(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Deployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Deployment.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["applicationId"] = state?.applicationId;
            resourceInputs["applicationVersion"] = state?.applicationVersion;
            resourceInputs["deploymentId"] = state?.deploymentId;
            resourceInputs["environmentId"] = state?.environmentId;
            resourceInputs["forceStop"] = state?.forceStop;
            resourceInputs["region"] = state?.region;
            resourceInputs["start"] = state?.start;
            resourceInputs["timeouts"] = state?.timeouts;
        }
        else {
            const args = argsOrState;
            if (args?.applicationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            if (args?.applicationVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'applicationVersion'");
            }
            if (args?.environmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if (args?.start === undefined && !opts.urn) {
                throw new Error("Missing required property 'start'");
            }
            resourceInputs["applicationId"] = args?.applicationId;
            resourceInputs["applicationVersion"] = args?.applicationVersion;
            resourceInputs["environmentId"] = args?.environmentId;
            resourceInputs["forceStop"] = args?.forceStop;
            resourceInputs["region"] = args?.region;
            resourceInputs["start"] = args?.start;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["deploymentId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Deployment.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Deployment = Deployment;
/** @internal */
Deployment.__pulumiType = 'aws:m2/deployment:Deployment';
//# sourceMappingURL=deployment.js.map