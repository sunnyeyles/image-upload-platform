"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationAssignment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS SSO Admin Application Assignment.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ssoadmin.ApplicationAssignment("example", {
 *     applicationArn: exampleAwsSsoadminApplication.arn,
 *     principalId: exampleAwsIdentitystoreUser.userId,
 *     principalType: "USER",
 * });
 * ```
 *
 * ### Group Type
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ssoadmin.ApplicationAssignment("example", {
 *     applicationArn: exampleAwsSsoadminApplication.arn,
 *     principalId: exampleAwsIdentitystoreGroup.groupId,
 *     principalType: "GROUP",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import SSO Admin Application Assignment using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:ssoadmin/applicationAssignment:ApplicationAssignment example arn:aws:sso::123456789012:application/id-12345678,abcd1234,USER
 * ```
 */
class ApplicationAssignment extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ApplicationAssignment(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of ApplicationAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationAssignment.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["applicationArn"] = state?.applicationArn;
            resourceInputs["principalId"] = state?.principalId;
            resourceInputs["principalType"] = state?.principalType;
            resourceInputs["region"] = state?.region;
        }
        else {
            const args = argsOrState;
            if (args?.applicationArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'applicationArn'");
            }
            if (args?.principalId === undefined && !opts.urn) {
                throw new Error("Missing required property 'principalId'");
            }
            if (args?.principalType === undefined && !opts.urn) {
                throw new Error("Missing required property 'principalType'");
            }
            resourceInputs["applicationArn"] = args?.applicationArn;
            resourceInputs["principalId"] = args?.principalId;
            resourceInputs["principalType"] = args?.principalType;
            resourceInputs["region"] = args?.region;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationAssignment.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ApplicationAssignment = ApplicationAssignment;
/** @internal */
ApplicationAssignment.__pulumiType = 'aws:ssoadmin/applicationAssignment:ApplicationAssignment';
//# sourceMappingURL=applicationAssignment.js.map