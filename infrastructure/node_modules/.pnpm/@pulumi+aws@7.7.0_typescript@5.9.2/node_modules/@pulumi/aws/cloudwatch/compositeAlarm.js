"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompositeAlarm = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a CloudWatch Composite Alarm resource.
 *
 * > **NOTE:** An alarm (composite or metric) cannot be destroyed when there are other composite alarms depending on it. This can lead to a cyclical dependency on update, as the provider will unsuccessfully attempt to destroy alarms before updating the rule. Consider using `dependsOn`, references to alarm names, and two-stage updates.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.cloudwatch.CompositeAlarm("example", {
 *     alarmDescription: "This is a composite alarm!",
 *     alarmName: "example-composite-alarm",
 *     alarmActions: exampleAwsSnsTopic.arn,
 *     okActions: exampleAwsSnsTopic.arn,
 *     alarmRule: `ALARM(${alpha.alarmName}) OR
 * ALARM(${bravo.alarmName})
 * `,
 *     actionsSuppressor: {
 *         alarm: "suppressor-alarm",
 *         extensionPeriod: 10,
 *         waitPeriod: 20,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import a CloudWatch Composite Alarm using the `alarm_name`. For example:
 *
 * ```sh
 * $ pulumi import aws:cloudwatch/compositeAlarm:CompositeAlarm test my-alarm
 * ```
 */
class CompositeAlarm extends pulumi.CustomResource {
    /**
     * Get an existing CompositeAlarm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CompositeAlarm(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of CompositeAlarm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CompositeAlarm.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["actionsEnabled"] = state?.actionsEnabled;
            resourceInputs["actionsSuppressor"] = state?.actionsSuppressor;
            resourceInputs["alarmActions"] = state?.alarmActions;
            resourceInputs["alarmDescription"] = state?.alarmDescription;
            resourceInputs["alarmName"] = state?.alarmName;
            resourceInputs["alarmRule"] = state?.alarmRule;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["insufficientDataActions"] = state?.insufficientDataActions;
            resourceInputs["okActions"] = state?.okActions;
            resourceInputs["region"] = state?.region;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
        }
        else {
            const args = argsOrState;
            if (args?.alarmName === undefined && !opts.urn) {
                throw new Error("Missing required property 'alarmName'");
            }
            if (args?.alarmRule === undefined && !opts.urn) {
                throw new Error("Missing required property 'alarmRule'");
            }
            resourceInputs["actionsEnabled"] = args?.actionsEnabled;
            resourceInputs["actionsSuppressor"] = args?.actionsSuppressor;
            resourceInputs["alarmActions"] = args?.alarmActions;
            resourceInputs["alarmDescription"] = args?.alarmDescription;
            resourceInputs["alarmName"] = args?.alarmName;
            resourceInputs["alarmRule"] = args?.alarmRule;
            resourceInputs["insufficientDataActions"] = args?.insufficientDataActions;
            resourceInputs["okActions"] = args?.okActions;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CompositeAlarm.__pulumiType, name, resourceInputs, opts);
    }
}
exports.CompositeAlarm = CompositeAlarm;
/** @internal */
CompositeAlarm.__pulumiType = 'aws:cloudwatch/compositeAlarm:CompositeAlarm';
//# sourceMappingURL=compositeAlarm.js.map