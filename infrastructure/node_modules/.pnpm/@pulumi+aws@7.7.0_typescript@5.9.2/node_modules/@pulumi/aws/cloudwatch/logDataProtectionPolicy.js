"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogDataProtectionPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a CloudWatch Log Data Protection Policy resource.
 *
 * Read more about protecting sensitive user data in the [User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/mask-sensitive-log-data.html).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.cloudwatch.LogGroup("example", {name: "example"});
 * const exampleBucket = new aws.s3.Bucket("example", {bucket: "example"});
 * const exampleLogDataProtectionPolicy = new aws.cloudwatch.LogDataProtectionPolicy("example", {
 *     logGroupName: example.name,
 *     policyDocument: pulumi.jsonStringify({
 *         Name: "Example",
 *         Version: "2021-06-01",
 *         Statement: [
 *             {
 *                 Sid: "Audit",
 *                 DataIdentifier: ["arn:aws:dataprotection::aws:data-identifier/EmailAddress"],
 *                 Operation: {
 *                     Audit: {
 *                         FindingsDestination: {
 *                             S3: {
 *                                 Bucket: exampleBucket.bucket,
 *                             },
 *                         },
 *                     },
 *                 },
 *             },
 *             {
 *                 Sid: "Redact",
 *                 DataIdentifier: ["arn:aws:dataprotection::aws:data-identifier/EmailAddress"],
 *                 Operation: {
 *                     Deidentify: {
 *                         MaskConfig: {},
 *                     },
 *                 },
 *             },
 *         ],
 *     }),
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import this resource using the `log_group_name`. For example:
 *
 * ```sh
 * $ pulumi import aws:cloudwatch/logDataProtectionPolicy:LogDataProtectionPolicy example my-log-group
 * ```
 */
class LogDataProtectionPolicy extends pulumi.CustomResource {
    /**
     * Get an existing LogDataProtectionPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LogDataProtectionPolicy(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of LogDataProtectionPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogDataProtectionPolicy.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["logGroupName"] = state?.logGroupName;
            resourceInputs["policyDocument"] = state?.policyDocument;
            resourceInputs["region"] = state?.region;
        }
        else {
            const args = argsOrState;
            if (args?.logGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'logGroupName'");
            }
            if (args?.policyDocument === undefined && !opts.urn) {
                throw new Error("Missing required property 'policyDocument'");
            }
            resourceInputs["logGroupName"] = args?.logGroupName;
            resourceInputs["policyDocument"] = args?.policyDocument;
            resourceInputs["region"] = args?.region;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogDataProtectionPolicy.__pulumiType, name, resourceInputs, opts);
    }
}
exports.LogDataProtectionPolicy = LogDataProtectionPolicy;
/** @internal */
LogDataProtectionPolicy.__pulumiType = 'aws:cloudwatch/logDataProtectionPolicy:LogDataProtectionPolicy';
//# sourceMappingURL=logDataProtectionPolicy.js.map