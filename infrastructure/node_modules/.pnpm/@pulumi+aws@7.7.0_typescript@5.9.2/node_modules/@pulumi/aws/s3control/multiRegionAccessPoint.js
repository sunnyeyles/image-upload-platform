"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiRegionAccessPoint = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a resource to manage an S3 Multi-Region Access Point associated with specified buckets.
 *
 * > This resource cannot be used with S3 directory buckets.
 *
 * ## Example Usage
 *
 * ### Multiple AWS Buckets in Different Regions
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const fooBucket = new aws.s3.Bucket("foo_bucket", {bucket: "example-bucket-foo"});
 * const barBucket = new aws.s3.Bucket("bar_bucket", {bucket: "example-bucket-bar"});
 * const example = new aws.s3control.MultiRegionAccessPoint("example", {details: {
 *     name: "example",
 *     regions: [
 *         {
 *             bucket: fooBucket.id,
 *         },
 *         {
 *             bucket: barBucket.id,
 *         },
 *     ],
 * }});
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Multi-Region Access Points using the `account_id` and `name` of the Multi-Region Access Point separated by a colon (`:`). For example:
 *
 * ```sh
 * $ pulumi import aws:s3control/multiRegionAccessPoint:MultiRegionAccessPoint example 123456789012:example
 * ```
 */
class MultiRegionAccessPoint extends pulumi.CustomResource {
    /**
     * Get an existing MultiRegionAccessPoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new MultiRegionAccessPoint(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of MultiRegionAccessPoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MultiRegionAccessPoint.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["alias"] = state?.alias;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["details"] = state?.details;
            resourceInputs["domainName"] = state?.domainName;
            resourceInputs["region"] = state?.region;
            resourceInputs["status"] = state?.status;
        }
        else {
            const args = argsOrState;
            if (args?.details === undefined && !opts.urn) {
                throw new Error("Missing required property 'details'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["details"] = args?.details;
            resourceInputs["region"] = args?.region;
            resourceInputs["alias"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["domainName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MultiRegionAccessPoint.__pulumiType, name, resourceInputs, opts);
    }
}
exports.MultiRegionAccessPoint = MultiRegionAccessPoint;
/** @internal */
MultiRegionAccessPoint.__pulumiType = 'aws:s3control/multiRegionAccessPoint:MultiRegionAccessPoint';
//# sourceMappingURL=multiRegionAccessPoint.js.map