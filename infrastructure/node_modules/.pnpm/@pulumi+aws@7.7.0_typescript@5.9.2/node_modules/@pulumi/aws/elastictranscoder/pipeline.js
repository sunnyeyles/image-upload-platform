"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pipeline = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an Elastic Transcoder pipeline resource.
 *
 * > **Warning:** This resource is deprecated. Use [AWS Elemental MediaConvert](https://aws.amazon.com/blogs/media/migrating-workflows-from-amazon-elastic-transcoder-to-aws-elemental-mediaconvert/) instead. AWS will [discontinue support for Amazon Elastic Transcoder](https://aws.amazon.com/blogs/media/support-for-amazon-elastic-transcoder-ending-soon/), effective November 13, 2025.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const bar = new aws.elastictranscoder.Pipeline("bar", {
 *     inputBucket: inputBucket.id,
 *     name: "aws_elastictranscoder_pipeline_my_test_",
 *     role: testRole.arn,
 *     contentConfig: {
 *         bucket: contentBucket.id,
 *         storageClass: "Standard",
 *     },
 *     thumbnailConfig: {
 *         bucket: thumbBucket.id,
 *         storageClass: "Standard",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Elastic Transcoder pipelines using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:elastictranscoder/pipeline:Pipeline basic_pipeline 1407981661351-cttk8b
 * ```
 */
class Pipeline extends pulumi.CustomResource {
    /**
     * Get an existing Pipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Pipeline(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Pipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pipeline.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["awsKmsKeyArn"] = state?.awsKmsKeyArn;
            resourceInputs["contentConfig"] = state?.contentConfig;
            resourceInputs["contentConfigPermissions"] = state?.contentConfigPermissions;
            resourceInputs["inputBucket"] = state?.inputBucket;
            resourceInputs["name"] = state?.name;
            resourceInputs["notifications"] = state?.notifications;
            resourceInputs["outputBucket"] = state?.outputBucket;
            resourceInputs["region"] = state?.region;
            resourceInputs["role"] = state?.role;
            resourceInputs["thumbnailConfig"] = state?.thumbnailConfig;
            resourceInputs["thumbnailConfigPermissions"] = state?.thumbnailConfigPermissions;
        }
        else {
            const args = argsOrState;
            if (args?.inputBucket === undefined && !opts.urn) {
                throw new Error("Missing required property 'inputBucket'");
            }
            if (args?.role === undefined && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            resourceInputs["awsKmsKeyArn"] = args?.awsKmsKeyArn;
            resourceInputs["contentConfig"] = args?.contentConfig;
            resourceInputs["contentConfigPermissions"] = args?.contentConfigPermissions;
            resourceInputs["inputBucket"] = args?.inputBucket;
            resourceInputs["name"] = args?.name;
            resourceInputs["notifications"] = args?.notifications;
            resourceInputs["outputBucket"] = args?.outputBucket;
            resourceInputs["region"] = args?.region;
            resourceInputs["role"] = args?.role;
            resourceInputs["thumbnailConfig"] = args?.thumbnailConfig;
            resourceInputs["thumbnailConfigPermissions"] = args?.thumbnailConfigPermissions;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Pipeline.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Pipeline = Pipeline;
/** @internal */
Pipeline.__pulumiType = 'aws:elastictranscoder/pipeline:Pipeline';
//# sourceMappingURL=pipeline.js.map