"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.BucketObject = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an S3 object resource.
 *
 * ## Example Usage
 *
 * ### Uploading a file to a bucket
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as std from "@pulumi/std";
 *
 * const object = new aws.s3.BucketObject("object", {
 *     bucket: "your_bucket_name",
 *     key: "new_object_key",
 *     source: new pulumi.asset.FileAsset("path/to/file"),
 *     etag: std.filemd5({
 *         input: "path/to/file",
 *     }).then(invoke => invoke.result),
 * });
 * ```
 *
 * ### Encrypting with KMS Key
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const examplekms = new aws.kms.Key("examplekms", {
 *     description: "KMS key 1",
 *     deletionWindowInDays: 7,
 * });
 * const examplebucket = new aws.s3.Bucket("examplebucket", {bucket: "examplebuckettftest"});
 * const example = new aws.s3.BucketAcl("example", {
 *     bucket: examplebucket.id,
 *     acl: "private",
 * });
 * const exampleBucketObject = new aws.s3.BucketObject("example", {
 *     key: "someobject",
 *     bucket: examplebucket.id,
 *     source: new pulumi.asset.FileAsset("index.html"),
 *     kmsKeyId: examplekms.arn,
 * });
 * ```
 *
 * ### Server Side Encryption with S3 Default Master Key
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const examplebucket = new aws.s3.Bucket("examplebucket", {bucket: "examplebuckettftest"});
 * const example = new aws.s3.BucketAcl("example", {
 *     bucket: examplebucket.id,
 *     acl: "private",
 * });
 * const exampleBucketObject = new aws.s3.BucketObject("example", {
 *     key: "someobject",
 *     bucket: examplebucket.id,
 *     source: new pulumi.asset.FileAsset("index.html"),
 *     serverSideEncryption: "aws:kms",
 * });
 * ```
 *
 * ### Server Side Encryption with AWS-Managed Key
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const examplebucket = new aws.s3.Bucket("examplebucket", {bucket: "examplebuckettftest"});
 * const example = new aws.s3.BucketAcl("example", {
 *     bucket: examplebucket.id,
 *     acl: "private",
 * });
 * const exampleBucketObject = new aws.s3.BucketObject("example", {
 *     key: "someobject",
 *     bucket: examplebucket.id,
 *     source: new pulumi.asset.FileAsset("index.html"),
 *     serverSideEncryption: "AES256",
 * });
 * ```
 *
 * ### S3 Object Lock
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const examplebucket = new aws.s3.Bucket("examplebucket", {
 *     bucket: "examplebuckettftest",
 *     objectLockEnabled: true,
 * });
 * const example = new aws.s3.BucketAcl("example", {
 *     bucket: examplebucket.id,
 *     acl: "private",
 * });
 * const exampleBucketVersioning = new aws.s3.BucketVersioning("example", {
 *     bucket: examplebucket.id,
 *     versioningConfiguration: {
 *         status: "Enabled",
 *     },
 * });
 * const exampleBucketObject = new aws.s3.BucketObject("example", {
 *     key: "someobject",
 *     bucket: examplebucket.id,
 *     source: new pulumi.asset.FileAsset("important.txt"),
 *     objectLockLegalHoldStatus: "ON",
 *     objectLockMode: "GOVERNANCE",
 *     objectLockRetainUntilDate: "2021-12-31T23:59:60Z",
 *     forceDestroy: true,
 * }, {
 *     dependsOn: [exampleBucketVersioning],
 * });
 * ```
 *
 * ## Import
 *
 * Import using S3 URL syntax:
 *
 * __Using `pulumi import` to import__ objects using the `id` or S3 URL. For example:
 *
 * Import using the `id`, which is the bucket name and the key together:
 *
 * ```sh
 * $ pulumi import aws:s3/bucketObject:BucketObject example some-bucket-name/some/key.txt
 * ```
 * Import using S3 URL syntax:
 *
 * ```sh
 * $ pulumi import aws:s3/bucketObject:BucketObject example s3://some-bucket-name/some/key.txt
 * ```
 */
class BucketObject extends pulumi.CustomResource {
    /**
     * Get an existing BucketObject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new BucketObject(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of BucketObject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketObject.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["acl"] = state?.acl;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["bucket"] = state?.bucket;
            resourceInputs["bucketKeyEnabled"] = state?.bucketKeyEnabled;
            resourceInputs["cacheControl"] = state?.cacheControl;
            resourceInputs["content"] = state?.content;
            resourceInputs["contentBase64"] = state?.contentBase64;
            resourceInputs["contentDisposition"] = state?.contentDisposition;
            resourceInputs["contentEncoding"] = state?.contentEncoding;
            resourceInputs["contentLanguage"] = state?.contentLanguage;
            resourceInputs["contentType"] = state?.contentType;
            resourceInputs["etag"] = state?.etag;
            resourceInputs["forceDestroy"] = state?.forceDestroy;
            resourceInputs["key"] = state?.key;
            resourceInputs["kmsKeyId"] = state?.kmsKeyId;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["objectLockLegalHoldStatus"] = state?.objectLockLegalHoldStatus;
            resourceInputs["objectLockMode"] = state?.objectLockMode;
            resourceInputs["objectLockRetainUntilDate"] = state?.objectLockRetainUntilDate;
            resourceInputs["region"] = state?.region;
            resourceInputs["serverSideEncryption"] = state?.serverSideEncryption;
            resourceInputs["source"] = state?.source;
            resourceInputs["sourceHash"] = state?.sourceHash;
            resourceInputs["storageClass"] = state?.storageClass;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["versionId"] = state?.versionId;
            resourceInputs["websiteRedirect"] = state?.websiteRedirect;
        }
        else {
            const args = argsOrState;
            if (args?.bucket === undefined && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            resourceInputs["acl"] = args?.acl;
            resourceInputs["bucket"] = args?.bucket;
            resourceInputs["bucketKeyEnabled"] = args?.bucketKeyEnabled;
            resourceInputs["cacheControl"] = args?.cacheControl;
            resourceInputs["content"] = args?.content;
            resourceInputs["contentBase64"] = args?.contentBase64;
            resourceInputs["contentDisposition"] = args?.contentDisposition;
            resourceInputs["contentEncoding"] = args?.contentEncoding;
            resourceInputs["contentLanguage"] = args?.contentLanguage;
            resourceInputs["contentType"] = args?.contentType;
            resourceInputs["etag"] = args?.etag;
            resourceInputs["forceDestroy"] = args?.forceDestroy;
            resourceInputs["key"] = args?.key;
            resourceInputs["kmsKeyId"] = args?.kmsKeyId;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["objectLockLegalHoldStatus"] = args?.objectLockLegalHoldStatus;
            resourceInputs["objectLockMode"] = args?.objectLockMode;
            resourceInputs["objectLockRetainUntilDate"] = args?.objectLockRetainUntilDate;
            resourceInputs["region"] = args?.region;
            resourceInputs["serverSideEncryption"] = args?.serverSideEncryption;
            resourceInputs["source"] = args?.source;
            resourceInputs["sourceHash"] = args?.sourceHash;
            resourceInputs["storageClass"] = args?.storageClass;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["websiteRedirect"] = args?.websiteRedirect;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BucketObject.__pulumiType, name, resourceInputs, opts);
    }
}
exports.BucketObject = BucketObject;
/** @internal */
BucketObject.__pulumiType = 'aws:s3/bucketObject:BucketObject';
//# sourceMappingURL=bucketObject.js.map