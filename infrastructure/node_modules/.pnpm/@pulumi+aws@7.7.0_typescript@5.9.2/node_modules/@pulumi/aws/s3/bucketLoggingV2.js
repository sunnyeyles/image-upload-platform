"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.BucketLoggingV2 = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an S3 bucket (server access) logging resource. For more information, see [Logging requests using server access logging](https://docs.aws.amazon.com/AmazonS3/latest/userguide/ServerLogs.html)
 * in the AWS S3 User Guide.
 *
 * > **Note:** Amazon S3 supports server access logging, AWS CloudTrail, or a combination of both. Refer to the [Logging options for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/logging-with-S3.html)
 * to decide which method meets your requirements.
 *
 * > This resource cannot be used with S3 directory buckets.
 *
 * ## Example Usage
 *
 * ### Grant permission by using bucket policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getCallerIdentity({});
 * const logging = new aws.s3.Bucket("logging", {bucket: "access-logging-bucket"});
 * const loggingBucketPolicy = pulumi.all([logging.arn, current]).apply(([arn, current]) => aws.iam.getPolicyDocumentOutput({
 *     statements: [{
 *         principals: [{
 *             identifiers: ["logging.s3.amazonaws.com"],
 *             type: "Service",
 *         }],
 *         actions: ["s3:PutObject"],
 *         resources: [`${arn}/*`],
 *         conditions: [{
 *             test: "StringEquals",
 *             variable: "aws:SourceAccount",
 *             values: [current.accountId],
 *         }],
 *     }],
 * }));
 * const loggingBucketPolicy2 = new aws.s3.BucketPolicy("logging", {
 *     bucket: logging.bucket,
 *     policy: loggingBucketPolicy.apply(loggingBucketPolicy => loggingBucketPolicy.json),
 * });
 * const example = new aws.s3.Bucket("example", {bucket: "example-bucket"});
 * const exampleBucketLogging = new aws.s3.BucketLogging("example", {
 *     bucket: example.bucket,
 *     targetBucket: logging.bucket,
 *     targetPrefix: "log/",
 *     targetObjectKeyFormat: {
 *         partitionedPrefix: {
 *             partitionDateSource: "EventTime",
 *         },
 *     },
 * });
 * ```
 *
 * ### Grant permission by using bucket ACL
 *
 * The [AWS Documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/enable-server-access-logging.html) does not recommend using the ACL.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.s3.Bucket("example", {bucket: "my-tf-example-bucket"});
 * const exampleBucketAcl = new aws.s3.BucketAcl("example", {
 *     bucket: example.id,
 *     acl: "private",
 * });
 * const logBucket = new aws.s3.Bucket("log_bucket", {bucket: "my-tf-log-bucket"});
 * const logBucketAcl = new aws.s3.BucketAcl("log_bucket_acl", {
 *     bucket: logBucket.id,
 *     acl: "log-delivery-write",
 * });
 * const exampleBucketLogging = new aws.s3.BucketLogging("example", {
 *     bucket: example.id,
 *     targetBucket: logBucket.id,
 *     targetPrefix: "log/",
 * });
 * ```
 *
 * ## Import
 *
 * If the owner (account ID) of the source bucket differs from the account used to configure the AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
 *
 * __Using `pulumi import` to import__ S3 bucket logging using the `bucket` or using the `bucket` and `expected_bucket_owner` separated by a comma (`,`). For example:
 *
 * If the owner (account ID) of the source bucket is the same account used to configure the AWS Provider, import using the `bucket`:
 *
 * ```sh
 * $ pulumi import aws:s3/bucketLoggingV2:BucketLoggingV2 example bucket-name
 * ```
 * If the owner (account ID) of the source bucket differs from the account used to configure the AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
 *
 * ```sh
 * $ pulumi import aws:s3/bucketLoggingV2:BucketLoggingV2 example bucket-name,123456789012
 * ```
 *
 * @deprecated aws.s3/bucketloggingv2.BucketLoggingV2 has been deprecated in favor of aws.s3/bucketlogging.BucketLogging
 */
class BucketLoggingV2 extends pulumi.CustomResource {
    /**
     * Get an existing BucketLoggingV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        pulumi.log.warn("BucketLoggingV2 is deprecated: aws.s3/bucketloggingv2.BucketLoggingV2 has been deprecated in favor of aws.s3/bucketlogging.BucketLogging");
        return new BucketLoggingV2(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of BucketLoggingV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketLoggingV2.__pulumiType;
    }
    /** @deprecated aws.s3/bucketloggingv2.BucketLoggingV2 has been deprecated in favor of aws.s3/bucketlogging.BucketLogging */
    constructor(name, argsOrState, opts) {
        pulumi.log.warn("BucketLoggingV2 is deprecated: aws.s3/bucketloggingv2.BucketLoggingV2 has been deprecated in favor of aws.s3/bucketlogging.BucketLogging");
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["bucket"] = state?.bucket;
            resourceInputs["expectedBucketOwner"] = state?.expectedBucketOwner;
            resourceInputs["region"] = state?.region;
            resourceInputs["targetBucket"] = state?.targetBucket;
            resourceInputs["targetGrants"] = state?.targetGrants;
            resourceInputs["targetObjectKeyFormat"] = state?.targetObjectKeyFormat;
            resourceInputs["targetPrefix"] = state?.targetPrefix;
        }
        else {
            const args = argsOrState;
            if (args?.bucket === undefined && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if (args?.targetBucket === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetBucket'");
            }
            if (args?.targetPrefix === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetPrefix'");
            }
            resourceInputs["bucket"] = args?.bucket;
            resourceInputs["expectedBucketOwner"] = args?.expectedBucketOwner;
            resourceInputs["region"] = args?.region;
            resourceInputs["targetBucket"] = args?.targetBucket;
            resourceInputs["targetGrants"] = args?.targetGrants;
            resourceInputs["targetObjectKeyFormat"] = args?.targetObjectKeyFormat;
            resourceInputs["targetPrefix"] = args?.targetPrefix;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "aws:s3/bucketLoggingV2:BucketLoggingV2" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(BucketLoggingV2.__pulumiType, name, resourceInputs, opts);
    }
}
exports.BucketLoggingV2 = BucketLoggingV2;
/** @internal */
BucketLoggingV2.__pulumiType = 'aws:s3/bucketLoggingV2:BucketLoggingV2';
//# sourceMappingURL=bucketLoggingV2.js.map