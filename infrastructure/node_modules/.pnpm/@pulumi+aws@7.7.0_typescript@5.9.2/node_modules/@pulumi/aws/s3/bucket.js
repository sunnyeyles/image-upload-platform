"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bucket = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a S3 bucket resource.
 *
 * > This resource provides functionality for managing S3 general purpose buckets in an AWS Partition. To manage Amazon S3 Express directory buckets, use the `awsDirectoryBucket` resource. To manage [S3 on Outposts](https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html), use the `aws.s3control.Bucket` resource.
 *
 * > Object Lock can be enabled by using the `objectLockEnable` attribute or by using the `aws.s3.BucketObjectLockConfiguration` resource. Please note, that by using the resource, Object Lock can be enabled/disabled without destroying and recreating the bucket.
 *
 * ## Example Usage
 *
 * ### Private Bucket With Tags
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.s3.Bucket("example", {
 *     bucket: "my-tf-test-bucket",
 *     tags: {
 *         Name: "My bucket",
 *         Environment: "Dev",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import S3 bucket using the `bucket`. For example:
 *
 * ```sh
 * $ pulumi import aws:s3/bucket:Bucket bucket bucket-name
 * ```
 */
class Bucket extends pulumi.CustomResource {
    /**
     * Get an existing Bucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Bucket(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Bucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Bucket.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accelerationStatus"] = state?.accelerationStatus;
            resourceInputs["acl"] = state?.acl;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["bucket"] = state?.bucket;
            resourceInputs["bucketDomainName"] = state?.bucketDomainName;
            resourceInputs["bucketPrefix"] = state?.bucketPrefix;
            resourceInputs["bucketRegion"] = state?.bucketRegion;
            resourceInputs["bucketRegionalDomainName"] = state?.bucketRegionalDomainName;
            resourceInputs["corsRules"] = state?.corsRules;
            resourceInputs["forceDestroy"] = state?.forceDestroy;
            resourceInputs["grants"] = state?.grants;
            resourceInputs["hostedZoneId"] = state?.hostedZoneId;
            resourceInputs["lifecycleRules"] = state?.lifecycleRules;
            resourceInputs["logging"] = state?.logging;
            resourceInputs["objectLockConfiguration"] = state?.objectLockConfiguration;
            resourceInputs["objectLockEnabled"] = state?.objectLockEnabled;
            resourceInputs["policy"] = state?.policy;
            resourceInputs["region"] = state?.region;
            resourceInputs["replicationConfiguration"] = state?.replicationConfiguration;
            resourceInputs["requestPayer"] = state?.requestPayer;
            resourceInputs["serverSideEncryptionConfiguration"] = state?.serverSideEncryptionConfiguration;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["versioning"] = state?.versioning;
            resourceInputs["website"] = state?.website;
            resourceInputs["websiteDomain"] = state?.websiteDomain;
            resourceInputs["websiteEndpoint"] = state?.websiteEndpoint;
        }
        else {
            const args = argsOrState;
            resourceInputs["accelerationStatus"] = args?.accelerationStatus;
            resourceInputs["acl"] = args?.acl;
            resourceInputs["bucket"] = args?.bucket;
            resourceInputs["bucketPrefix"] = args?.bucketPrefix;
            resourceInputs["corsRules"] = args?.corsRules;
            resourceInputs["forceDestroy"] = args?.forceDestroy;
            resourceInputs["grants"] = args?.grants;
            resourceInputs["lifecycleRules"] = args?.lifecycleRules;
            resourceInputs["logging"] = args?.logging;
            resourceInputs["objectLockConfiguration"] = args?.objectLockConfiguration;
            resourceInputs["objectLockEnabled"] = args?.objectLockEnabled;
            resourceInputs["policy"] = args?.policy;
            resourceInputs["region"] = args?.region;
            resourceInputs["replicationConfiguration"] = args?.replicationConfiguration;
            resourceInputs["requestPayer"] = args?.requestPayer;
            resourceInputs["serverSideEncryptionConfiguration"] = args?.serverSideEncryptionConfiguration;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["versioning"] = args?.versioning;
            resourceInputs["website"] = args?.website;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["bucketDomainName"] = undefined /*out*/;
            resourceInputs["bucketRegion"] = undefined /*out*/;
            resourceInputs["bucketRegionalDomainName"] = undefined /*out*/;
            resourceInputs["hostedZoneId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["websiteDomain"] = undefined /*out*/;
            resourceInputs["websiteEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "aws:s3/bucketV2:BucketV2" }, { type: "aws:s3/bucketV2:BucketV2" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Bucket.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Bucket = Bucket;
/** @internal */
Bucket.__pulumiType = 'aws:s3/bucket:Bucket';
//# sourceMappingURL=bucket.js.map