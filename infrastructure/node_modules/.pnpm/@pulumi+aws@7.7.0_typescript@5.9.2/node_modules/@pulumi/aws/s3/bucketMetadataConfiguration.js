"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.BucketMetadataConfiguration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages Amazon S3 Metadata for a bucket.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.s3.BucketMetadataConfiguration("example", {
 *     bucket: exampleAwsS3Bucket.bucket,
 *     metadataConfiguration: {
 *         inventoryTableConfiguration: {
 *             configurationState: "ENABLED",
 *         },
 *         journalTableConfiguration: {
 *             recordExpiration: {
 *                 days: 7,
 *                 expiration: "ENABLED",
 *             },
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * If the owner (account ID) of the source bucket differs from the account used to configure the Terraform AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
 *
 * __Using `pulumi import` to import__ S3 bucket metadata configuration using the `bucket` or using the `bucket` and `expected_bucket_owner` separated by a comma (`,`). For example:
 *
 * If the owner (account ID) of the source bucket is the same account used to configure the Terraform AWS Provider, import using the `bucket`:
 *
 * ```sh
 * $ pulumi import aws:s3/bucketMetadataConfiguration:BucketMetadataConfiguration example bucket-name
 * ```
 * If the owner (account ID) of the source bucket differs from the account used to configure the Terraform AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
 *
 * ```sh
 * $ pulumi import aws:s3/bucketMetadataConfiguration:BucketMetadataConfiguration example bucket-name,123456789012
 * ```
 */
class BucketMetadataConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing BucketMetadataConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new BucketMetadataConfiguration(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of BucketMetadataConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketMetadataConfiguration.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["bucket"] = state?.bucket;
            resourceInputs["expectedBucketOwner"] = state?.expectedBucketOwner;
            resourceInputs["metadataConfiguration"] = state?.metadataConfiguration;
            resourceInputs["region"] = state?.region;
            resourceInputs["timeouts"] = state?.timeouts;
        }
        else {
            const args = argsOrState;
            if (args?.bucket === undefined && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            resourceInputs["bucket"] = args?.bucket;
            resourceInputs["expectedBucketOwner"] = args?.expectedBucketOwner;
            resourceInputs["metadataConfiguration"] = args?.metadataConfiguration;
            resourceInputs["region"] = args?.region;
            resourceInputs["timeouts"] = args?.timeouts;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BucketMetadataConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}
exports.BucketMetadataConfiguration = BucketMetadataConfiguration;
/** @internal */
BucketMetadataConfiguration.__pulumiType = 'aws:s3/bucketMetadataConfiguration:BucketMetadataConfiguration';
//# sourceMappingURL=bucketMetadataConfiguration.js.map