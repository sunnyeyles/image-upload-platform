"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.BucketWebsiteConfigurationV2 = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an S3 bucket website configuration resource. For more information, see [Hosting Websites on S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html).
 *
 * > This resource cannot be used with S3 directory buckets.
 *
 * ## Example Usage
 *
 * ### With `routingRule` configured
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.s3.BucketWebsiteConfiguration("example", {
 *     bucket: exampleAwsS3Bucket.id,
 *     indexDocument: {
 *         suffix: "index.html",
 *     },
 *     errorDocument: {
 *         key: "error.html",
 *     },
 *     routingRules: [{
 *         condition: {
 *             keyPrefixEquals: "docs/",
 *         },
 *         redirect: {
 *             replaceKeyPrefixWith: "documents/",
 *         },
 *     }],
 * });
 * ```
 *
 * ### With `routingRules` configured
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.s3.BucketWebsiteConfiguration("example", {
 *     bucket: exampleAwsS3Bucket.id,
 *     indexDocument: {
 *         suffix: "index.html",
 *     },
 *     errorDocument: {
 *         key: "error.html",
 *     },
 *     routingRuleDetails: `[{
 *     "Condition": {
 *         "KeyPrefixEquals": "docs/"
 *     },
 *     "Redirect": {
 *         "ReplaceKeyPrefixWith": ""
 *     }
 * }]
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * If the owner (account ID) of the source bucket differs from the account used to configure the AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
 *
 * __Using `pulumi import` to import__ S3 bucket website configuration using the `bucket` or using the `bucket` and `expected_bucket_owner` separated by a comma (`,`). For example:
 *
 * If the owner (account ID) of the source bucket is the same account used to configure the AWS Provider, import using the `bucket`:
 *
 * ```sh
 * $ pulumi import aws:s3/bucketWebsiteConfigurationV2:BucketWebsiteConfigurationV2 example bucket-name
 * ```
 * If the owner (account ID) of the source bucket differs from the account used to configure the AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
 *
 * ```sh
 * $ pulumi import aws:s3/bucketWebsiteConfigurationV2:BucketWebsiteConfigurationV2 example bucket-name,123456789012
 * ```
 *
 * @deprecated aws.s3/bucketwebsiteconfigurationv2.BucketWebsiteConfigurationV2 has been deprecated in favor of aws.s3/bucketwebsiteconfiguration.BucketWebsiteConfiguration
 */
class BucketWebsiteConfigurationV2 extends pulumi.CustomResource {
    /**
     * Get an existing BucketWebsiteConfigurationV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        pulumi.log.warn("BucketWebsiteConfigurationV2 is deprecated: aws.s3/bucketwebsiteconfigurationv2.BucketWebsiteConfigurationV2 has been deprecated in favor of aws.s3/bucketwebsiteconfiguration.BucketWebsiteConfiguration");
        return new BucketWebsiteConfigurationV2(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of BucketWebsiteConfigurationV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketWebsiteConfigurationV2.__pulumiType;
    }
    /** @deprecated aws.s3/bucketwebsiteconfigurationv2.BucketWebsiteConfigurationV2 has been deprecated in favor of aws.s3/bucketwebsiteconfiguration.BucketWebsiteConfiguration */
    constructor(name, argsOrState, opts) {
        pulumi.log.warn("BucketWebsiteConfigurationV2 is deprecated: aws.s3/bucketwebsiteconfigurationv2.BucketWebsiteConfigurationV2 has been deprecated in favor of aws.s3/bucketwebsiteconfiguration.BucketWebsiteConfiguration");
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["bucket"] = state?.bucket;
            resourceInputs["errorDocument"] = state?.errorDocument;
            resourceInputs["expectedBucketOwner"] = state?.expectedBucketOwner;
            resourceInputs["indexDocument"] = state?.indexDocument;
            resourceInputs["redirectAllRequestsTo"] = state?.redirectAllRequestsTo;
            resourceInputs["region"] = state?.region;
            resourceInputs["routingRuleDetails"] = state?.routingRuleDetails;
            resourceInputs["routingRules"] = state?.routingRules;
            resourceInputs["websiteDomain"] = state?.websiteDomain;
            resourceInputs["websiteEndpoint"] = state?.websiteEndpoint;
        }
        else {
            const args = argsOrState;
            if (args?.bucket === undefined && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            resourceInputs["bucket"] = args?.bucket;
            resourceInputs["errorDocument"] = args?.errorDocument;
            resourceInputs["expectedBucketOwner"] = args?.expectedBucketOwner;
            resourceInputs["indexDocument"] = args?.indexDocument;
            resourceInputs["redirectAllRequestsTo"] = args?.redirectAllRequestsTo;
            resourceInputs["region"] = args?.region;
            resourceInputs["routingRuleDetails"] = args?.routingRuleDetails;
            resourceInputs["routingRules"] = args?.routingRules;
            resourceInputs["websiteDomain"] = undefined /*out*/;
            resourceInputs["websiteEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "aws:s3/bucketWebsiteConfigurationV2:BucketWebsiteConfigurationV2" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(BucketWebsiteConfigurationV2.__pulumiType, name, resourceInputs, opts);
    }
}
exports.BucketWebsiteConfigurationV2 = BucketWebsiteConfigurationV2;
/** @internal */
BucketWebsiteConfigurationV2.__pulumiType = 'aws:s3/bucketWebsiteConfigurationV2:BucketWebsiteConfigurationV2';
//# sourceMappingURL=bucketWebsiteConfigurationV2.js.map