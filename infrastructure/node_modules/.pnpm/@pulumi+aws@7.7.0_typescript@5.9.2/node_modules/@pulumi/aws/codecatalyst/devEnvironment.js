"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevEnvironment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS CodeCatalyst Dev Environment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.codecatalyst.DevEnvironment("test", {
 *     alias: "devenv",
 *     spaceName: "myspace",
 *     projectName: "myproject",
 *     instanceType: "dev.standard1.small",
 *     persistentStorage: {
 *         size: 16,
 *     },
 *     ides: {
 *         name: "PyCharm",
 *         runtime: "public.ecr.aws/jetbrains/py",
 *     },
 *     inactivityTimeoutMinutes: 40,
 *     repositories: [{
 *         repositoryName: "pulumi-provider-aws",
 *         branchName: "main",
 *     }],
 * });
 * ```
 */
class DevEnvironment extends pulumi.CustomResource {
    /**
     * Get an existing DevEnvironment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DevEnvironment(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of DevEnvironment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DevEnvironment.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["alias"] = state?.alias;
            resourceInputs["ides"] = state?.ides;
            resourceInputs["inactivityTimeoutMinutes"] = state?.inactivityTimeoutMinutes;
            resourceInputs["instanceType"] = state?.instanceType;
            resourceInputs["persistentStorage"] = state?.persistentStorage;
            resourceInputs["projectName"] = state?.projectName;
            resourceInputs["region"] = state?.region;
            resourceInputs["repositories"] = state?.repositories;
            resourceInputs["spaceName"] = state?.spaceName;
        }
        else {
            const args = argsOrState;
            if (args?.ides === undefined && !opts.urn) {
                throw new Error("Missing required property 'ides'");
            }
            if (args?.instanceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            if (args?.persistentStorage === undefined && !opts.urn) {
                throw new Error("Missing required property 'persistentStorage'");
            }
            if (args?.projectName === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            if (args?.spaceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'spaceName'");
            }
            resourceInputs["alias"] = args?.alias;
            resourceInputs["ides"] = args?.ides;
            resourceInputs["inactivityTimeoutMinutes"] = args?.inactivityTimeoutMinutes;
            resourceInputs["instanceType"] = args?.instanceType;
            resourceInputs["persistentStorage"] = args?.persistentStorage;
            resourceInputs["projectName"] = args?.projectName;
            resourceInputs["region"] = args?.region;
            resourceInputs["repositories"] = args?.repositories;
            resourceInputs["spaceName"] = args?.spaceName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DevEnvironment.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DevEnvironment = DevEnvironment;
/** @internal */
DevEnvironment.__pulumiType = 'aws:codecatalyst/devEnvironment:DevEnvironment';
//# sourceMappingURL=devEnvironment.js.map