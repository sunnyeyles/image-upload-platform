"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenIdConnectProvider = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an IAM OpenID Connect provider.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const _default = new aws.iam.OpenIdConnectProvider("default", {
 *     url: "https://accounts.google.com",
 *     clientIdLists: ["266362248691-342342xasdasdasda-apps.googleusercontent.com"],
 *     thumbprintLists: ["cf23df2207d99a74fbe169e3eba035e633b65d94"],
 * });
 * ```
 *
 * ### Without A Thumbprint
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const _default = new aws.iam.OpenIdConnectProvider("default", {
 *     url: "https://accounts.google.com",
 *     clientIdLists: ["266362248691-342342xasdasdasda-apps.googleusercontent.com"],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import IAM OpenID Connect Providers using the `arn`. For example:
 *
 * ```sh
 * $ pulumi import aws:iam/openIdConnectProvider:OpenIdConnectProvider default arn:aws:iam::123456789012:oidc-provider/accounts.google.com
 * ```
 */
class OpenIdConnectProvider extends pulumi.CustomResource {
    /**
     * Get an existing OpenIdConnectProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new OpenIdConnectProvider(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of OpenIdConnectProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OpenIdConnectProvider.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["clientIdLists"] = state?.clientIdLists;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["thumbprintLists"] = state?.thumbprintLists;
            resourceInputs["url"] = state?.url;
        }
        else {
            const args = argsOrState;
            if (args?.clientIdLists === undefined && !opts.urn) {
                throw new Error("Missing required property 'clientIdLists'");
            }
            if (args?.url === undefined && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["clientIdLists"] = args?.clientIdLists;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["thumbprintLists"] = args?.thumbprintLists;
            resourceInputs["url"] = args?.url;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OpenIdConnectProvider.__pulumiType, name, resourceInputs, opts);
    }
}
exports.OpenIdConnectProvider = OpenIdConnectProvider;
/** @internal */
OpenIdConnectProvider.__pulumiType = 'aws:iam/openIdConnectProvider:OpenIdConnectProvider';
//# sourceMappingURL=openIdConnectProvider.js.map