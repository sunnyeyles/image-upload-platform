"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Environment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS DataZone Environment.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.datazone.Environment("example", {
 *     name: "example",
 *     accountIdentifier: test.accountId,
 *     accountRegion: testAwsRegion.name,
 *     blueprintIdentifier: testAwsDatazoneEnvironmentBlueprintConfiguration.environmentBlueprintId,
 *     profileIdentifier: testAwsDatazoneEnvironmentProfile.id,
 *     projectIdentifier: testAwsDatazoneProject.id,
 *     domainIdentifier: testAwsDatazoneDomain.id,
 *     userParameters: [
 *         {
 *             name: "consumerGlueDbName",
 *             value: "consumer",
 *         },
 *         {
 *             name: "producerGlueDbName",
 *             value: "producer",
 *         },
 *         {
 *             name: "workgroupName",
 *             value: "workgroup",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import DataZone Environment using the `domain_idntifier,id`. For example:
 *
 * ```sh
 * $ pulumi import aws:datazone/environment:Environment example dzd_d2i7tzk3tnjjf4,5vpywijpwryec0
 * ```
 */
class Environment extends pulumi.CustomResource {
    /**
     * Get an existing Environment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Environment(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Environment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Environment.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountIdentifier"] = state?.accountIdentifier;
            resourceInputs["accountRegion"] = state?.accountRegion;
            resourceInputs["blueprintIdentifier"] = state?.blueprintIdentifier;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["createdBy"] = state?.createdBy;
            resourceInputs["description"] = state?.description;
            resourceInputs["domainIdentifier"] = state?.domainIdentifier;
            resourceInputs["glossaryTerms"] = state?.glossaryTerms;
            resourceInputs["lastDeployments"] = state?.lastDeployments;
            resourceInputs["name"] = state?.name;
            resourceInputs["profileIdentifier"] = state?.profileIdentifier;
            resourceInputs["projectIdentifier"] = state?.projectIdentifier;
            resourceInputs["providerEnvironment"] = state?.providerEnvironment;
            resourceInputs["provisionedResources"] = state?.provisionedResources;
            resourceInputs["region"] = state?.region;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["userParameters"] = state?.userParameters;
        }
        else {
            const args = argsOrState;
            if (args?.domainIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'domainIdentifier'");
            }
            if (args?.profileIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'profileIdentifier'");
            }
            if (args?.projectIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectIdentifier'");
            }
            resourceInputs["accountIdentifier"] = args?.accountIdentifier;
            resourceInputs["accountRegion"] = args?.accountRegion;
            resourceInputs["blueprintIdentifier"] = args?.blueprintIdentifier;
            resourceInputs["description"] = args?.description;
            resourceInputs["domainIdentifier"] = args?.domainIdentifier;
            resourceInputs["glossaryTerms"] = args?.glossaryTerms;
            resourceInputs["name"] = args?.name;
            resourceInputs["profileIdentifier"] = args?.profileIdentifier;
            resourceInputs["projectIdentifier"] = args?.projectIdentifier;
            resourceInputs["region"] = args?.region;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["userParameters"] = args?.userParameters;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["lastDeployments"] = undefined /*out*/;
            resourceInputs["providerEnvironment"] = undefined /*out*/;
            resourceInputs["provisionedResources"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Environment.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Environment = Environment;
/** @internal */
Environment.__pulumiType = 'aws:datazone/environment:Environment';
//# sourceMappingURL=environment.js.map