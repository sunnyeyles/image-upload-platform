"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Domain = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS DataZone Domain.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const domainExecutionRole = new aws.iam.Role("domain_execution_role", {
 *     name: "my_domain_execution_role",
 *     assumeRolePolicy: JSON.stringify({
 *         Version: "2012-10-17",
 *         Statement: [
 *             {
 *                 Action: [
 *                     "sts:AssumeRole",
 *                     "sts:TagSession",
 *                 ],
 *                 Effect: "Allow",
 *                 Principal: {
 *                     Service: "datazone.amazonaws.com",
 *                 },
 *             },
 *             {
 *                 Action: [
 *                     "sts:AssumeRole",
 *                     "sts:TagSession",
 *                 ],
 *                 Effect: "Allow",
 *                 Principal: {
 *                     Service: "cloudformation.amazonaws.com",
 *                 },
 *             },
 *         ],
 *     }),
 * });
 * const domainExecutionRoleRolePolicy = new aws.iam.RolePolicy("domain_execution_role", {
 *     role: domainExecutionRole.name,
 *     policy: JSON.stringify({
 *         Version: "2012-10-17",
 *         Statement: [{
 *             Action: [
 *                 "datazone:*",
 *                 "ram:*",
 *                 "sso:*",
 *                 "kms:*",
 *             ],
 *             Effect: "Allow",
 *             Resource: "*",
 *         }],
 *     }),
 * });
 * const example = new aws.datazone.Domain("example", {
 *     name: "example",
 *     domainExecutionRole: domainExecutionRole.arn,
 * });
 * ```
 *
 * ### V2 Domain
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getCallerIdentity({});
 * // IAM role for Domain Execution
 * const assumeRoleDomainExecution = current.then(current => aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: [
 *             "sts:AssumeRole",
 *             "sts:TagSession",
 *             "sts:SetContext",
 *         ],
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["datazone.amazonaws.com"],
 *         }],
 *         conditions: [
 *             {
 *                 test: "StringEquals",
 *                 values: [current.accountId],
 *                 variable: "aws:SourceAccount",
 *             },
 *             {
 *                 test: "ForAllValues:StringLike",
 *                 values: ["datazone*"],
 *                 variable: "aws:TagKeys",
 *             },
 *         ],
 *     }],
 * }));
 * const domainExecution = new aws.iam.Role("domain_execution", {
 *     assumeRolePolicy: assumeRoleDomainExecution.then(assumeRoleDomainExecution => assumeRoleDomainExecution.json),
 *     name: "example-domain-execution-role",
 * });
 * const domainExecutionRole = aws.iam.getPolicy({
 *     name: "SageMakerStudioDomainExecutionRolePolicy",
 * });
 * const domainExecutionRolePolicyAttachment = new aws.iam.RolePolicyAttachment("domain_execution", {
 *     policyArn: domainExecutionRole.then(domainExecutionRole => domainExecutionRole.arn),
 *     role: domainExecution.name,
 * });
 * // IAM role for Domain Service
 * const assumeRoleDomainService = current.then(current => aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: ["sts:AssumeRole"],
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["datazone.amazonaws.com"],
 *         }],
 *         conditions: [{
 *             test: "StringEquals",
 *             values: [current.accountId],
 *             variable: "aws:SourceAccount",
 *         }],
 *     }],
 * }));
 * const domainService = new aws.iam.Role("domain_service", {
 *     assumeRolePolicy: assumeRoleDomainService.then(assumeRoleDomainService => assumeRoleDomainService.json),
 *     name: "example-domain-service-role",
 * });
 * const domainServiceRole = aws.iam.getPolicy({
 *     name: "SageMakerStudioDomainServiceRolePolicy",
 * });
 * const domainServiceRolePolicyAttachment = new aws.iam.RolePolicyAttachment("domain_service", {
 *     policyArn: domainServiceRole.then(domainServiceRole => domainServiceRole.arn),
 *     role: domainService.name,
 * });
 * // DataZone Domain V2
 * const example = new aws.datazone.Domain("example", {
 *     name: "example-domain",
 *     domainExecutionRole: domainExecution.arn,
 *     domainVersion: "V2",
 *     serviceRole: domainService.arn,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import DataZone Domain using the `domain_id`. For example:
 *
 * ```sh
 * $ pulumi import aws:datazone/domain:Domain example domain-id-12345678
 * ```
 */
class Domain extends pulumi.CustomResource {
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Domain(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Domain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domain.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["description"] = state?.description;
            resourceInputs["domainExecutionRole"] = state?.domainExecutionRole;
            resourceInputs["domainVersion"] = state?.domainVersion;
            resourceInputs["kmsKeyIdentifier"] = state?.kmsKeyIdentifier;
            resourceInputs["name"] = state?.name;
            resourceInputs["portalUrl"] = state?.portalUrl;
            resourceInputs["region"] = state?.region;
            resourceInputs["serviceRole"] = state?.serviceRole;
            resourceInputs["singleSignOn"] = state?.singleSignOn;
            resourceInputs["skipDeletionCheck"] = state?.skipDeletionCheck;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["timeouts"] = state?.timeouts;
        }
        else {
            const args = argsOrState;
            if (args?.domainExecutionRole === undefined && !opts.urn) {
                throw new Error("Missing required property 'domainExecutionRole'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["domainExecutionRole"] = args?.domainExecutionRole;
            resourceInputs["domainVersion"] = args?.domainVersion;
            resourceInputs["kmsKeyIdentifier"] = args?.kmsKeyIdentifier;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["serviceRole"] = args?.serviceRole;
            resourceInputs["singleSignOn"] = args?.singleSignOn;
            resourceInputs["skipDeletionCheck"] = args?.skipDeletionCheck;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["portalUrl"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Domain.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Domain = Domain;
/** @internal */
Domain.__pulumiType = 'aws:datazone/domain:Domain';
//# sourceMappingURL=domain.js.map