"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormType = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS DataZone Form Type.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const domainExecutionRole = new aws.iam.Role("domain_execution_role", {
 *     name: "example-role",
 *     assumeRolePolicy: JSON.stringify({
 *         Version: "2012-10-17",
 *         Statement: [
 *             {
 *                 Action: [
 *                     "sts:AssumeRole",
 *                     "sts:TagSession",
 *                 ],
 *                 Effect: "Allow",
 *                 Principal: {
 *                     Service: "datazone.amazonaws.com",
 *                 },
 *             },
 *             {
 *                 Action: [
 *                     "sts:AssumeRole",
 *                     "sts:TagSession",
 *                 ],
 *                 Effect: "Allow",
 *                 Principal: {
 *                     Service: "cloudformation.amazonaws.com",
 *                 },
 *             },
 *         ],
 *     }),
 *     inlinePolicies: [{
 *         name: "example-policy",
 *         policy: JSON.stringify({
 *             Version: "2012-10-17",
 *             Statement: [{
 *                 Action: [
 *                     "datazone:*",
 *                     "ram:*",
 *                     "sso:*",
 *                     "kms:*",
 *                 ],
 *                 Effect: "Allow",
 *                 Resource: "*",
 *             }],
 *         }),
 *     }],
 * });
 * const test = new aws.datazone.Domain("test", {
 *     name: "example",
 *     domainExecutionRole: domainExecutionRole.arn,
 * });
 * const testSecurityGroup = new aws.ec2.SecurityGroup("test", {name: "example"});
 * const testProject = new aws.datazone.Project("test", {
 *     domainIdentifier: test.id,
 *     glossaryTerms: ["2N8w6XJCwZf"],
 *     name: "example name",
 *     description: "desc",
 *     skipDeletionCheck: true,
 * });
 * const testFormType = new aws.datazone.FormType("test", {
 *     description: "desc",
 *     name: "SageMakerModelFormType",
 *     domainIdentifier: test.id,
 *     owningProjectIdentifier: testProject.id,
 *     status: "DISABLED",
 *     model: {
 *         smithy: `\x09structure SageMakerModelFormType {
 * \x09\x09\x09@required
 * \x09\x09\x09@amazon.datazone#searchable
 * \x09\x09\x09modelName: String
 *
 * \x09\x09\x09@required
 * \x09\x09\x09modelArn: String
 *
 * \x09\x09\x09@required
 * \x09\x09\x09creationTime: String
 * \x09\x09\x09}
 * `,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import DataZone Form Type using a comma separated value of `domain_identifier`,`name`,`revision`. For example:
 *
 * ```sh
 * $ pulumi import aws:datazone/formType:FormType example domain_identifier,name,revision
 * ```
 */
class FormType extends pulumi.CustomResource {
    /**
     * Get an existing FormType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FormType(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of FormType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FormType.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["createdBy"] = state?.createdBy;
            resourceInputs["description"] = state?.description;
            resourceInputs["domainIdentifier"] = state?.domainIdentifier;
            resourceInputs["imports"] = state?.imports;
            resourceInputs["model"] = state?.model;
            resourceInputs["name"] = state?.name;
            resourceInputs["originDomainId"] = state?.originDomainId;
            resourceInputs["originProjectId"] = state?.originProjectId;
            resourceInputs["owningProjectIdentifier"] = state?.owningProjectIdentifier;
            resourceInputs["region"] = state?.region;
            resourceInputs["revision"] = state?.revision;
            resourceInputs["status"] = state?.status;
            resourceInputs["timeouts"] = state?.timeouts;
        }
        else {
            const args = argsOrState;
            if (args?.domainIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'domainIdentifier'");
            }
            if (args?.owningProjectIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'owningProjectIdentifier'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["domainIdentifier"] = args?.domainIdentifier;
            resourceInputs["model"] = args?.model;
            resourceInputs["name"] = args?.name;
            resourceInputs["owningProjectIdentifier"] = args?.owningProjectIdentifier;
            resourceInputs["region"] = args?.region;
            resourceInputs["status"] = args?.status;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["imports"] = undefined /*out*/;
            resourceInputs["originDomainId"] = undefined /*out*/;
            resourceInputs["originProjectId"] = undefined /*out*/;
            resourceInputs["revision"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FormType.__pulumiType, name, resourceInputs, opts);
    }
}
exports.FormType = FormType;
/** @internal */
FormType.__pulumiType = 'aws:datazone/formType:FormType';
//# sourceMappingURL=formType.js.map