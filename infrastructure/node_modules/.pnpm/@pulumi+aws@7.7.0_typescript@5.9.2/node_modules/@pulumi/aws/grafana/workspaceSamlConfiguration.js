"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspaceSamlConfiguration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an Amazon Managed Grafana workspace SAML configuration resource.
 *
 * ## Example Usage
 *
 * ### Basic configuration
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const assume = new aws.iam.Role("assume", {
 *     name: "grafana-assume",
 *     assumeRolePolicy: JSON.stringify({
 *         Version: "2012-10-17",
 *         Statement: [{
 *             Action: "sts:AssumeRole",
 *             Effect: "Allow",
 *             Sid: "",
 *             Principal: {
 *                 Service: "grafana.amazonaws.com",
 *             },
 *         }],
 *     }),
 * });
 * const exampleWorkspace = new aws.grafana.Workspace("example", {
 *     accountAccessType: "CURRENT_ACCOUNT",
 *     authenticationProviders: ["SAML"],
 *     permissionType: "SERVICE_MANAGED",
 *     roleArn: assume.arn,
 * });
 * const example = new aws.grafana.WorkspaceSamlConfiguration("example", {
 *     editorRoleValues: ["editor"],
 *     idpMetadataUrl: "https://my_idp_metadata.url",
 *     workspaceId: exampleWorkspace.id,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Grafana Workspace SAML configuration using the workspace's `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:grafana/workspaceSamlConfiguration:WorkspaceSamlConfiguration example g-2054c75a02
 * ```
 */
class WorkspaceSamlConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing WorkspaceSamlConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new WorkspaceSamlConfiguration(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of WorkspaceSamlConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkspaceSamlConfiguration.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["adminRoleValues"] = state?.adminRoleValues;
            resourceInputs["allowedOrganizations"] = state?.allowedOrganizations;
            resourceInputs["editorRoleValues"] = state?.editorRoleValues;
            resourceInputs["emailAssertion"] = state?.emailAssertion;
            resourceInputs["groupsAssertion"] = state?.groupsAssertion;
            resourceInputs["idpMetadataUrl"] = state?.idpMetadataUrl;
            resourceInputs["idpMetadataXml"] = state?.idpMetadataXml;
            resourceInputs["loginAssertion"] = state?.loginAssertion;
            resourceInputs["loginValidityDuration"] = state?.loginValidityDuration;
            resourceInputs["nameAssertion"] = state?.nameAssertion;
            resourceInputs["orgAssertion"] = state?.orgAssertion;
            resourceInputs["region"] = state?.region;
            resourceInputs["roleAssertion"] = state?.roleAssertion;
            resourceInputs["status"] = state?.status;
            resourceInputs["workspaceId"] = state?.workspaceId;
        }
        else {
            const args = argsOrState;
            if (args?.editorRoleValues === undefined && !opts.urn) {
                throw new Error("Missing required property 'editorRoleValues'");
            }
            if (args?.workspaceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["adminRoleValues"] = args?.adminRoleValues;
            resourceInputs["allowedOrganizations"] = args?.allowedOrganizations;
            resourceInputs["editorRoleValues"] = args?.editorRoleValues;
            resourceInputs["emailAssertion"] = args?.emailAssertion;
            resourceInputs["groupsAssertion"] = args?.groupsAssertion;
            resourceInputs["idpMetadataUrl"] = args?.idpMetadataUrl;
            resourceInputs["idpMetadataXml"] = args?.idpMetadataXml;
            resourceInputs["loginAssertion"] = args?.loginAssertion;
            resourceInputs["loginValidityDuration"] = args?.loginValidityDuration;
            resourceInputs["nameAssertion"] = args?.nameAssertion;
            resourceInputs["orgAssertion"] = args?.orgAssertion;
            resourceInputs["region"] = args?.region;
            resourceInputs["roleAssertion"] = args?.roleAssertion;
            resourceInputs["workspaceId"] = args?.workspaceId;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkspaceSamlConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}
exports.WorkspaceSamlConfiguration = WorkspaceSamlConfiguration;
/** @internal */
WorkspaceSamlConfiguration.__pulumiType = 'aws:grafana/workspaceSamlConfiguration:WorkspaceSamlConfiguration';
//# sourceMappingURL=workspaceSamlConfiguration.js.map