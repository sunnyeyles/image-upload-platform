"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an ElastiCache user group resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.elasticache.User("test", {
 *     userId: "testUserId",
 *     userName: "default",
 *     accessString: "on ~app::* -@all +@read +@hash +@bitmap +@geo -setbit -bitfield -hset -hsetnx -hmset -hincrby -hincrbyfloat -hdel -bitop -geoadd -georadius -georadiusbymember",
 *     engine: "redis",
 *     passwords: ["password123456789"],
 * });
 * const testUserGroup = new aws.elasticache.UserGroup("test", {
 *     engine: "redis",
 *     userGroupId: "userGroupId",
 *     userIds: [test.userId],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import ElastiCache user groups using the `user_group_id`. For example:
 *
 * ```sh
 * $ pulumi import aws:elasticache/userGroup:UserGroup my_user_group userGoupId1
 * ```
 */
class UserGroup extends pulumi.CustomResource {
    /**
     * Get an existing UserGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new UserGroup(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of UserGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserGroup.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["engine"] = state?.engine;
            resourceInputs["region"] = state?.region;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["userGroupId"] = state?.userGroupId;
            resourceInputs["userIds"] = state?.userIds;
        }
        else {
            const args = argsOrState;
            if (args?.engine === undefined && !opts.urn) {
                throw new Error("Missing required property 'engine'");
            }
            if (args?.userGroupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'userGroupId'");
            }
            resourceInputs["engine"] = args?.engine;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["userGroupId"] = args?.userGroupId;
            resourceInputs["userIds"] = args?.userIds;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserGroup.__pulumiType, name, resourceInputs, opts);
    }
}
exports.UserGroup = UserGroup;
/** @internal */
UserGroup.__pulumiType = 'aws:elasticache/userGroup:UserGroup';
//# sourceMappingURL=userGroup.js.map