"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RateBasedRule = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a WAF Rate Based Rule Resource
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const ipset = new aws.waf.IpSet("ipset", {
 *     name: "tfIPSet",
 *     ipSetDescriptors: [{
 *         type: "IPV4",
 *         value: "192.0.7.0/24",
 *     }],
 * });
 * const wafrule = new aws.waf.RateBasedRule("wafrule", {
 *     name: "tfWAFRule",
 *     metricName: "tfWAFRule",
 *     rateKey: "IP",
 *     rateLimit: 100,
 *     predicates: [{
 *         dataId: ipset.id,
 *         negated: false,
 *         type: "IPMatch",
 *     }],
 * }, {
 *     dependsOn: [ipset],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import WAF Rated Based Rule using the id. For example:
 *
 * ```sh
 * $ pulumi import aws:waf/rateBasedRule:RateBasedRule wafrule a1b2c3d4-d5f6-7777-8888-9999aaaabbbbcccc
 * ```
 */
class RateBasedRule extends pulumi.CustomResource {
    /**
     * Get an existing RateBasedRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RateBasedRule(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of RateBasedRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RateBasedRule.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["metricName"] = state?.metricName;
            resourceInputs["name"] = state?.name;
            resourceInputs["predicates"] = state?.predicates;
            resourceInputs["rateKey"] = state?.rateKey;
            resourceInputs["rateLimit"] = state?.rateLimit;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
        }
        else {
            const args = argsOrState;
            if (args?.metricName === undefined && !opts.urn) {
                throw new Error("Missing required property 'metricName'");
            }
            if (args?.rateKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'rateKey'");
            }
            if (args?.rateLimit === undefined && !opts.urn) {
                throw new Error("Missing required property 'rateLimit'");
            }
            resourceInputs["metricName"] = args?.metricName;
            resourceInputs["name"] = args?.name;
            resourceInputs["predicates"] = args?.predicates;
            resourceInputs["rateKey"] = args?.rateKey;
            resourceInputs["rateLimit"] = args?.rateLimit;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RateBasedRule.__pulumiType, name, resourceInputs, opts);
    }
}
exports.RateBasedRule = RateBasedRule;
/** @internal */
RateBasedRule.__pulumiType = 'aws:waf/rateBasedRule:RateBasedRule';
//# sourceMappingURL=rateBasedRule.js.map