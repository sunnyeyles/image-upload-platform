"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Policy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS Verified Permissions Policy.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.verifiedpermissions.Policy("test", {
 *     policyStoreId: testAwsVerifiedpermissionsPolicyStore.id,
 *     definition: {
 *         static: {
 *             statement: "permit (principal, action == Action::\"view\", resource in Album:: \"test_album\");",
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Verified Permissions Policy using the `policy_id,policy_store_id`. For example:
 *
 * ```sh
 * $ pulumi import aws:verifiedpermissions/policy:Policy example policy-id-12345678,policy-store-id-12345678
 * ```
 */
class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Policy(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["createdDate"] = state?.createdDate;
            resourceInputs["definition"] = state?.definition;
            resourceInputs["policyId"] = state?.policyId;
            resourceInputs["policyStoreId"] = state?.policyStoreId;
            resourceInputs["region"] = state?.region;
        }
        else {
            const args = argsOrState;
            if (args?.policyStoreId === undefined && !opts.urn) {
                throw new Error("Missing required property 'policyStoreId'");
            }
            resourceInputs["definition"] = args?.definition;
            resourceInputs["policyStoreId"] = args?.policyStoreId;
            resourceInputs["region"] = args?.region;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["policyId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Policy = Policy;
/** @internal */
Policy.__pulumiType = 'aws:verifiedpermissions/policy:Policy';
//# sourceMappingURL=policy.js.map