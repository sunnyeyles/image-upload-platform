"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Assessment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS Audit Manager Assessment.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.auditmanager.Assessment("test", {
 *     name: "example",
 *     assessmentReportsDestination: {
 *         destination: `s3://${testAwsS3Bucket.id}`,
 *         destinationType: "S3",
 *     },
 *     frameworkId: testAwsAuditmanagerFramework.id,
 *     roles: [{
 *         roleArn: testAwsIamRole.arn,
 *         roleType: "PROCESS_OWNER",
 *     }],
 *     scope: {
 *         awsAccounts: [{
 *             id: current.accountId,
 *         }],
 *         awsServices: [{
 *             serviceName: "S3",
 *         }],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Audit Manager Assessments using the assessment `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:auditmanager/assessment:Assessment example abc123-de45
 * ```
 */
class Assessment extends pulumi.CustomResource {
    /**
     * Get an existing Assessment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Assessment(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Assessment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Assessment.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["assessmentReportsDestination"] = state?.assessmentReportsDestination;
            resourceInputs["description"] = state?.description;
            resourceInputs["frameworkId"] = state?.frameworkId;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["roles"] = state?.roles;
            resourceInputs["rolesAlls"] = state?.rolesAlls;
            resourceInputs["scope"] = state?.scope;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
        }
        else {
            const args = argsOrState;
            if (args?.frameworkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'frameworkId'");
            }
            resourceInputs["assessmentReportsDestination"] = args?.assessmentReportsDestination;
            resourceInputs["description"] = args?.description;
            resourceInputs["frameworkId"] = args?.frameworkId;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["roles"] = args?.roles;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["rolesAlls"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Assessment.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Assessment = Assessment;
/** @internal */
Assessment.__pulumiType = 'aws:auditmanager/assessment:Assessment';
//# sourceMappingURL=assessment.js.map