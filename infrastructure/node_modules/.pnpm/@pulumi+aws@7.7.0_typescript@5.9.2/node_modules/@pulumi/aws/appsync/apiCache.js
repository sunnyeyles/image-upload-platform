"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiCache = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an AppSync API Cache.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.appsync.GraphQLApi("example", {
 *     authenticationType: "API_KEY",
 *     name: "example",
 * });
 * const exampleApiCache = new aws.appsync.ApiCache("example", {
 *     apiId: example.id,
 *     apiCachingBehavior: "FULL_REQUEST_CACHING",
 *     type: "LARGE",
 *     ttl: 900,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_appsync_api_cache` using the AppSync API ID. For example:
 *
 * ```sh
 * $ pulumi import aws:appsync/apiCache:ApiCache example xxxxx
 * ```
 */
class ApiCache extends pulumi.CustomResource {
    /**
     * Get an existing ApiCache resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ApiCache(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of ApiCache.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiCache.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["apiCachingBehavior"] = state?.apiCachingBehavior;
            resourceInputs["apiId"] = state?.apiId;
            resourceInputs["atRestEncryptionEnabled"] = state?.atRestEncryptionEnabled;
            resourceInputs["region"] = state?.region;
            resourceInputs["transitEncryptionEnabled"] = state?.transitEncryptionEnabled;
            resourceInputs["ttl"] = state?.ttl;
            resourceInputs["type"] = state?.type;
        }
        else {
            const args = argsOrState;
            if (args?.apiCachingBehavior === undefined && !opts.urn) {
                throw new Error("Missing required property 'apiCachingBehavior'");
            }
            if (args?.apiId === undefined && !opts.urn) {
                throw new Error("Missing required property 'apiId'");
            }
            if (args?.ttl === undefined && !opts.urn) {
                throw new Error("Missing required property 'ttl'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["apiCachingBehavior"] = args?.apiCachingBehavior;
            resourceInputs["apiId"] = args?.apiId;
            resourceInputs["atRestEncryptionEnabled"] = args?.atRestEncryptionEnabled;
            resourceInputs["region"] = args?.region;
            resourceInputs["transitEncryptionEnabled"] = args?.transitEncryptionEnabled;
            resourceInputs["ttl"] = args?.ttl;
            resourceInputs["type"] = args?.type;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiCache.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ApiCache = ApiCache;
/** @internal */
ApiCache.__pulumiType = 'aws:appsync/apiCache:ApiCache';
//# sourceMappingURL=apiCache.js.map