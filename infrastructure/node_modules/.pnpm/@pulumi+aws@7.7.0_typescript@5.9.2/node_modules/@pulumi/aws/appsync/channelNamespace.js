"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelNamespace = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an [AWS AppSync Channel Namespace](https://docs.aws.amazon.com/appsync/latest/eventapi/event-api-concepts.html#namespace).
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.appsync.ChannelNamespace("example", {
 *     name: "example-channel-namespace",
 *     apiId: exampleAwsAppsyncApi.apiId,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import AppSync Channel Namespace using the `api_id` and `name` separated by a comma (`,`). For example:
 *
 * ```sh
 * $ pulumi import aws:appsync/channelNamespace:ChannelNamespace example example-api-id,example-channel-namespace
 * ```
 */
class ChannelNamespace extends pulumi.CustomResource {
    /**
     * Get an existing ChannelNamespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ChannelNamespace(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of ChannelNamespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ChannelNamespace.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["apiId"] = state?.apiId;
            resourceInputs["channelNamespaceArn"] = state?.channelNamespaceArn;
            resourceInputs["codeHandlers"] = state?.codeHandlers;
            resourceInputs["handlerConfigs"] = state?.handlerConfigs;
            resourceInputs["name"] = state?.name;
            resourceInputs["publishAuthModes"] = state?.publishAuthModes;
            resourceInputs["region"] = state?.region;
            resourceInputs["subscribeAuthModes"] = state?.subscribeAuthModes;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
        }
        else {
            const args = argsOrState;
            if (args?.apiId === undefined && !opts.urn) {
                throw new Error("Missing required property 'apiId'");
            }
            resourceInputs["apiId"] = args?.apiId;
            resourceInputs["codeHandlers"] = args?.codeHandlers;
            resourceInputs["handlerConfigs"] = args?.handlerConfigs;
            resourceInputs["name"] = args?.name;
            resourceInputs["publishAuthModes"] = args?.publishAuthModes;
            resourceInputs["region"] = args?.region;
            resourceInputs["subscribeAuthModes"] = args?.subscribeAuthModes;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["channelNamespaceArn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ChannelNamespace.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ChannelNamespace = ChannelNamespace;
/** @internal */
ChannelNamespace.__pulumiType = 'aws:appsync/channelNamespace:ChannelNamespace';
//# sourceMappingURL=channelNamespace.js.map