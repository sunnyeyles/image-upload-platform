"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Workflow = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS EC2 Image Builder Workflow.
 *
 * > Image Builder manages the workflows for the distribution stage. Therefore, using the DISTRIBUTION workflow type results in an error.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.imagebuilder.Workflow("example", {
 *     name: "example",
 *     version: "1.0.0",
 *     type: "TEST",
 *     data: `name: example
 * description: Workflow to test an image
 * schemaVersion: 1.0
 *
 * parameters:
 *   - name: waitForActionAtEnd
 *     type: boolean
 *
 * steps:
 *   - name: LaunchTestInstance
 *     action: LaunchInstance
 *     onFailure: Abort
 *     inputs:
 *       waitFor: "ssmAgent"
 *
 *   - name: TerminateTestInstance
 *     action: TerminateInstance
 *     onFailure: Continue
 *     inputs:
 *       instanceId.: ".stepOutputs.LaunchTestInstance.instanceId"
 *
 *   - name: WaitForActionAtEnd
 *     action: WaitForAction
 *     if:
 *       booleanEquals: true
 *       value: ".parameters.waitForActionAtEnd"
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import EC2 Image Builder Workflow using the `arn`. For example:
 *
 * ```sh
 * $ pulumi import aws:imagebuilder/workflow:Workflow example arn:aws:imagebuilder:us-east-1:aws:workflow/test/example/1.0.1/1
 * ```
 * Certain resource arguments, such as `uri`, cannot be read via the API and imported into Terraform. Terraform will display a difference for these arguments the first run after import if declared in the Terraform configuration for an imported resource.
 */
class Workflow extends pulumi.CustomResource {
    /**
     * Get an existing Workflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Workflow(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Workflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workflow.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["changeDescription"] = state?.changeDescription;
            resourceInputs["data"] = state?.data;
            resourceInputs["dateCreated"] = state?.dateCreated;
            resourceInputs["description"] = state?.description;
            resourceInputs["kmsKeyId"] = state?.kmsKeyId;
            resourceInputs["name"] = state?.name;
            resourceInputs["owner"] = state?.owner;
            resourceInputs["region"] = state?.region;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["type"] = state?.type;
            resourceInputs["uri"] = state?.uri;
            resourceInputs["version"] = state?.version;
        }
        else {
            const args = argsOrState;
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if (args?.version === undefined && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["changeDescription"] = args?.changeDescription;
            resourceInputs["data"] = args?.data;
            resourceInputs["description"] = args?.description;
            resourceInputs["kmsKeyId"] = args?.kmsKeyId;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["type"] = args?.type;
            resourceInputs["uri"] = args?.uri;
            resourceInputs["version"] = args?.version;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Workflow.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Workflow = Workflow;
/** @internal */
Workflow.__pulumiType = 'aws:imagebuilder/workflow:Workflow';
//# sourceMappingURL=workflow.js.map