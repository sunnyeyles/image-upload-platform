"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Image = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Image Builder Image.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.imagebuilder.Image("example", {
 *     distributionConfigurationArn: exampleAwsImagebuilderDistributionConfiguration.arn,
 *     imageRecipeArn: exampleAwsImagebuilderImageRecipe.arn,
 *     infrastructureConfigurationArn: exampleAwsImagebuilderInfrastructureConfiguration.arn,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_imagebuilder_image` resources using the Amazon Resource Name (ARN). For example:
 *
 * ```sh
 * $ pulumi import aws:imagebuilder/image:Image example arn:aws:imagebuilder:us-east-1:123456789012:image/example/1.0.0/1
 * ```
 */
class Image extends pulumi.CustomResource {
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Image(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Image.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["containerRecipeArn"] = state?.containerRecipeArn;
            resourceInputs["dateCreated"] = state?.dateCreated;
            resourceInputs["distributionConfigurationArn"] = state?.distributionConfigurationArn;
            resourceInputs["enhancedImageMetadataEnabled"] = state?.enhancedImageMetadataEnabled;
            resourceInputs["executionRole"] = state?.executionRole;
            resourceInputs["imageRecipeArn"] = state?.imageRecipeArn;
            resourceInputs["imageScanningConfiguration"] = state?.imageScanningConfiguration;
            resourceInputs["imageTestsConfiguration"] = state?.imageTestsConfiguration;
            resourceInputs["infrastructureConfigurationArn"] = state?.infrastructureConfigurationArn;
            resourceInputs["name"] = state?.name;
            resourceInputs["osVersion"] = state?.osVersion;
            resourceInputs["outputResources"] = state?.outputResources;
            resourceInputs["platform"] = state?.platform;
            resourceInputs["region"] = state?.region;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["version"] = state?.version;
            resourceInputs["workflows"] = state?.workflows;
        }
        else {
            const args = argsOrState;
            if (args?.infrastructureConfigurationArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'infrastructureConfigurationArn'");
            }
            resourceInputs["containerRecipeArn"] = args?.containerRecipeArn;
            resourceInputs["distributionConfigurationArn"] = args?.distributionConfigurationArn;
            resourceInputs["enhancedImageMetadataEnabled"] = args?.enhancedImageMetadataEnabled;
            resourceInputs["executionRole"] = args?.executionRole;
            resourceInputs["imageRecipeArn"] = args?.imageRecipeArn;
            resourceInputs["imageScanningConfiguration"] = args?.imageScanningConfiguration;
            resourceInputs["imageTestsConfiguration"] = args?.imageTestsConfiguration;
            resourceInputs["infrastructureConfigurationArn"] = args?.infrastructureConfigurationArn;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["workflows"] = args?.workflows;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["osVersion"] = undefined /*out*/;
            resourceInputs["outputResources"] = undefined /*out*/;
            resourceInputs["platform"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Image.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Image = Image;
/** @internal */
Image.__pulumiType = 'aws:imagebuilder/image:Image';
//# sourceMappingURL=image.js.map