"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.InfrastructureConfiguration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Image Builder Infrastructure Configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.imagebuilder.InfrastructureConfiguration("example", {
 *     description: "example description",
 *     instanceProfileName: exampleAwsIamInstanceProfile.name,
 *     instanceTypes: [
 *         "t2.nano",
 *         "t3.micro",
 *     ],
 *     keyPair: exampleAwsKeyPair.keyName,
 *     name: "example",
 *     securityGroupIds: [exampleAwsSecurityGroup.id],
 *     snsTopicArn: exampleAwsSnsTopic.arn,
 *     subnetId: main.id,
 *     terminateInstanceOnFailure: true,
 *     logging: {
 *         s3Logs: {
 *             s3BucketName: exampleAwsS3Bucket.bucket,
 *             s3KeyPrefix: "logs",
 *         },
 *     },
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_imagebuilder_infrastructure_configuration` using the Amazon Resource Name (ARN). For example:
 *
 * ```sh
 * $ pulumi import aws:imagebuilder/infrastructureConfiguration:InfrastructureConfiguration example arn:aws:imagebuilder:us-east-1:123456789012:infrastructure-configuration/example
 * ```
 */
class InfrastructureConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing InfrastructureConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new InfrastructureConfiguration(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of InfrastructureConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InfrastructureConfiguration.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["dateCreated"] = state?.dateCreated;
            resourceInputs["dateUpdated"] = state?.dateUpdated;
            resourceInputs["description"] = state?.description;
            resourceInputs["instanceMetadataOptions"] = state?.instanceMetadataOptions;
            resourceInputs["instanceProfileName"] = state?.instanceProfileName;
            resourceInputs["instanceTypes"] = state?.instanceTypes;
            resourceInputs["keyPair"] = state?.keyPair;
            resourceInputs["logging"] = state?.logging;
            resourceInputs["name"] = state?.name;
            resourceInputs["placement"] = state?.placement;
            resourceInputs["region"] = state?.region;
            resourceInputs["resourceTags"] = state?.resourceTags;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["snsTopicArn"] = state?.snsTopicArn;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["terminateInstanceOnFailure"] = state?.terminateInstanceOnFailure;
        }
        else {
            const args = argsOrState;
            if (args?.instanceProfileName === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceProfileName'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["instanceMetadataOptions"] = args?.instanceMetadataOptions;
            resourceInputs["instanceProfileName"] = args?.instanceProfileName;
            resourceInputs["instanceTypes"] = args?.instanceTypes;
            resourceInputs["keyPair"] = args?.keyPair;
            resourceInputs["logging"] = args?.logging;
            resourceInputs["name"] = args?.name;
            resourceInputs["placement"] = args?.placement;
            resourceInputs["region"] = args?.region;
            resourceInputs["resourceTags"] = args?.resourceTags;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["snsTopicArn"] = args?.snsTopicArn;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["terminateInstanceOnFailure"] = args?.terminateInstanceOnFailure;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["dateUpdated"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InfrastructureConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}
exports.InfrastructureConfiguration = InfrastructureConfiguration;
/** @internal */
InfrastructureConfiguration.__pulumiType = 'aws:imagebuilder/infrastructureConfiguration:InfrastructureConfiguration';
//# sourceMappingURL=infrastructureConfiguration.js.map