"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImagePipeline = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Image Builder Image Pipeline.
 *
 * > **NOTE:** Starting with version `5.74.0`, lifecycle meta-argument `replaceTriggeredBy` must be used in order to prevent a dependency error on destroy.
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_imagebuilder_image_pipeline` resources using the Amazon Resource Name (ARN). For example:
 *
 * ```sh
 * $ pulumi import aws:imagebuilder/imagePipeline:ImagePipeline example arn:aws:imagebuilder:us-east-1:123456789012:image-pipeline/example
 * ```
 */
class ImagePipeline extends pulumi.CustomResource {
    /**
     * Get an existing ImagePipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ImagePipeline(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of ImagePipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImagePipeline.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["containerRecipeArn"] = state?.containerRecipeArn;
            resourceInputs["dateCreated"] = state?.dateCreated;
            resourceInputs["dateLastRun"] = state?.dateLastRun;
            resourceInputs["dateNextRun"] = state?.dateNextRun;
            resourceInputs["dateUpdated"] = state?.dateUpdated;
            resourceInputs["description"] = state?.description;
            resourceInputs["distributionConfigurationArn"] = state?.distributionConfigurationArn;
            resourceInputs["enhancedImageMetadataEnabled"] = state?.enhancedImageMetadataEnabled;
            resourceInputs["executionRole"] = state?.executionRole;
            resourceInputs["imageRecipeArn"] = state?.imageRecipeArn;
            resourceInputs["imageScanningConfiguration"] = state?.imageScanningConfiguration;
            resourceInputs["imageTestsConfiguration"] = state?.imageTestsConfiguration;
            resourceInputs["infrastructureConfigurationArn"] = state?.infrastructureConfigurationArn;
            resourceInputs["name"] = state?.name;
            resourceInputs["platform"] = state?.platform;
            resourceInputs["region"] = state?.region;
            resourceInputs["schedule"] = state?.schedule;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["workflows"] = state?.workflows;
        }
        else {
            const args = argsOrState;
            if (args?.infrastructureConfigurationArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'infrastructureConfigurationArn'");
            }
            resourceInputs["containerRecipeArn"] = args?.containerRecipeArn;
            resourceInputs["description"] = args?.description;
            resourceInputs["distributionConfigurationArn"] = args?.distributionConfigurationArn;
            resourceInputs["enhancedImageMetadataEnabled"] = args?.enhancedImageMetadataEnabled;
            resourceInputs["executionRole"] = args?.executionRole;
            resourceInputs["imageRecipeArn"] = args?.imageRecipeArn;
            resourceInputs["imageScanningConfiguration"] = args?.imageScanningConfiguration;
            resourceInputs["imageTestsConfiguration"] = args?.imageTestsConfiguration;
            resourceInputs["infrastructureConfigurationArn"] = args?.infrastructureConfigurationArn;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["schedule"] = args?.schedule;
            resourceInputs["status"] = args?.status;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["workflows"] = args?.workflows;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["dateLastRun"] = undefined /*out*/;
            resourceInputs["dateNextRun"] = undefined /*out*/;
            resourceInputs["dateUpdated"] = undefined /*out*/;
            resourceInputs["platform"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImagePipeline.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ImagePipeline = ImagePipeline;
/** @internal */
ImagePipeline.__pulumiType = 'aws:imagebuilder/imagePipeline:ImagePipeline';
//# sourceMappingURL=imagePipeline.js.map