"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Application = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a ApplicationInsights Application resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleGroup = new aws.resourcegroups.Group("example", {
 *     name: "example",
 *     resourceQuery: {
 *         query: JSON.stringify({
 *             ResourceTypeFilters: ["AWS::EC2::Instance"],
 *             TagFilters: [{
 *                 Key: "Stage",
 *                 Values: ["Test"],
 *             }],
 *         }),
 *     },
 * });
 * const example = new aws.applicationinsights.Application("example", {resourceGroupName: exampleGroup.name});
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import ApplicationInsights Applications using the `resource_group_name`. For example:
 *
 * ```sh
 * $ pulumi import aws:applicationinsights/application:Application some some-application
 * ```
 */
class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Application(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["autoConfigEnabled"] = state?.autoConfigEnabled;
            resourceInputs["autoCreate"] = state?.autoCreate;
            resourceInputs["cweMonitorEnabled"] = state?.cweMonitorEnabled;
            resourceInputs["groupingType"] = state?.groupingType;
            resourceInputs["opsCenterEnabled"] = state?.opsCenterEnabled;
            resourceInputs["opsItemSnsTopicArn"] = state?.opsItemSnsTopicArn;
            resourceInputs["region"] = state?.region;
            resourceInputs["resourceGroupName"] = state?.resourceGroupName;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
        }
        else {
            const args = argsOrState;
            if (args?.resourceGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["autoConfigEnabled"] = args?.autoConfigEnabled;
            resourceInputs["autoCreate"] = args?.autoCreate;
            resourceInputs["cweMonitorEnabled"] = args?.cweMonitorEnabled;
            resourceInputs["groupingType"] = args?.groupingType;
            resourceInputs["opsCenterEnabled"] = args?.opsCenterEnabled;
            resourceInputs["opsItemSnsTopicArn"] = args?.opsItemSnsTopicArn;
            resourceInputs["region"] = args?.region;
            resourceInputs["resourceGroupName"] = args?.resourceGroupName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Application.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Application = Application;
/** @internal */
Application.__pulumiType = 'aws:applicationinsights/application:Application';
//# sourceMappingURL=application.js.map