"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocationFsxOntapFileSystem = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS DataSync Location FSx Ontap File System.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_datasync_location_fsx_ontap_file_system` using the `DataSync-ARN#FSx-ontap-svm-ARN`. For example:
 *
 * ```sh
 * $ pulumi import aws:datasync/locationFsxOntapFileSystem:LocationFsxOntapFileSystem example arn:aws:datasync:us-west-2:123456789012:location/loc-12345678901234567#arn:aws:fsx:us-west-2:123456789012:storage-virtual-machine/svm-12345678abcdef123
 * ```
 */
class LocationFsxOntapFileSystem extends pulumi.CustomResource {
    /**
     * Get an existing LocationFsxOntapFileSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LocationFsxOntapFileSystem(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of LocationFsxOntapFileSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LocationFsxOntapFileSystem.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["creationTime"] = state?.creationTime;
            resourceInputs["fsxFilesystemArn"] = state?.fsxFilesystemArn;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["region"] = state?.region;
            resourceInputs["securityGroupArns"] = state?.securityGroupArns;
            resourceInputs["storageVirtualMachineArn"] = state?.storageVirtualMachineArn;
            resourceInputs["subdirectory"] = state?.subdirectory;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["uri"] = state?.uri;
        }
        else {
            const args = argsOrState;
            if (args?.protocol === undefined && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if (args?.securityGroupArns === undefined && !opts.urn) {
                throw new Error("Missing required property 'securityGroupArns'");
            }
            if (args?.storageVirtualMachineArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageVirtualMachineArn'");
            }
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["region"] = args?.region;
            resourceInputs["securityGroupArns"] = args?.securityGroupArns;
            resourceInputs["storageVirtualMachineArn"] = args?.storageVirtualMachineArn;
            resourceInputs["subdirectory"] = args?.subdirectory;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["fsxFilesystemArn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LocationFsxOntapFileSystem.__pulumiType, name, resourceInputs, opts);
    }
}
exports.LocationFsxOntapFileSystem = LocationFsxOntapFileSystem;
/** @internal */
LocationFsxOntapFileSystem.__pulumiType = 'aws:datasync/locationFsxOntapFileSystem:LocationFsxOntapFileSystem';
//# sourceMappingURL=locationFsxOntapFileSystem.js.map