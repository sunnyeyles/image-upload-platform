"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocationFsxLustre = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an AWS DataSync FSx Lustre Location.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.datasync.LocationFsxLustre("example", {
 *     fsxFilesystemArn: exampleAwsFsxLustreFileSystem.arn,
 *     securityGroupArns: [exampleAwsSecurityGroup.arn],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_datasync_location_fsx_lustre_file_system` using the `DataSync-ARN#FSx-Lustre-ARN`. For example:
 *
 * ```sh
 * $ pulumi import aws:datasync/locationFsxLustre:LocationFsxLustre example arn:aws:datasync:us-west-2:123456789012:location/loc-12345678901234567#arn:aws:fsx:us-west-2:476956259333:file-system/fs-08e04cd442c1bb94a
 * ```
 */
class LocationFsxLustre extends pulumi.CustomResource {
    /**
     * Get an existing LocationFsxLustre resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LocationFsxLustre(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of LocationFsxLustre.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LocationFsxLustre.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["creationTime"] = state?.creationTime;
            resourceInputs["fsxFilesystemArn"] = state?.fsxFilesystemArn;
            resourceInputs["region"] = state?.region;
            resourceInputs["securityGroupArns"] = state?.securityGroupArns;
            resourceInputs["subdirectory"] = state?.subdirectory;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["uri"] = state?.uri;
        }
        else {
            const args = argsOrState;
            if (args?.fsxFilesystemArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'fsxFilesystemArn'");
            }
            if (args?.securityGroupArns === undefined && !opts.urn) {
                throw new Error("Missing required property 'securityGroupArns'");
            }
            resourceInputs["fsxFilesystemArn"] = args?.fsxFilesystemArn;
            resourceInputs["region"] = args?.region;
            resourceInputs["securityGroupArns"] = args?.securityGroupArns;
            resourceInputs["subdirectory"] = args?.subdirectory;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LocationFsxLustre.__pulumiType, name, resourceInputs, opts);
    }
}
exports.LocationFsxLustre = LocationFsxLustre;
/** @internal */
LocationFsxLustre.__pulumiType = 'aws:datasync/locationFsxLustre:LocationFsxLustre';
//# sourceMappingURL=locationFsxLustre.js.map