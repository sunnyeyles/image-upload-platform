"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocationHdfs = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an HDFS Location within AWS DataSync.
 *
 * > **NOTE:** The DataSync Agents must be available before creating this resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.datasync.LocationHdfs("example", {
 *     agentArns: [exampleAwsDatasyncAgent.arn],
 *     authenticationType: "SIMPLE",
 *     simpleUser: "example",
 *     nameNodes: [{
 *         hostname: exampleAwsInstance.privateDns,
 *         port: 80,
 *     }],
 * });
 * ```
 *
 * ### Kerberos Authentication
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as std from "@pulumi/std";
 *
 * const example = new aws.datasync.LocationHdfs("example", {
 *     agentArns: [exampleAwsDatasyncAgent.arn],
 *     authenticationType: "KERBEROS",
 *     nameNodes: [{
 *         hostname: exampleAwsInstance.privateDns,
 *         port: 80,
 *     }],
 *     kerberosPrincipal: "user@example.com",
 *     kerberosKeytabBase64: std.filebase64({
 *         input: "user.keytab",
 *     }).then(invoke => invoke.result),
 *     kerberosKrb5Conf: std.file({
 *         input: "krb5.conf",
 *     }).then(invoke => invoke.result),
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_datasync_location_hdfs` using the Amazon Resource Name (ARN). For example:
 *
 * ```sh
 * $ pulumi import aws:datasync/locationHdfs:LocationHdfs example arn:aws:datasync:us-east-1:123456789012:location/loc-12345678901234567
 * ```
 */
class LocationHdfs extends pulumi.CustomResource {
    /**
     * Get an existing LocationHdfs resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LocationHdfs(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of LocationHdfs.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LocationHdfs.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["agentArns"] = state?.agentArns;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["authenticationType"] = state?.authenticationType;
            resourceInputs["blockSize"] = state?.blockSize;
            resourceInputs["kerberosKeytab"] = state?.kerberosKeytab;
            resourceInputs["kerberosKeytabBase64"] = state?.kerberosKeytabBase64;
            resourceInputs["kerberosKrb5Conf"] = state?.kerberosKrb5Conf;
            resourceInputs["kerberosKrb5ConfBase64"] = state?.kerberosKrb5ConfBase64;
            resourceInputs["kerberosPrincipal"] = state?.kerberosPrincipal;
            resourceInputs["kmsKeyProviderUri"] = state?.kmsKeyProviderUri;
            resourceInputs["nameNodes"] = state?.nameNodes;
            resourceInputs["qopConfiguration"] = state?.qopConfiguration;
            resourceInputs["region"] = state?.region;
            resourceInputs["replicationFactor"] = state?.replicationFactor;
            resourceInputs["simpleUser"] = state?.simpleUser;
            resourceInputs["subdirectory"] = state?.subdirectory;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["uri"] = state?.uri;
        }
        else {
            const args = argsOrState;
            if (args?.agentArns === undefined && !opts.urn) {
                throw new Error("Missing required property 'agentArns'");
            }
            if (args?.nameNodes === undefined && !opts.urn) {
                throw new Error("Missing required property 'nameNodes'");
            }
            resourceInputs["agentArns"] = args?.agentArns;
            resourceInputs["authenticationType"] = args?.authenticationType;
            resourceInputs["blockSize"] = args?.blockSize;
            resourceInputs["kerberosKeytab"] = args?.kerberosKeytab;
            resourceInputs["kerberosKeytabBase64"] = args?.kerberosKeytabBase64;
            resourceInputs["kerberosKrb5Conf"] = args?.kerberosKrb5Conf;
            resourceInputs["kerberosKrb5ConfBase64"] = args?.kerberosKrb5ConfBase64;
            resourceInputs["kerberosPrincipal"] = args?.kerberosPrincipal;
            resourceInputs["kmsKeyProviderUri"] = args?.kmsKeyProviderUri;
            resourceInputs["nameNodes"] = args?.nameNodes;
            resourceInputs["qopConfiguration"] = args?.qopConfiguration;
            resourceInputs["region"] = args?.region;
            resourceInputs["replicationFactor"] = args?.replicationFactor;
            resourceInputs["simpleUser"] = args?.simpleUser;
            resourceInputs["subdirectory"] = args?.subdirectory;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LocationHdfs.__pulumiType, name, resourceInputs, opts);
    }
}
exports.LocationHdfs = LocationHdfs;
/** @internal */
LocationHdfs.__pulumiType = 'aws:datasync/locationHdfs:LocationHdfs';
//# sourceMappingURL=locationHdfs.js.map