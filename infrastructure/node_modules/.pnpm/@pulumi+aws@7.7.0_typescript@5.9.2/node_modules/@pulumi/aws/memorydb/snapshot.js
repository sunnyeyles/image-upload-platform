"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Snapshot = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a MemoryDB Snapshot.
 *
 * More information about snapshot and restore can be found in the [MemoryDB User Guide](https://docs.aws.amazon.com/memorydb/latest/devguide/snapshots.html).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.memorydb.Snapshot("example", {
 *     clusterName: exampleAwsMemorydbCluster.name,
 *     name: "my-snapshot",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import a snapshot using the `name`. For example:
 *
 * ```sh
 * $ pulumi import aws:memorydb/snapshot:Snapshot example my-snapshot
 * ```
 */
class Snapshot extends pulumi.CustomResource {
    /**
     * Get an existing Snapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Snapshot(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Snapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Snapshot.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["clusterConfigurations"] = state?.clusterConfigurations;
            resourceInputs["clusterName"] = state?.clusterName;
            resourceInputs["kmsKeyArn"] = state?.kmsKeyArn;
            resourceInputs["name"] = state?.name;
            resourceInputs["namePrefix"] = state?.namePrefix;
            resourceInputs["region"] = state?.region;
            resourceInputs["source"] = state?.source;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
        }
        else {
            const args = argsOrState;
            if (args?.clusterName === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            resourceInputs["clusterName"] = args?.clusterName;
            resourceInputs["kmsKeyArn"] = args?.kmsKeyArn;
            resourceInputs["name"] = args?.name;
            resourceInputs["namePrefix"] = args?.namePrefix;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["clusterConfigurations"] = undefined /*out*/;
            resourceInputs["source"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Snapshot.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Snapshot = Snapshot;
/** @internal */
Snapshot.__pulumiType = 'aws:memorydb/snapshot:Snapshot';
//# sourceMappingURL=snapshot.js.map