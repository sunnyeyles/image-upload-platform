"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a MemoryDB Cluster.
 *
 * More information about MemoryDB can be found in the [Developer Guide](https://docs.aws.amazon.com/memorydb/latest/devguide/what-is-memorydb-for-redis.html).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.memorydb.Cluster("example", {
 *     aclName: "open-access",
 *     name: "my-cluster",
 *     nodeType: "db.t4g.small",
 *     engine: "redis",
 *     engineVersion: "7.1",
 *     numShards: 2,
 *     securityGroupIds: [exampleAwsSecurityGroup.id],
 *     snapshotRetentionLimit: 7,
 *     subnetGroupName: exampleAwsMemorydbSubnetGroup.id,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import a cluster using the `name`. For example:
 *
 * ```sh
 * $ pulumi import aws:memorydb/cluster:Cluster example my-cluster
 * ```
 */
class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Cluster(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["aclName"] = state?.aclName;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["autoMinorVersionUpgrade"] = state?.autoMinorVersionUpgrade;
            resourceInputs["clusterEndpoints"] = state?.clusterEndpoints;
            resourceInputs["dataTiering"] = state?.dataTiering;
            resourceInputs["description"] = state?.description;
            resourceInputs["engine"] = state?.engine;
            resourceInputs["enginePatchVersion"] = state?.enginePatchVersion;
            resourceInputs["engineVersion"] = state?.engineVersion;
            resourceInputs["finalSnapshotName"] = state?.finalSnapshotName;
            resourceInputs["kmsKeyArn"] = state?.kmsKeyArn;
            resourceInputs["maintenanceWindow"] = state?.maintenanceWindow;
            resourceInputs["multiRegionClusterName"] = state?.multiRegionClusterName;
            resourceInputs["name"] = state?.name;
            resourceInputs["namePrefix"] = state?.namePrefix;
            resourceInputs["nodeType"] = state?.nodeType;
            resourceInputs["numReplicasPerShard"] = state?.numReplicasPerShard;
            resourceInputs["numShards"] = state?.numShards;
            resourceInputs["parameterGroupName"] = state?.parameterGroupName;
            resourceInputs["port"] = state?.port;
            resourceInputs["region"] = state?.region;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["shards"] = state?.shards;
            resourceInputs["snapshotArns"] = state?.snapshotArns;
            resourceInputs["snapshotName"] = state?.snapshotName;
            resourceInputs["snapshotRetentionLimit"] = state?.snapshotRetentionLimit;
            resourceInputs["snapshotWindow"] = state?.snapshotWindow;
            resourceInputs["snsTopicArn"] = state?.snsTopicArn;
            resourceInputs["subnetGroupName"] = state?.subnetGroupName;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["tlsEnabled"] = state?.tlsEnabled;
        }
        else {
            const args = argsOrState;
            if (args?.aclName === undefined && !opts.urn) {
                throw new Error("Missing required property 'aclName'");
            }
            if (args?.nodeType === undefined && !opts.urn) {
                throw new Error("Missing required property 'nodeType'");
            }
            resourceInputs["aclName"] = args?.aclName;
            resourceInputs["autoMinorVersionUpgrade"] = args?.autoMinorVersionUpgrade;
            resourceInputs["dataTiering"] = args?.dataTiering;
            resourceInputs["description"] = args?.description;
            resourceInputs["engine"] = args?.engine;
            resourceInputs["engineVersion"] = args?.engineVersion;
            resourceInputs["finalSnapshotName"] = args?.finalSnapshotName;
            resourceInputs["kmsKeyArn"] = args?.kmsKeyArn;
            resourceInputs["maintenanceWindow"] = args?.maintenanceWindow;
            resourceInputs["multiRegionClusterName"] = args?.multiRegionClusterName;
            resourceInputs["name"] = args?.name;
            resourceInputs["namePrefix"] = args?.namePrefix;
            resourceInputs["nodeType"] = args?.nodeType;
            resourceInputs["numReplicasPerShard"] = args?.numReplicasPerShard;
            resourceInputs["numShards"] = args?.numShards;
            resourceInputs["parameterGroupName"] = args?.parameterGroupName;
            resourceInputs["port"] = args?.port;
            resourceInputs["region"] = args?.region;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["snapshotArns"] = args?.snapshotArns;
            resourceInputs["snapshotName"] = args?.snapshotName;
            resourceInputs["snapshotRetentionLimit"] = args?.snapshotRetentionLimit;
            resourceInputs["snapshotWindow"] = args?.snapshotWindow;
            resourceInputs["snsTopicArn"] = args?.snsTopicArn;
            resourceInputs["subnetGroupName"] = args?.subnetGroupName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["tlsEnabled"] = args?.tlsEnabled;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["clusterEndpoints"] = undefined /*out*/;
            resourceInputs["enginePatchVersion"] = undefined /*out*/;
            resourceInputs["shards"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Cluster = Cluster;
/** @internal */
Cluster.__pulumiType = 'aws:memorydb/cluster:Cluster';
//# sourceMappingURL=cluster.js.map