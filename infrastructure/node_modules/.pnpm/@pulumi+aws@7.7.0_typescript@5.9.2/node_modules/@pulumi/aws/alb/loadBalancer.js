"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadBalancer = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Load Balancer resource.
 *
 * > **Note:** `aws.alb.LoadBalancer` is known as `aws.lb.LoadBalancer`. The functionality is identical.
 *
 * ## Example Usage
 *
 * ### Application Load Balancer
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.lb.LoadBalancer("test", {
 *     name: "test-lb-tf",
 *     internal: false,
 *     loadBalancerType: "application",
 *     securityGroups: [lbSg.id],
 *     subnets: .map(subnet => (subnet.id)),
 *     enableDeletionProtection: true,
 *     accessLogs: {
 *         bucket: lbLogs.id,
 *         prefix: "test-lb",
 *         enabled: true,
 *     },
 *     tags: {
 *         Environment: "production",
 *     },
 * });
 * ```
 *
 * ### Network Load Balancer
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.lb.LoadBalancer("test", {
 *     name: "test-lb-tf",
 *     internal: false,
 *     loadBalancerType: "network",
 *     subnets: .map(subnet => (subnet.id)),
 *     enableDeletionProtection: true,
 *     tags: {
 *         Environment: "production",
 *     },
 * });
 * ```
 *
 * ### Specifying Elastic IPs
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lb.LoadBalancer("example", {
 *     name: "example",
 *     loadBalancerType: "network",
 *     subnetMappings: [
 *         {
 *             subnetId: example1AwsSubnet.id,
 *             allocationId: example1.id,
 *         },
 *         {
 *             subnetId: example2AwsSubnet.id,
 *             allocationId: example2.id,
 *         },
 *     ],
 * });
 * ```
 *
 * ### Specifying private IP addresses for an internal-facing load balancer
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lb.LoadBalancer("example", {
 *     name: "example",
 *     loadBalancerType: "network",
 *     subnetMappings: [
 *         {
 *             subnetId: example1.id,
 *             privateIpv4Address: "10.0.1.15",
 *         },
 *         {
 *             subnetId: example2.id,
 *             privateIpv4Address: "10.0.2.15",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import LBs using their ARN. For example:
 *
 * ```sh
 * $ pulumi import aws:alb/loadBalancer:LoadBalancer bar arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188
 * ```
 */
class LoadBalancer extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LoadBalancer(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of LoadBalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancer.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accessLogs"] = state?.accessLogs;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["arnSuffix"] = state?.arnSuffix;
            resourceInputs["clientKeepAlive"] = state?.clientKeepAlive;
            resourceInputs["connectionLogs"] = state?.connectionLogs;
            resourceInputs["customerOwnedIpv4Pool"] = state?.customerOwnedIpv4Pool;
            resourceInputs["desyncMitigationMode"] = state?.desyncMitigationMode;
            resourceInputs["dnsName"] = state?.dnsName;
            resourceInputs["dnsRecordClientRoutingPolicy"] = state?.dnsRecordClientRoutingPolicy;
            resourceInputs["dropInvalidHeaderFields"] = state?.dropInvalidHeaderFields;
            resourceInputs["enableCrossZoneLoadBalancing"] = state?.enableCrossZoneLoadBalancing;
            resourceInputs["enableDeletionProtection"] = state?.enableDeletionProtection;
            resourceInputs["enableHttp2"] = state?.enableHttp2;
            resourceInputs["enableTlsVersionAndCipherSuiteHeaders"] = state?.enableTlsVersionAndCipherSuiteHeaders;
            resourceInputs["enableWafFailOpen"] = state?.enableWafFailOpen;
            resourceInputs["enableXffClientPort"] = state?.enableXffClientPort;
            resourceInputs["enableZonalShift"] = state?.enableZonalShift;
            resourceInputs["enforceSecurityGroupInboundRulesOnPrivateLinkTraffic"] = state?.enforceSecurityGroupInboundRulesOnPrivateLinkTraffic;
            resourceInputs["idleTimeout"] = state?.idleTimeout;
            resourceInputs["internal"] = state?.internal;
            resourceInputs["ipAddressType"] = state?.ipAddressType;
            resourceInputs["ipamPools"] = state?.ipamPools;
            resourceInputs["loadBalancerType"] = state?.loadBalancerType;
            resourceInputs["minimumLoadBalancerCapacity"] = state?.minimumLoadBalancerCapacity;
            resourceInputs["name"] = state?.name;
            resourceInputs["namePrefix"] = state?.namePrefix;
            resourceInputs["preserveHostHeader"] = state?.preserveHostHeader;
            resourceInputs["region"] = state?.region;
            resourceInputs["secondaryIpsAutoAssignedPerSubnet"] = state?.secondaryIpsAutoAssignedPerSubnet;
            resourceInputs["securityGroups"] = state?.securityGroups;
            resourceInputs["subnetMappings"] = state?.subnetMappings;
            resourceInputs["subnets"] = state?.subnets;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["vpcId"] = state?.vpcId;
            resourceInputs["xffHeaderProcessingMode"] = state?.xffHeaderProcessingMode;
            resourceInputs["zoneId"] = state?.zoneId;
        }
        else {
            const args = argsOrState;
            resourceInputs["accessLogs"] = args?.accessLogs;
            resourceInputs["clientKeepAlive"] = args?.clientKeepAlive;
            resourceInputs["connectionLogs"] = args?.connectionLogs;
            resourceInputs["customerOwnedIpv4Pool"] = args?.customerOwnedIpv4Pool;
            resourceInputs["desyncMitigationMode"] = args?.desyncMitigationMode;
            resourceInputs["dnsRecordClientRoutingPolicy"] = args?.dnsRecordClientRoutingPolicy;
            resourceInputs["dropInvalidHeaderFields"] = args?.dropInvalidHeaderFields;
            resourceInputs["enableCrossZoneLoadBalancing"] = args?.enableCrossZoneLoadBalancing;
            resourceInputs["enableDeletionProtection"] = args?.enableDeletionProtection;
            resourceInputs["enableHttp2"] = args?.enableHttp2;
            resourceInputs["enableTlsVersionAndCipherSuiteHeaders"] = args?.enableTlsVersionAndCipherSuiteHeaders;
            resourceInputs["enableWafFailOpen"] = args?.enableWafFailOpen;
            resourceInputs["enableXffClientPort"] = args?.enableXffClientPort;
            resourceInputs["enableZonalShift"] = args?.enableZonalShift;
            resourceInputs["enforceSecurityGroupInboundRulesOnPrivateLinkTraffic"] = args?.enforceSecurityGroupInboundRulesOnPrivateLinkTraffic;
            resourceInputs["idleTimeout"] = args?.idleTimeout;
            resourceInputs["internal"] = args?.internal;
            resourceInputs["ipAddressType"] = args?.ipAddressType;
            resourceInputs["ipamPools"] = args?.ipamPools;
            resourceInputs["loadBalancerType"] = args?.loadBalancerType;
            resourceInputs["minimumLoadBalancerCapacity"] = args?.minimumLoadBalancerCapacity;
            resourceInputs["name"] = args?.name;
            resourceInputs["namePrefix"] = args?.namePrefix;
            resourceInputs["preserveHostHeader"] = args?.preserveHostHeader;
            resourceInputs["region"] = args?.region;
            resourceInputs["secondaryIpsAutoAssignedPerSubnet"] = args?.secondaryIpsAutoAssignedPerSubnet;
            resourceInputs["securityGroups"] = args?.securityGroups;
            resourceInputs["subnetMappings"] = args?.subnetMappings;
            resourceInputs["subnets"] = args?.subnets;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["xffHeaderProcessingMode"] = args?.xffHeaderProcessingMode;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["arnSuffix"] = undefined /*out*/;
            resourceInputs["dnsName"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
            resourceInputs["zoneId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "aws:applicationloadbalancing/loadBalancer:LoadBalancer" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(LoadBalancer.__pulumiType, name, resourceInputs, opts);
    }
}
exports.LoadBalancer = LoadBalancer;
/** @internal */
LoadBalancer.__pulumiType = 'aws:alb/loadBalancer:LoadBalancer';
//# sourceMappingURL=loadBalancer.js.map