"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Plan = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an AWS Backup plan resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.backup.Plan("example", {
 *     name: "my_example_backup_plan",
 *     rules: [{
 *         ruleName: "my_example_backup_rule",
 *         targetVaultName: test.name,
 *         schedule: "cron(0 12 * * ? *)",
 *         lifecycle: {
 *             deleteAfter: 14,
 *         },
 *     }],
 *     advancedBackupSettings: [{
 *         backupOptions: {
 *             WindowsVSS: "enabled",
 *         },
 *         resourceType: "EC2",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Backup Plan using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:backup/plan:Plan test <id>
 * ```
 */
class Plan extends pulumi.CustomResource {
    /**
     * Get an existing Plan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Plan(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Plan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Plan.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["advancedBackupSettings"] = state?.advancedBackupSettings;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["rules"] = state?.rules;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["version"] = state?.version;
        }
        else {
            const args = argsOrState;
            if (args?.rules === undefined && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["advancedBackupSettings"] = args?.advancedBackupSettings;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["rules"] = args?.rules;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Plan.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Plan = Plan;
/** @internal */
Plan.__pulumiType = 'aws:backup/plan:Plan';
//# sourceMappingURL=plan.js.map