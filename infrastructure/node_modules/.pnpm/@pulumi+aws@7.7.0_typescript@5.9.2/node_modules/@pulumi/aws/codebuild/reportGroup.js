"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a CodeBuild Report Groups Resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getCallerIdentity({});
 * const example = current.then(current => aws.iam.getPolicyDocument({
 *     statements: [{
 *         sid: "Enable IAM User Permissions",
 *         effect: "Allow",
 *         principals: [{
 *             type: "AWS",
 *             identifiers: [`arn:aws:iam::${current.accountId}:root`],
 *         }],
 *         actions: ["kms:*"],
 *         resources: ["*"],
 *     }],
 * }));
 * const exampleKey = new aws.kms.Key("example", {
 *     description: "my test kms key",
 *     deletionWindowInDays: 7,
 *     policy: example.then(example => example.json),
 * });
 * const exampleBucket = new aws.s3.Bucket("example", {bucket: "my-test"});
 * const exampleReportGroup = new aws.codebuild.ReportGroup("example", {
 *     name: "my test report group",
 *     type: "TEST",
 *     exportConfig: {
 *         type: "S3",
 *         s3Destination: {
 *             bucket: exampleBucket.id,
 *             encryptionDisabled: false,
 *             encryptionKey: exampleKey.arn,
 *             packaging: "NONE",
 *             path: "/some",
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import CodeBuild Report Group using the CodeBuild Report Group arn. For example:
 *
 * ```sh
 * $ pulumi import aws:codebuild/reportGroup:ReportGroup example arn:aws:codebuild:us-west-2:123456789:report-group/report-group-name
 * ```
 */
class ReportGroup extends pulumi.CustomResource {
    /**
     * Get an existing ReportGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ReportGroup(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of ReportGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReportGroup.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["created"] = state?.created;
            resourceInputs["deleteReports"] = state?.deleteReports;
            resourceInputs["exportConfig"] = state?.exportConfig;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["type"] = state?.type;
        }
        else {
            const args = argsOrState;
            if (args?.exportConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'exportConfig'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["deleteReports"] = args?.deleteReports;
            resourceInputs["exportConfig"] = args?.exportConfig;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["type"] = args?.type;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReportGroup.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ReportGroup = ReportGroup;
/** @internal */
ReportGroup.__pulumiType = 'aws:codebuild/reportGroup:ReportGroup';
//# sourceMappingURL=reportGroup.js.map