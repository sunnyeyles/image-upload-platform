"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProvisionedModelThroughput = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages [Provisioned Throughput](https://docs.aws.amazon.com/bedrock/latest/userguide/prov-throughput.html) for an Amazon Bedrock model.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.bedrock.ProvisionedModelThroughput("example", {
 *     provisionedModelName: "example-model",
 *     modelArn: "arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-v2",
 *     commitmentDuration: "SixMonths",
 *     modelUnits: 1,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Provisioned Throughput using the `provisioned_model_arn`. For example:
 *
 * ```sh
 * $ pulumi import aws:bedrock/provisionedModelThroughput:ProvisionedModelThroughput example arn:aws:bedrock:us-west-2:123456789012:provisioned-model/1y5n57gh5y2e
 * ```
 */
class ProvisionedModelThroughput extends pulumi.CustomResource {
    /**
     * Get an existing ProvisionedModelThroughput resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ProvisionedModelThroughput(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of ProvisionedModelThroughput.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProvisionedModelThroughput.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["commitmentDuration"] = state?.commitmentDuration;
            resourceInputs["modelArn"] = state?.modelArn;
            resourceInputs["modelUnits"] = state?.modelUnits;
            resourceInputs["provisionedModelArn"] = state?.provisionedModelArn;
            resourceInputs["provisionedModelName"] = state?.provisionedModelName;
            resourceInputs["region"] = state?.region;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["timeouts"] = state?.timeouts;
        }
        else {
            const args = argsOrState;
            if (args?.modelArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'modelArn'");
            }
            if (args?.modelUnits === undefined && !opts.urn) {
                throw new Error("Missing required property 'modelUnits'");
            }
            if (args?.provisionedModelName === undefined && !opts.urn) {
                throw new Error("Missing required property 'provisionedModelName'");
            }
            resourceInputs["commitmentDuration"] = args?.commitmentDuration;
            resourceInputs["modelArn"] = args?.modelArn;
            resourceInputs["modelUnits"] = args?.modelUnits;
            resourceInputs["provisionedModelName"] = args?.provisionedModelName;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["provisionedModelArn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProvisionedModelThroughput.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ProvisionedModelThroughput = ProvisionedModelThroughput;
/** @internal */
ProvisionedModelThroughput.__pulumiType = 'aws:bedrock/provisionedModelThroughput:ProvisionedModelThroughput';
//# sourceMappingURL=provisionedModelThroughput.js.map