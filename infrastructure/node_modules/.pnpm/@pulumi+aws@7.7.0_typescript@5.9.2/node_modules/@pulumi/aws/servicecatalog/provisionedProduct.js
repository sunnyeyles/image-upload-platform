"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProvisionedProduct = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * This resource provisions and manages a Service Catalog provisioned product.
 *
 * A provisioned product is a resourced instance of a product. For example, provisioning a product based on a CloudFormation template launches a CloudFormation stack and its underlying resources.
 *
 * Like this resource, the `awsServicecatalogRecord` data source also provides information about a provisioned product. Although a Service Catalog record provides some overlapping information with this resource, a record is tied to a provisioned product event, such as provisioning, termination, and updating.
 *
 * > **Tip:** If you include conflicted keys as tags, AWS will report an error, "Parameter validation failed: Missing required parameter in Tags[N]:Value".
 *
 * > **Tip:** A "provisioning artifact" is also referred to as a "version." A "distributor" is also referred to as a "vendor."
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.servicecatalog.ProvisionedProduct("example", {
 *     name: "example",
 *     productName: "Example product",
 *     provisioningArtifactName: "Example version",
 *     provisioningParameters: [{
 *         key: "foo",
 *         value: "bar",
 *     }],
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_servicecatalog_provisioned_product` using the provisioned product ID. For example:
 *
 * ```sh
 * $ pulumi import aws:servicecatalog/provisionedProduct:ProvisionedProduct example pp-dnigbtea24ste
 * ```
 */
class ProvisionedProduct extends pulumi.CustomResource {
    /**
     * Get an existing ProvisionedProduct resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ProvisionedProduct(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of ProvisionedProduct.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProvisionedProduct.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["acceptLanguage"] = state?.acceptLanguage;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["cloudwatchDashboardNames"] = state?.cloudwatchDashboardNames;
            resourceInputs["createdTime"] = state?.createdTime;
            resourceInputs["ignoreErrors"] = state?.ignoreErrors;
            resourceInputs["lastProvisioningRecordId"] = state?.lastProvisioningRecordId;
            resourceInputs["lastRecordId"] = state?.lastRecordId;
            resourceInputs["lastSuccessfulProvisioningRecordId"] = state?.lastSuccessfulProvisioningRecordId;
            resourceInputs["launchRoleArn"] = state?.launchRoleArn;
            resourceInputs["name"] = state?.name;
            resourceInputs["notificationArns"] = state?.notificationArns;
            resourceInputs["outputs"] = state?.outputs;
            resourceInputs["pathId"] = state?.pathId;
            resourceInputs["pathName"] = state?.pathName;
            resourceInputs["productId"] = state?.productId;
            resourceInputs["productName"] = state?.productName;
            resourceInputs["provisioningArtifactId"] = state?.provisioningArtifactId;
            resourceInputs["provisioningArtifactName"] = state?.provisioningArtifactName;
            resourceInputs["provisioningParameters"] = state?.provisioningParameters;
            resourceInputs["region"] = state?.region;
            resourceInputs["retainPhysicalResources"] = state?.retainPhysicalResources;
            resourceInputs["stackSetProvisioningPreferences"] = state?.stackSetProvisioningPreferences;
            resourceInputs["status"] = state?.status;
            resourceInputs["statusMessage"] = state?.statusMessage;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["type"] = state?.type;
        }
        else {
            const args = argsOrState;
            resourceInputs["acceptLanguage"] = args?.acceptLanguage;
            resourceInputs["ignoreErrors"] = args?.ignoreErrors;
            resourceInputs["name"] = args?.name;
            resourceInputs["notificationArns"] = args?.notificationArns;
            resourceInputs["pathId"] = args?.pathId;
            resourceInputs["pathName"] = args?.pathName;
            resourceInputs["productId"] = args?.productId;
            resourceInputs["productName"] = args?.productName;
            resourceInputs["provisioningArtifactId"] = args?.provisioningArtifactId;
            resourceInputs["provisioningArtifactName"] = args?.provisioningArtifactName;
            resourceInputs["provisioningParameters"] = args?.provisioningParameters;
            resourceInputs["region"] = args?.region;
            resourceInputs["retainPhysicalResources"] = args?.retainPhysicalResources;
            resourceInputs["stackSetProvisioningPreferences"] = args?.stackSetProvisioningPreferences;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["cloudwatchDashboardNames"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["lastProvisioningRecordId"] = undefined /*out*/;
            resourceInputs["lastRecordId"] = undefined /*out*/;
            resourceInputs["lastSuccessfulProvisioningRecordId"] = undefined /*out*/;
            resourceInputs["launchRoleArn"] = undefined /*out*/;
            resourceInputs["outputs"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusMessage"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProvisionedProduct.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ProvisionedProduct = ProvisionedProduct;
/** @internal */
ProvisionedProduct.__pulumiType = 'aws:servicecatalog/provisionedProduct:ProvisionedProduct';
//# sourceMappingURL=provisionedProduct.js.map