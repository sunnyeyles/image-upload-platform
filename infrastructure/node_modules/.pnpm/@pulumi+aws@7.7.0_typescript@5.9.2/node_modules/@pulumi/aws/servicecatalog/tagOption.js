"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TagOption = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Service Catalog Tag Option.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.servicecatalog.TagOption("example", {
 *     key: "nyckel",
 *     value: "v√§rde",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_servicecatalog_tag_option` using the tag option ID. For example:
 *
 * ```sh
 * $ pulumi import aws:servicecatalog/tagOption:TagOption example tag-pjtvagohlyo3m
 * ```
 */
class TagOption extends pulumi.CustomResource {
    /**
     * Get an existing TagOption resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TagOption(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of TagOption.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TagOption.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["active"] = state?.active;
            resourceInputs["key"] = state?.key;
            resourceInputs["owner"] = state?.owner;
            resourceInputs["region"] = state?.region;
            resourceInputs["value"] = state?.value;
        }
        else {
            const args = argsOrState;
            if (args?.key === undefined && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if (args?.value === undefined && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["active"] = args?.active;
            resourceInputs["key"] = args?.key;
            resourceInputs["region"] = args?.region;
            resourceInputs["value"] = args?.value;
            resourceInputs["owner"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TagOption.__pulumiType, name, resourceInputs, opts);
    }
}
exports.TagOption = TagOption;
/** @internal */
TagOption.__pulumiType = 'aws:servicecatalog/tagOption:TagOption';
//# sourceMappingURL=tagOption.js.map