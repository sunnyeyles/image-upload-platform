"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceAction = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Service Catalog self-service action.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.servicecatalog.ServiceAction("example", {
 *     description: "Motor generator unit",
 *     name: "MGU",
 *     definition: {
 *         name: "AWS-RestartEC2Instance",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `aws_servicecatalog_service_action` using the service action ID. For example:
 *
 * ```sh
 * $ pulumi import aws:servicecatalog/serviceAction:ServiceAction example act-f1w12eperfslh
 * ```
 */
class ServiceAction extends pulumi.CustomResource {
    /**
     * Get an existing ServiceAction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ServiceAction(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of ServiceAction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceAction.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["acceptLanguage"] = state?.acceptLanguage;
            resourceInputs["definition"] = state?.definition;
            resourceInputs["description"] = state?.description;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
        }
        else {
            const args = argsOrState;
            if (args?.definition === undefined && !opts.urn) {
                throw new Error("Missing required property 'definition'");
            }
            resourceInputs["acceptLanguage"] = args?.acceptLanguage;
            resourceInputs["definition"] = args?.definition;
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceAction.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ServiceAction = ServiceAction;
/** @internal */
ServiceAction.__pulumiType = 'aws:servicecatalog/serviceAction:ServiceAction';
//# sourceMappingURL=serviceAction.js.map