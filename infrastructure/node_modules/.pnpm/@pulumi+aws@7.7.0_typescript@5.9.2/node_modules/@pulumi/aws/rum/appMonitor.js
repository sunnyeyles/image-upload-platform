"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppMonitor = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a CloudWatch RUM App Monitor resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.rum.AppMonitor("example", {
 *     name: "example",
 *     domain: "localhost",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Cloudwatch RUM App Monitor using the `name`. For example:
 *
 * ```sh
 * $ pulumi import aws:rum/appMonitor:AppMonitor example example
 * ```
 */
class AppMonitor extends pulumi.CustomResource {
    /**
     * Get an existing AppMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AppMonitor(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of AppMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppMonitor.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["appMonitorConfiguration"] = state?.appMonitorConfiguration;
            resourceInputs["appMonitorId"] = state?.appMonitorId;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["customEvents"] = state?.customEvents;
            resourceInputs["cwLogEnabled"] = state?.cwLogEnabled;
            resourceInputs["cwLogGroup"] = state?.cwLogGroup;
            resourceInputs["domain"] = state?.domain;
            resourceInputs["domainLists"] = state?.domainLists;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
        }
        else {
            const args = argsOrState;
            resourceInputs["appMonitorConfiguration"] = args?.appMonitorConfiguration;
            resourceInputs["customEvents"] = args?.customEvents;
            resourceInputs["cwLogEnabled"] = args?.cwLogEnabled;
            resourceInputs["domain"] = args?.domain;
            resourceInputs["domainLists"] = args?.domainLists;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["appMonitorId"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["cwLogGroup"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppMonitor.__pulumiType, name, resourceInputs, opts);
    }
}
exports.AppMonitor = AppMonitor;
/** @internal */
AppMonitor.__pulumiType = 'aws:rum/appMonitor:AppMonitor';
//# sourceMappingURL=appMonitor.js.map