"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Route = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an AWS App Mesh route resource.
 *
 * ## Example Usage
 *
 * ### HTTP Routing
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const serviceb = new aws.appmesh.Route("serviceb", {
 *     name: "serviceB-route",
 *     meshName: simple.id,
 *     virtualRouterName: servicebAwsAppmeshVirtualRouter.name,
 *     spec: {
 *         httpRoute: {
 *             match: {
 *                 prefix: "/",
 *             },
 *             action: {
 *                 weightedTargets: [
 *                     {
 *                         virtualNode: serviceb1.name,
 *                         weight: 90,
 *                     },
 *                     {
 *                         virtualNode: serviceb2.name,
 *                         weight: 10,
 *                     },
 *                 ],
 *             },
 *         },
 *     },
 * });
 * ```
 *
 * ### HTTP Header Routing
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const serviceb = new aws.appmesh.Route("serviceb", {
 *     name: "serviceB-route",
 *     meshName: simple.id,
 *     virtualRouterName: servicebAwsAppmeshVirtualRouter.name,
 *     spec: {
 *         httpRoute: {
 *             match: {
 *                 method: "POST",
 *                 prefix: "/",
 *                 scheme: "https",
 *                 headers: [{
 *                     name: "clientRequestId",
 *                     match: {
 *                         prefix: "123",
 *                     },
 *                 }],
 *             },
 *             action: {
 *                 weightedTargets: [{
 *                     virtualNode: servicebAwsAppmeshVirtualNode.name,
 *                     weight: 100,
 *                 }],
 *             },
 *         },
 *     },
 * });
 * ```
 *
 * ### Retry Policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const serviceb = new aws.appmesh.Route("serviceb", {
 *     name: "serviceB-route",
 *     meshName: simple.id,
 *     virtualRouterName: servicebAwsAppmeshVirtualRouter.name,
 *     spec: {
 *         httpRoute: {
 *             match: {
 *                 prefix: "/",
 *             },
 *             retryPolicy: {
 *                 httpRetryEvents: ["server-error"],
 *                 maxRetries: 1,
 *                 perRetryTimeout: {
 *                     unit: "s",
 *                     value: 15,
 *                 },
 *             },
 *             action: {
 *                 weightedTargets: [{
 *                     virtualNode: servicebAwsAppmeshVirtualNode.name,
 *                     weight: 100,
 *                 }],
 *             },
 *         },
 *     },
 * });
 * ```
 *
 * ### TCP Routing
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const serviceb = new aws.appmesh.Route("serviceb", {
 *     name: "serviceB-route",
 *     meshName: simple.id,
 *     virtualRouterName: servicebAwsAppmeshVirtualRouter.name,
 *     spec: {
 *         tcpRoute: {
 *             action: {
 *                 weightedTargets: [{
 *                     virtualNode: serviceb1.name,
 *                     weight: 100,
 *                 }],
 *             },
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import App Mesh virtual routes using `mesh_name` and `virtual_router_name` together with the route's `name`. For example:
 *
 * ```sh
 * $ pulumi import aws:appmesh/route:Route serviceb simpleapp/serviceB/serviceB-route
 * ```
 */
class Route extends pulumi.CustomResource {
    /**
     * Get an existing Route resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Route(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Route.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Route.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["createdDate"] = state?.createdDate;
            resourceInputs["lastUpdatedDate"] = state?.lastUpdatedDate;
            resourceInputs["meshName"] = state?.meshName;
            resourceInputs["meshOwner"] = state?.meshOwner;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["resourceOwner"] = state?.resourceOwner;
            resourceInputs["spec"] = state?.spec;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["virtualRouterName"] = state?.virtualRouterName;
        }
        else {
            const args = argsOrState;
            if (args?.meshName === undefined && !opts.urn) {
                throw new Error("Missing required property 'meshName'");
            }
            if (args?.spec === undefined && !opts.urn) {
                throw new Error("Missing required property 'spec'");
            }
            if (args?.virtualRouterName === undefined && !opts.urn) {
                throw new Error("Missing required property 'virtualRouterName'");
            }
            resourceInputs["meshName"] = args?.meshName;
            resourceInputs["meshOwner"] = args?.meshOwner;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["spec"] = args?.spec;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["virtualRouterName"] = args?.virtualRouterName;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["lastUpdatedDate"] = undefined /*out*/;
            resourceInputs["resourceOwner"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Route.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Route = Route;
/** @internal */
Route.__pulumiType = 'aws:appmesh/route:Route';
//# sourceMappingURL=route.js.map