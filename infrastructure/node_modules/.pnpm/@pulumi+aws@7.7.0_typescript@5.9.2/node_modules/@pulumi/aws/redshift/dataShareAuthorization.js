"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataShareAuthorization = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS Redshift Data Share Authorization.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.redshift.DataShareAuthorization("example", {
 *     consumerIdentifier: "123456789012",
 *     dataShareArn: "arn:aws:redshift:us-west-2:123456789012:datashare:3072dae5-022b-4d45-9cd3-01f010aae4b2/example_share",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Redshift Data Share Authorization using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:redshift/dataShareAuthorization:DataShareAuthorization example arn:aws:redshift:us-west-2:123456789012:datashare:3072dae5-022b-4d45-9cd3-01f010aae4b2/example_share,123456789012
 * ```
 */
class DataShareAuthorization extends pulumi.CustomResource {
    /**
     * Get an existing DataShareAuthorization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DataShareAuthorization(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of DataShareAuthorization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataShareAuthorization.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["allowWrites"] = state?.allowWrites;
            resourceInputs["consumerIdentifier"] = state?.consumerIdentifier;
            resourceInputs["dataShareArn"] = state?.dataShareArn;
            resourceInputs["managedBy"] = state?.managedBy;
            resourceInputs["producerArn"] = state?.producerArn;
            resourceInputs["region"] = state?.region;
        }
        else {
            const args = argsOrState;
            if (args?.consumerIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'consumerIdentifier'");
            }
            if (args?.dataShareArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataShareArn'");
            }
            resourceInputs["allowWrites"] = args?.allowWrites;
            resourceInputs["consumerIdentifier"] = args?.consumerIdentifier;
            resourceInputs["dataShareArn"] = args?.dataShareArn;
            resourceInputs["region"] = args?.region;
            resourceInputs["managedBy"] = undefined /*out*/;
            resourceInputs["producerArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataShareAuthorization.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DataShareAuthorization = DataShareAuthorization;
/** @internal */
DataShareAuthorization.__pulumiType = 'aws:redshift/dataShareAuthorization:DataShareAuthorization';
//# sourceMappingURL=dataShareAuthorization.js.map