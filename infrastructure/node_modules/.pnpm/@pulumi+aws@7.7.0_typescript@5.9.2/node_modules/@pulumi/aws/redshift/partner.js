"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Partner = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates a new Amazon Redshift Partner Integration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.redshift.Partner("example", {
 *     clusterIdentifier: exampleAwsRedshiftCluster.id,
 *     accountId: "1234567910",
 *     databaseName: exampleAwsRedshiftCluster.databaseName,
 *     partnerName: "example",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Redshift usage limits using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:redshift/partner:Partner example 01234567910:cluster-example-id:example:example
 * ```
 */
class Partner extends pulumi.CustomResource {
    /**
     * Get an existing Partner resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Partner(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Partner.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Partner.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["clusterIdentifier"] = state?.clusterIdentifier;
            resourceInputs["databaseName"] = state?.databaseName;
            resourceInputs["partnerName"] = state?.partnerName;
            resourceInputs["region"] = state?.region;
            resourceInputs["status"] = state?.status;
            resourceInputs["statusMessage"] = state?.statusMessage;
        }
        else {
            const args = argsOrState;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.clusterIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterIdentifier'");
            }
            if (args?.databaseName === undefined && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if (args?.partnerName === undefined && !opts.urn) {
                throw new Error("Missing required property 'partnerName'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["clusterIdentifier"] = args?.clusterIdentifier;
            resourceInputs["databaseName"] = args?.databaseName;
            resourceInputs["partnerName"] = args?.partnerName;
            resourceInputs["region"] = args?.region;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusMessage"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Partner.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Partner = Partner;
/** @internal */
Partner.__pulumiType = 'aws:redshift/partner:Partner';
//# sourceMappingURL=partner.js.map