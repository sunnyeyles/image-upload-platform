"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnapshotCopy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS Redshift Snapshot Copy.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.redshift.SnapshotCopy("example", {
 *     clusterIdentifier: exampleAwsRedshiftCluster.id,
 *     destinationRegion: "us-east-1",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Redshift Snapshot Copy using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:redshift/snapshotCopy:SnapshotCopy example cluster-id-12345678
 * ```
 */
class SnapshotCopy extends pulumi.CustomResource {
    /**
     * Get an existing SnapshotCopy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SnapshotCopy(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of SnapshotCopy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnapshotCopy.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["clusterIdentifier"] = state?.clusterIdentifier;
            resourceInputs["destinationRegion"] = state?.destinationRegion;
            resourceInputs["manualSnapshotRetentionPeriod"] = state?.manualSnapshotRetentionPeriod;
            resourceInputs["region"] = state?.region;
            resourceInputs["retentionPeriod"] = state?.retentionPeriod;
            resourceInputs["snapshotCopyGrantName"] = state?.snapshotCopyGrantName;
        }
        else {
            const args = argsOrState;
            if (args?.clusterIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterIdentifier'");
            }
            if (args?.destinationRegion === undefined && !opts.urn) {
                throw new Error("Missing required property 'destinationRegion'");
            }
            resourceInputs["clusterIdentifier"] = args?.clusterIdentifier;
            resourceInputs["destinationRegion"] = args?.destinationRegion;
            resourceInputs["manualSnapshotRetentionPeriod"] = args?.manualSnapshotRetentionPeriod;
            resourceInputs["region"] = args?.region;
            resourceInputs["retentionPeriod"] = args?.retentionPeriod;
            resourceInputs["snapshotCopyGrantName"] = args?.snapshotCopyGrantName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnapshotCopy.__pulumiType, name, resourceInputs, opts);
    }
}
exports.SnapshotCopy = SnapshotCopy;
/** @internal */
SnapshotCopy.__pulumiType = 'aws:redshift/snapshotCopy:SnapshotCopy';
//# sourceMappingURL=snapshotCopy.js.map