"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnapshotCopyGrant = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates a snapshot copy grant that allows AWS Redshift to encrypt copied snapshots with a customer master key from AWS KMS in a destination region.
 *
 * Note that the grant must exist in the destination region, and not in the region of the cluster.
 *
 * ## Import
 *
 * Using `pulumi import`, import Redshift Snapshot Copy Grants by name. For example:
 *
 * ```sh
 * $ pulumi import aws:redshift/snapshotCopyGrant:SnapshotCopyGrant test my-grant
 * ```
 */
class SnapshotCopyGrant extends pulumi.CustomResource {
    /**
     * Get an existing SnapshotCopyGrant resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SnapshotCopyGrant(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of SnapshotCopyGrant.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnapshotCopyGrant.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["kmsKeyId"] = state?.kmsKeyId;
            resourceInputs["region"] = state?.region;
            resourceInputs["snapshotCopyGrantName"] = state?.snapshotCopyGrantName;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
        }
        else {
            const args = argsOrState;
            if (args?.snapshotCopyGrantName === undefined && !opts.urn) {
                throw new Error("Missing required property 'snapshotCopyGrantName'");
            }
            resourceInputs["kmsKeyId"] = args?.kmsKeyId;
            resourceInputs["region"] = args?.region;
            resourceInputs["snapshotCopyGrantName"] = args?.snapshotCopyGrantName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnapshotCopyGrant.__pulumiType, name, resourceInputs, opts);
    }
}
exports.SnapshotCopyGrant = SnapshotCopyGrant;
/** @internal */
SnapshotCopyGrant.__pulumiType = 'aws:redshift/snapshotCopyGrant:SnapshotCopyGrant';
//# sourceMappingURL=snapshotCopyGrant.js.map