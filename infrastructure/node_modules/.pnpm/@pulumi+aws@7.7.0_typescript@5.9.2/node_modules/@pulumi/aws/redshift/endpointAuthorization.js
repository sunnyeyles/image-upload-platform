"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.EndpointAuthorization = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates a new Amazon Redshift endpoint authorization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.redshift.EndpointAuthorization("example", {
 *     account: "01234567910",
 *     clusterIdentifier: exampleAwsRedshiftCluster.clusterIdentifier,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Redshift endpoint authorization using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:redshift/endpointAuthorization:EndpointAuthorization example 01234567910:cluster-example-id
 * ```
 */
class EndpointAuthorization extends pulumi.CustomResource {
    /**
     * Get an existing EndpointAuthorization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new EndpointAuthorization(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of EndpointAuthorization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EndpointAuthorization.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["account"] = state?.account;
            resourceInputs["allowedAllVpcs"] = state?.allowedAllVpcs;
            resourceInputs["clusterIdentifier"] = state?.clusterIdentifier;
            resourceInputs["endpointCount"] = state?.endpointCount;
            resourceInputs["forceDelete"] = state?.forceDelete;
            resourceInputs["grantee"] = state?.grantee;
            resourceInputs["grantor"] = state?.grantor;
            resourceInputs["region"] = state?.region;
            resourceInputs["vpcIds"] = state?.vpcIds;
        }
        else {
            const args = argsOrState;
            if (args?.account === undefined && !opts.urn) {
                throw new Error("Missing required property 'account'");
            }
            if (args?.clusterIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterIdentifier'");
            }
            resourceInputs["account"] = args?.account;
            resourceInputs["clusterIdentifier"] = args?.clusterIdentifier;
            resourceInputs["forceDelete"] = args?.forceDelete;
            resourceInputs["region"] = args?.region;
            resourceInputs["vpcIds"] = args?.vpcIds;
            resourceInputs["allowedAllVpcs"] = undefined /*out*/;
            resourceInputs["endpointCount"] = undefined /*out*/;
            resourceInputs["grantee"] = undefined /*out*/;
            resourceInputs["grantor"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EndpointAuthorization.__pulumiType, name, resourceInputs, opts);
    }
}
exports.EndpointAuthorization = EndpointAuthorization;
/** @internal */
EndpointAuthorization.__pulumiType = 'aws:redshift/endpointAuthorization:EndpointAuthorization';
//# sourceMappingURL=endpointAuthorization.js.map