"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnapshotScheduleAssociation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const _default = new aws.redshift.Cluster("default", {
 *     clusterIdentifier: "tf-redshift-cluster",
 *     databaseName: "mydb",
 *     masterUsername: "foo",
 *     masterPassword: "Mustbe8characters",
 *     nodeType: "dc1.large",
 *     clusterType: "single-node",
 * });
 * const defaultSnapshotSchedule = new aws.redshift.SnapshotSchedule("default", {
 *     identifier: "tf-redshift-snapshot-schedule",
 *     definitions: ["rate(12 hours)"],
 * });
 * const defaultSnapshotScheduleAssociation = new aws.redshift.SnapshotScheduleAssociation("default", {
 *     clusterIdentifier: _default.id,
 *     scheduleIdentifier: defaultSnapshotSchedule.id,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Redshift Snapshot Schedule Association using the `<cluster-identifier>/<schedule-identifier>`. For example:
 *
 * ```sh
 * $ pulumi import aws:redshift/snapshotScheduleAssociation:SnapshotScheduleAssociation default tf-redshift-cluster/tf-redshift-snapshot-schedule
 * ```
 */
class SnapshotScheduleAssociation extends pulumi.CustomResource {
    /**
     * Get an existing SnapshotScheduleAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SnapshotScheduleAssociation(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of SnapshotScheduleAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnapshotScheduleAssociation.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["clusterIdentifier"] = state?.clusterIdentifier;
            resourceInputs["region"] = state?.region;
            resourceInputs["scheduleIdentifier"] = state?.scheduleIdentifier;
        }
        else {
            const args = argsOrState;
            if (args?.clusterIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterIdentifier'");
            }
            if (args?.scheduleIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'scheduleIdentifier'");
            }
            resourceInputs["clusterIdentifier"] = args?.clusterIdentifier;
            resourceInputs["region"] = args?.region;
            resourceInputs["scheduleIdentifier"] = args?.scheduleIdentifier;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnapshotScheduleAssociation.__pulumiType, name, resourceInputs, opts);
    }
}
exports.SnapshotScheduleAssociation = SnapshotScheduleAssociation;
/** @internal */
SnapshotScheduleAssociation.__pulumiType = 'aws:redshift/snapshotScheduleAssociation:SnapshotScheduleAssociation';
//# sourceMappingURL=snapshotScheduleAssociation.js.map